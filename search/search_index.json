{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#dexguard-version-9105","title":"DexGuard version 9.10.5","text":"<p>Welcome to the DexGuard manual! This manual serves as your comprehensive guide to understanding, configuring and harnessing the capabilities of DexGuard.</p> <p>To get started, we recommend reading the introduction. Understanding the DexGuard workflow and the most common issues it faces is very useful when configuring DexGuard for your project!</p> <ul> <li> <p> Welcome!</p> <p>A brief overview of the DexGuard workflow and an explanation of the most common issues DexGuard faces.</p> <p> Introduction</p> </li> </ul> <p>Already read the introduction? Below you can find some navigation cards to the most important pages of the manual.</p> <ul> <li> <p> Get started!</p> <p>Set up DexGuard and start configuring protection by following this comprehensive step-by-step guide.</p> <p> Quick Start guide</p> </li> <li> <p> Video tutorials</p> <p>Would you like to watch step-by-step video tutorials to get started with the manual configuration workflow? In these videos, we'll show you how to setup, configure, and debug your project.</p> <p> Video Tutorials</p> </li> <li> <p> Release notes</p> <p>Interested in the most recent improvements? You can find an overview here!</p> <p> Release notes</p> </li> <li> <p> Static analysis protection</p> <p>Looking to harden your application against static analysis? Here is an overview of the advanced protection features available!</p> <p> Obfuscation features</p> </li> <li> <p> Runtime protection</p> <p>Want your application to be protected from compromised devices? Check out the Runtime Application Self Protection features!</p> <p> RASP</p> </li> <li> <p> ThreatCast monitoring</p> <p>Want insights into your live applications? Consider Guardsquare's RASP threat monitoring feature!</p> <p> ThreatCast</p> </li> <li> <p> Protection report</p> <p>Not quite sure whether your application is well-protected? Have a look at the protection report DexGuard generated!</p> <p> Protection report</p> </li> <li> <p> Malware protection</p> <p>DexGuard can protect your application against common malware attacks. You can do this with a single line of configuration. Check it out here!</p> <p> Malware protection</p> </li> <li> <p> Gradle plugin</p> <p>Still have Gradle questions after following the Quick Start guide? Here is some more in-depth information about our Gradle plugin.</p> <p> Gradle plugin</p> </li> <li> <p> Native code protection</p> <p>Is a significant part of your application implemented in native code? Consider DexGuard's optional Android Native Development Kit Add-on!</p> <p> NDK Add-on</p> </li> <li> <p> Reference card</p> <p>Looking for an overview of all configuration options?</p> <p> Reference card</p> </li> <li> <p> FAQ</p> <p>Running into issues or have a question? Please have a look at the troubleshooting page before contacting support.</p> <p> Troubleshooting</p> </li> <li> <p> System requirements</p> <p>Unsure whether your setup meets all DexGuard's requirements? Here is an overview of requirements and key technology support.</p> <p> Requirements</p> </li> </ul>"},{"location":"annotations.html","title":"Annotations","text":"<p>In addition to the standard configuration via project-specific configuration files (typically <code>proguard-project.txt</code> or <code>dexguard-project.txt</code>), DexGuard also supports annotation-based configuration.</p>"},{"location":"annotations.html#dependencies-for-annotation-based-configuration","title":"Dependencies for annotation-based configuration","text":"<p>DexGuard comes with a separate jar that contains supported Java annotations. You can find the annotations jar in the DexGuard distribution at</p> <pre><code>lib/dexguard-annotations.jar\n</code></pre> <p>It is self-contained, and does not depend on any libraries, other than the Java Standard Library.</p> <p>Info</p> <p>Android <code>@Keep</code> annotations (androidx.annotation) are also supported.</p>"},{"location":"annotations.html#configuration-changes-for-annotation-based-configuration","title":"Configuration changes for annotation-based configuration","text":"<p>Info</p> <p>If you are using AGP &lt; 7.2, refer to the workaround described here to ensure that configuration targeting runtime-invisible annotations works as expected in your project.</p> <p>The DexGuard annotations are runtime-invisible annotations that you can apply to entities in your project to configure DexGuard behaviour, as an alternative to a file-based configuration for which you can find more information here.</p>"},{"location":"annotations.html#keep-annotations-for-code","title":"Keep annotations for code","text":"<p>The following annotations (all located in package <code>proguard.annotation</code>) are supported:</p> Annotation Target Description Equivalent configuration <code>@Keep</code> ClassFieldMethod Preserves the annotated class/field/method. For classes:<code>-keep class com.example.SomeClass</code>For class members:<code>-keepclassmembers class com.example.SomeClass {</code> <code>someMethod();</code> <code>}</code> <code>@KeepName</code> ClassFieldMethod Preserves the name of the annotated class/field/method. For classes:<code>-keepnames class SomeClass</code>For class members:<code>-keepclassmembernames class com.example.SomeClass {</code> <code>someMethod();</code><code>}</code> <code>@Keep</code>\u200b<code>ClassMembers</code> Class Preserves all members of the annotated class. <code>-keepclassmembers class com.example.SomeClass { *; }</code> <code>@KeepPublic</code>\u200b<code>ClassMembers</code> Class Preserves all public members of the annotated class. <code>-keepclassmembers public class com.example.SomeClass {</code> <code>public *;</code><code>}</code> <code>@KeepPublicProtected</code>\u200b<code>ClassMembers</code> Class Preserves all public and protected members of the annotated class. <code>-keepclassmembers class com.example.SomeClass {</code> <code>public protected *;</code><code>}</code> <code>@Keep</code>\u200b<code>ClassMemberNames</code> Class Preserves the names of all members of the annotated class. <code>-keepclassmembernames class com.example.SomeClass { *; }</code> <code>@KeepPublic</code>\u200b<code>ClassMemberNames</code> Class Preserves the names of all public members of the annotated class. <code>-keepclassmembernames class com.example.SomeClass {</code> <code>public *;</code> <code>}</code> <code>@KeepPublicProtected</code>\u200b<code>ClassMemberNames</code> Class Preserves the names of all public and protected members of the annotated class. <code>-keepclassmembernames class com.example.SomeClass {</code> <code>public protected *;</code> <code>}</code> <code>@Keep</code>\u200b<code>GettersSetters</code> Class Preserves all getters and setters of the annotated class. <code>-keepclassmembers class com.example.SomeClass {</code> <code>*** get*();</code> <code>void set*(***)*;</code><code>}</code> <code>@KeepPublic</code>\u200b<code>GettersSetters</code> Class Preserves all public getters and setters of the annotated class. <code>-keepclassmembers class com.example.SomeClass {</code> <code>public *** get*();</code> <code>public void set*(***)*;</code><code>}</code> <code>@Keep</code>\u200b<code>Implementations</code> Class Preserves all classes the extend/implement the annotated class. <code>-keep class * extends com.example.SomeClass</code> <code>@KeepPublic</code>\u200b<code>Implementations</code> Class Preserves all public classes that extend/implement the annotated class. <code>-keep public class * extends com.example.SomeClass</code> <p>The <code>@Keep</code> and <code>@KeepName</code> annotations, when applied to a class, will only preserve the class itself but not its members (i.e. fields and methods). In order to fully keep the class and all its members from being shrunk or obfuscated, you have to annotate the class also with <code>@KeepClassMembers</code> or <code>@KeepClassMemberNames</code> annotations like this:</p> <pre><code>@Keep\n@KeepClassMembers\npublic class SomeClass {\n    ...\n}\n</code></pre>"},{"location":"annotations.html#obfuscation-annotations","title":"Obfuscation annotations","text":"<p>The following annotations (located in package <code>com.guardsquare.dexguard.annotation</code>) related to obfuscation are supported:</p> Annotation Target Description Equivalent configuration <code>@EncryptClass</code> Class Encrypts the annotated class. <code>-encryptclasses class com.example.SomeClass</code> <code>@EncryptString</code> Field Encrypts the annotated final String field. <code>-encryptstrings class com.example.SomeClass {</code> <code>final java.lang.String someField;</code> <code>}</code> <code>@EncryptStrings</code> ClassMethod Encrypts all strings in the annotated class or method. <code>-encryptstrings class com.example.SomeClass</code><code>-encryptstrings class com.example.SomeClass { someMethod(); }</code> <code>@ObfuscateCodeLow</code> ClassMethod Obfuscates the code attribute(s) of the annotated class or method with low strength. For classes:<code>-obfuscatecode,low class com.example.SomeClass</code>For methods:<code>-obfuscatecode,low class com.example.SomeClass { someMethod(); }</code> <code>@ObfuscateCodeMedium</code> ClassMethod Obfuscates the code attribute(s) of the annotated class or method with medium strength. For classes:<code>-obfuscatecode,medium class com.example.SomeClass</code>For methods:<code>-obfuscatecode,medium class com.example.SomeClass { someMethod(); }</code> <code>@ObfuscateCodeHigh</code> ClassMethod Obfuscates the code attribute(s) of the annotated class or method with high strength. For classes:<code>-obfuscatecode,high class com.example.SomeClass</code>For methods:<code>-obfuscatecode,high class com.example.SomeClass { someMethod(); }</code> <code>@VirtualizeCode</code> ClassMethod Virtualizes the code attribute(s) of the annotated class or method. For classes:<code>-virtualizecode class com.example.SomeClass</code>For methods:<code>-virtualizecode class com.example.SomeClass { someMethod(); }</code>"},{"location":"configuration.html","title":"Overview","text":"<p>When processing an application using DexGuard, the first step is to make sure that the processed application still works. In principle, DexGuard leaves the functionality of the application unchanged. However, if any code in the application performs reflection on classes, fields, methods, resources, resource files, asset files, or native libraries, then DexGuard may need some hints in its configuration, so it doesn't remove or rename these elements.</p> <p>These sections provide some tips to create a working configuration as quickly as possible.</p>"},{"location":"configuration.html#iterating-over-your-configuration","title":"Iterating over your configuration","text":""},{"location":"configuration.html#protection-report","title":"Protection Report","text":"<p>DexGuard automatically produces a visual HTML report to help you improve the overall security of your DexGuard hardened builds. This Protection Report allows you to continuously assess and improve the protection of your application or library. It provides:</p> <ul> <li>Key technical risk metrics.</li> <li>Protection feature status and impact overview.</li> <li>Tailored configuration improvement advice.</li> </ul> <p></p> <p>When used as a stand-alone application, DexGuard generates the protection reports in the <code>reports</code> directory under the name <code>protectionreport.html</code>. When using the DexGuard Gradle plugin, the reports are generated in the default gradle output directory. </p> <p>In order to disable the generation of such reports after a DexGuard build, simply include the <code>-disableprotectionreport</code> setting in your configuration file. </p>"},{"location":"configuration.html#telemetry","title":"Telemetry","text":""},{"location":"configuration.html#build-time","title":"Build time","text":"<p>Whenever your build system has an external connection to the internet, DexGuard sends telemetry data to Guardsquare's servers. The telemetry data is also dumped to a JSON file (<code>telemetry_dump.json</code>) so that you can review the data collected by Guardsquare.</p> <p>The collected telemetry data will be very helpful for us with effectively supporting you with your support tickets.</p> <p>Info</p> <p>The collected Telemetry data will never expose any sensitive info like string or class names. Rather, it will focus on the used features and their effectiveness. The collection of this data allows Guardsquare to further enhance DexGuard for you, based on real usage of its features.</p> <p>This behavior can be disabled by using the <code>-disablebuildtelemetry</code> configuration option.</p>"},{"location":"configuration.html#runtime","title":"Runtime","text":"<p>DexGuard will collect additional data when running your app with <code>-addconfigurationdebugging</code>. The collected telemetry data will be used to continuously improve this feature.</p> <p>The telemetry data that is sent is also dumped to a file on the device. The location of this file, as well as instructions to retrieve it, are printed to the logcat in a message of the following format:</p> <pre><code>Crash information has been written to: &lt;path&gt;\nUse `adb pull &lt;path&gt;` to retrieve the file from the device.\n</code></pre> <p>This behavior can be disabled by using the <code>-disableruntimetelemetry</code> configuration option.</p>"},{"location":"configuration.html#best-practices","title":"Best Practices","text":""},{"location":"configuration.html#consider-any-reflection-in-your-application","title":"Consider any reflection in your application","text":"<p>Your application may be calling any of the following methods with non-trivial (non-constant) arguments. You then need to preserve the corresponding element of the application.</p>"},{"location":"configuration.html#classforname","title":"<code>Class.forName(...)</code>","text":"<p>You may need to explicitly preserve the class or classes that are loaded dynamically, with their original names. For example:</p> <pre><code>-keep class com.example.SomeClass\n</code></pre>"},{"location":"configuration.html#classgetfieldclassgetdeclaredfield","title":"<code>Class#getField(...)</code><code>Class#getDeclaredField(...)</code>","text":"<p>You may need to explicitly preserve the field or fields that are accessed   dynamically, with their original names. For example:</p> <pre><code>-keepclassmembers class com.example.SomeClass { &lt;fields&gt;; }\n</code></pre>"},{"location":"configuration.html#classgetmethodclassgetdeclaredmethod","title":"<code>Class#getMethod(...)</code><code>Class#getDeclaredMethod(...)</code>","text":"<p>You may need to explicitly preserve the method or methods that are accessed   dynamically, with their original names. For example:</p> <pre><code>-keepclassmembers class com.example.SomeClass { &lt;methods&gt;; }\n</code></pre>"},{"location":"configuration.html#atomicintegerfieldupdaternewupdateratomiclongfieldupdaternewupdateratomicreferencefieldupdaternewupdater","title":"<code>AtomicIntegerFieldUpdater.newUpdater(...)</code><code>AtomicLongFieldUpdater.newUpdater(...)</code><code>AtomicReferenceFieldUpdater.newUpdater(...)</code>","text":"<p>You may need to explicitly preserve the field or fields that are accessed   dynamically, with their original names. For example:</p> <pre><code>-keepclassmembers class com.example.SomeClass { &lt;fields&gt;; }\n</code></pre>"},{"location":"configuration.html#resourcesgetidentifier","title":"<code>Resources#getIdentifier(...)</code>","text":"<p>You may need to explicitly preserve the resource or resources that are   accessed dynamically, with their original names. For example:</p> <pre><code>-keepresources string/some_string\n</code></pre>"},{"location":"configuration.html#assetmanageropenassetmanageropenfdtypefacecreatefromasset","title":"<code>AssetManager#open(...)</code><code>AssetManager#openFd(...)</code><code>Typeface.createFromAsset(...)</code>","text":"<p>You may need to explicitly preserve the asset file or files that are   opened, with their original names. For example:</p> <pre><code>-keepresourcefiles assets/some_assets.txt\n</code></pre>"},{"location":"configuration.html#systemloadlibrarysystemload","title":"<code>System.loadLibrary(...)</code><code>System.load(...)</code>","text":"<p>You may need to explicitly preserve the native library or libraries that   are loaded dynamically, with their original names. For example:</p> <pre><code>-keepresourcefiles lib/*/libsomelibrary.so\n</code></pre> <p>These constructs may of course be hidden inside third-party libraries. DexGuard's default configuration takes care of various popular libraries. Some common libraries require special attention:</p>"},{"location":"configuration.html#gson","title":"GSON","text":"<p>The GSON library performs reflection on the names of the fields that it   serializes and deserializes. These names directly correspond to the JSON   strings.  You therefore need to preserve them, in order not to break the   strings.</p> <p><pre><code>-keepclassmembers class com.example.SerializedClass { &lt;fields&gt;; }\n</code></pre> You can find more details in the GSON example and a sample project in <code>samples/advanced/Gson</code>.</p>"},{"location":"configuration.html#dagger","title":"Dagger","text":"<p>The Dagger 1 framework generates classes at compile time and links them to   their base classes at run-time, based on their names. You still need to   manually preserve the corresponding base classes in your project. For   example, for a generated class like <code>com.example.SomeClass$$ModuleAdapter</code>,   you still need to specify:</p> <pre><code>-keep class com.example.SomeClass\n</code></pre> <p>That way, Dagger can combine the corresponding pairs of classes, based on their names. You can figure out the base classes by listing the generated classes in the gen directory of your project (e.g. <code>com/examples/SomeClass$$ModuleAdapter.class</code>).</p> <p>You can find more details in the Dagger example and a sample project in <code>samples/advanced/Dagger</code>.</p> <p>Dagger 2 no longer relies on these naming conventions, which makes configuring for it a lot easier.</p> <p>In all of the above examples, you can use wildcards and more complex patterns in the specifications, e.g. to match all classes in specified packages.</p>"},{"location":"configuration.html#get-configuration-suggestions-at-run-time","title":"Get configuration suggestions at run-time","text":"<p>DexGuard can instrument the application to debug the configuration:</p> <pre><code>-addconfigurationdebugging\n</code></pre> <p>This option disables shrinking, optimization, RASP and other advanced protection features; only name obfuscation is enabled.  Furthermore, the icon of the application is changed to the DexGuard icon. This is to discourage accidental releases of this build.</p> <p>Note</p> <p>Starting from DexGuard version 9.8.12, the <code>-addconfigurationdebugging</code> feature can recover and log keep rules for classes whose name is derived from another class with a suffix appended. As a prerequisite for this improvement, name obfuscation is disabled. To enable name obfuscation features in combination with <code>-addconfigurationdebugging</code>, please use option <code>-addconfigurationdebugging,nopredictableobfuscation</code>.</p> <p>After DexGuard processing, install the instrumented application on a device or emulator of your choice and run it. During execution of the app, DexGuard will print configuration recommendations related to reflection that would normally cause a crash due to obfuscation or shrinking. </p> <p>Warning</p> <p>Since instrumented applications are not protected and expose debugging information, <code>-addconfigurationdebugging</code> prevents your application from being released on the Google Play Store. It does so, among other measures, by setting the testOnly attribute in the Android manifest. This has implications for how the application can be installed:</p> <ul> <li> <p>To install an APK, use the following command: <pre><code>$ adb install -t out.apk\n</code></pre></p> </li> <li> <p>To install an AAB, use the following command: <pre><code>$ bundletool install-apks --apks out.apks --allow-test-only\n</code></pre></p> </li> </ul> <p>Apart from printing the rules in the logcat, the rules are also printed to a file on the device. The location of this file, as well as instructions to retrieve it are printed to logcat in a message of the following format: <pre><code>Writing rule suggestions to &lt;path&gt;: use `adb pull &lt;path&gt;` to retrieve the file from the device.\n</code></pre> Where <code>&lt;path&gt;</code> will be replaced with a concrete path on the device.</p> <p>Note</p> <p>You should make sure that you disable this setting again when you create an actual protected version of your application, since this option disables shrinking, optimization and advanced protections, and injects obfuscation information into the application.</p>"},{"location":"configuration.html#tune-the-obfuscation-level","title":"Tune the obfuscation level","text":"<p>In case of problems, you can easily switch the default configuration in your Gradle configuration, with slightly different levels of obfuscation:</p> KotlinGroovy <pre><code>dexguard {\n    ...\n    configurations {\n        defaultConfiguration(\"dexguard-release-aggressive.pro\")\n        ...\n    }\n    ...\n}\n</code></pre> <p>or</p> <pre><code>dexguard {\n    ...\n    configurations {\n        defaultConfiguration(\"dexguard-release.pro\")\n        ...\n    }\n    ...\n}\n</code></pre> <p>or</p> <pre><code>dexguard {\n    ...\n    configurations {\n        defaultConfiguration(\"dexguard-release-conservative.pro\")\n        ...\n    }\n    ...\n}\n</code></pre> <pre><code>dexguard {\n    ...\n    configurations {\n        defaultConfiguration 'dexguard-release-aggressive.pro'\n        ...\n    }\n    ...\n}\n</code></pre> <p>or</p> <pre><code>dexguard {\n    ...\n    configurations {\n        defaultConfiguration 'dexguard-release.pro'\n        ...\n    }\n    ...\n}\n</code></pre> <p>or</p> <pre><code>dexguard {\n    ...\n    configurations {\n        defaultConfiguration 'dexguard-release-conservative.pro'\n        ...\n    }\n    ...\n}\n</code></pre>"},{"location":"configuration.html#disable-obfuscation-for-third-party-libraries","title":"Disable obfuscation for third-party libraries","text":"<p>If a third-party library is causing problems, the most conservative approach is to disable its obfuscation:</p> <pre><code>-keep,includecode class com.example.library.** { *; }\n</code></pre> <p>Such a configuration is generally not optimal, especially for large or sensitive libraries, but it can be a start. If it helps, you can try tuning the configuration, for example by only keeping the classes with their original names, but not necessarily their fields or methods:</p> <pre><code>-keep class com.example.library.**\n</code></pre>"},{"location":"configuration.html#disable-individual-obfuscation-features","title":"Disable individual obfuscation features","text":"<p>When tracking down issues, you can try disabling individual processing steps:</p> <pre><code>-dontshrink\n-dontoptimize\n-dontobfuscate\n</code></pre> <p>You can also disable individual optimization and obfuscation features on the entire code base:</p> <pre><code>-keep class * { *; }\n-keepattributes *\n-keepresources */*\n-keepresourcefiles res/**\n-keepresourcefiles assets/**\n-keepresourcefiles lib/**\n-keepresourcexmlattributenames **\n</code></pre> <p>None of these settings is a solution for all configuration issues, but they can help to narrow down the problem. The most effective approach is generally to get a working configuration to start from, and then tune it further.</p>"},{"location":"configuration.html#obfuscating-libraries","title":"Obfuscating libraries","text":"<p>An obfuscated library may get broken when it it is being processed a second time during the obfuscation/shrinking of the final application it is part of. For  example, parts of the obfuscated library which are only called from encrypted classes may be removed while shrinking the final application. To prevent this, obfuscated libraries must provide their own configuration with keep rules for all classes, class members and resources that are seemingly unused after obfuscation of the library.</p> <p>API entry points of a library have to be preserved during obfuscation of the library, but can be safely shrunk/obfuscated while processing the final application. You can add the \u2018asapi\u2019 modifier to keep rules that specify such an API entry point: DexGuard will process them exactly the same way as other keep rules, but won't copy them to the generated library configuration.</p> <p>For all library projects that have at least one keep rule with the \u2018asapi\u2019 modifier, a library configuration will be automatically generated and written  to the \u2018proguard.txt\u2019 file inside the resulting AAR.</p>"},{"location":"defaultconfigurations.html","title":"Default Configs","text":"<p>DexGuard offers various default configurations to cover most use-cases. It is highly recommended to use one of the default configurations together with project-specific rules like this. You can do this by using the <code>-include</code> option with the path to a default configuration in the dexguard.jar:</p> <pre><code># Standard release configuration, keeps all asset files.\n\n-include /lib/dexguard-release.pro\n\n# Your own configuration\n\n-injars your-app.apk\n-outjars your-app-protected.apk\n-libraryjars ...\n\n-keep class com.example.MyClass\n...\n</code></pre>"},{"location":"defaultconfigurations.html#debug-build-types","title":"Debug build types","text":"<p>The following table lists all available default configurations for debug type builds (application and library projects):</p> Configuration Description dexguard-debug.pro Disables <code>shrinking</code>, <code>optimization</code>, <code>obfuscation</code>. See <code>-dontshrink</code>, <code>-dontoptimize</code> and <code>-dontobfuscate</code> for more details. dexguard-debug-instantapp.pro Same as <code>dexguard-debug.pro</code> but is also allowed to change the <code>AndroidManifest.xml</code> and <code>resources.arsc</code> as needed to process Android Instant Apps. dexguard-debug-shrink.pro Like <code>dexguard-debug.pro</code>, but with <code>shrinking</code> enabled. This configuration can be useful to avoid multidexing, if the Dalvik bytecode is becoming too large. You do need to make sure that you have a working project-specific configuration, like for release builds. dexguard-library-debug.pro Like <code>dexguard-debug.pro</code>, but for library projects."},{"location":"defaultconfigurations.html#release-build-types","title":"Release build types","text":""},{"location":"defaultconfigurations.html#application-projects","title":"Application projects","text":"<p>The following table lists all available default configurations for release type builds of application projects:</p> Configuration Description dexguard-release.pro Standard release configuration, keeps all asset files. dexguard-release-aggressive.pro Like <code>dexguard-release.pro</code> but will also allow name obfuscation and shrinking of asset files. dexguard-release-conservative.pro Like <code>dexguard-release.pro</code> but will also prevent any native methods from being obfuscated and native libraries from being modified."},{"location":"defaultconfigurations.html#library-projects","title":"Library projects","text":"<p>The following table lists all available default configurations for release type builds of library projects:</p> Configuration Description dexguard-library-release.pro Standard release configuration, will keep all public classes together with their public / protected fields / methods as well as all asset files. Additionally disables optimization <code>code/allocation/variable</code>. dexguard-library-release-aggressive.pro Like <code>dexguard-library-release.pro</code> but will obfuscate by default all classes and asset files. You need to make sure that you specify the public API of the library that has to be kept. dexguard-library-release-conservative.pro Like <code>dexguard-library-release.pro</code> but will also prevent any native methods from being obfuscated and native libraries from being modified."},{"location":"defaultconfigurations.html#additional-compatibility-configurations","title":"Additional compatibility configurations","text":"<p>Additional configuration files that can be included if needed, e.g. when uploading the application to a specific store or using certain libraries (androidx):</p> Configuration Description dexguard-compatibility-android-9.pro Uses a simplified <code>resourcefilenameobfuscationdictionary</code> to avoid problems with UTF-8 characters on devices with API level 9 (Android 2.3, Gingerbread). dexguard-compatibility-chinese-stores.pro Prevent obfuscation of certain elements in the <code>AndroidManifest.xml</code> to be able to upload to various stores. dexguard-compatibility-samsung-galaxy-tab-4.4.pro Uses a simplified <code>classobfuscationdictionary</code> to avoid problems with UTF-8 characters on Samsung Galaxy Tab devices. dexguard-compatibility-samsung-store.pro Prevent obfuscation of <code>package</code> and <code>versionName</code> in the <code>AndroidManifest.xml</code> to be able to upload to the Samsung store. dexguard-androidx.pro Adapted default rules for the use of the AndroidX repackaging of the Android support libraries. dexguard-alternative-classobfuscationdictionary.pro Specifies a different class obfuscation dictionary that avoids UTF-8 characters which might not be supported on some devices. dexguard-gson.pro Prevent obfuscation of Gson classes; required if Gson optimizations are disabled. dexguard-moshi.pro Prevent obfuscation of Moshi data classes, enables compatibility with reflection used by the Moshi library. dexguard-kotlin-serialization.pro Kotlinx.serialization provides rules for ProGuard. This default configuration file expands those keep rules for proper usage with DexGuard."},{"location":"introduction.html","title":"Introduction","text":"<p>DexGuard processes Android applications and libraries, making them smaller, more efficient, and better hardened against reverse engineering and tampering.</p>"},{"location":"introduction.html#an-overview","title":"An overview","text":"<p>The diagram below shows the high level architecture of a DexGuard-enabled build pipeline for mobile applications.</p> <p>DexGuard acts as an application or library post-processor. Effectively, this means that both the input and output are applications or libraries, which allows you to easily plug DexGuard into your existing release process.</p> <p>The workflow is described in the diagram, left to right:</p> <p></p> <p>First, you provide DexGuard with the following inputs:</p> <ul> <li>Your target application or library, generated by an existing build process.</li> <li>DexGuard configuration files.</li> </ul> <p>Typically, you use the DexGuard Gradle plugin for this, but other types of (CI) integration are also possible with DexGuard's standalone mode.</p> <p>DexGuard parses and models these inputs to an internal representation, on which it  performs numerous code transformation passes and applies advanced protections.</p> <p>Finally, a protected version of the input is rebuilt based on the modified internal model. It is signed and written out alongside several debug files which log the applied transformations and injections. A protection report which indicates the level of protection is also generated, and contains extra configuration advice.</p>"},{"location":"introduction.html#under-the-hood","title":"Under the hood","text":"<p>DexGuard processes the code and resources in several distinct but seamless processing steps. These steps can be categorized into some higher-level categories.</p> Compiledcode and resources Shrinking Optimization Obfuscation Protectedcode and resources <p>The shrinking step detects and removes unused parts of the input. The result is a smaller application with the same functionality.</p> <p>The optimization step analyzes and optimizes bytecode of all methods. This makes the application faster and a bit smaller.</p> <p>The obfuscation step performs all protection features as configured in the DexGuard configuration files. By default, this includes giving entities meaningless names and obfuscating the bytecode of selected methods. Finally, any configured advanced protection is also applied.</p>"},{"location":"introduction.html#dexguard-configuration","title":"DexGuard configuration","text":"<p>In general, configuration rules serve one of two purposes: stability or protection.</p>"},{"location":"introduction.html#stability-configuration","title":"Stability configuration","text":"<p>To guarantee stability of your application or library, a set of keep rules is required. Keep rules help prevent the removal of code that might be dynamically referenced or accessed at runtime, preventing potential issues with reflection or other dynamic mechanisms.</p> <p>While we provide the majority of vital keep rules in default configurations, each application or library will require additional, specific keep rules. The Quick Start page will guide you through the best way of collecting these keep rules: our <code>-addconfigurationdebugging</code> feature.</p>"},{"location":"introduction.html#protection-configuration","title":"Protection configuration","text":"<p>The second part of your configuration will indicate which protections you want to apply. The Protection Report will be your guide in discovering and configuring all of DexGuard's advanced protection features.</p>"},{"location":"introduction.html#lets-get-started","title":"Let's get started!","text":"<p>As an end user of DexGuard, your work boils down to setting up DexGuard and configuring the stability and protection level in the configuration file.</p> <ul> <li> <p> Next stop!</p> <p>Set up DexGuard and start configuring protection by following this comprehensive step-by-step guide.</p> <p> Quick Start guide</p> </li> <li> <p> Alternatively: Video tutorials</p> <p>We also have video tutorials if you would like to follow along as we guide you through the process.</p> <p> Video tutorials</p> </li> </ul>"},{"location":"migrationtoautorasp.html","title":"Migration to automatic RASP injection","text":"<p>If this migration guide does not cover one of your use cases, please reach out to us via support.</p> <p>We are deprecating the runtime library in favor of automatic RASP injection. Automatic RASP injection is more secure and relieves you from the burden of implementing calls to the runtime library and handling the results. With automatic RASP injection, you should be able to replace your existing implementation of the runtime calls as well as configure DexGuard to inject RASP checks at other security sensitive locations in the app automatically.</p> <p>Moving forward, there are two automatic RASP injection options to replace the DexGuard runtime library:</p> <ol> <li>(Recommended) Using <code>entrypoint</code> and Profile-guided obfuscation (PGO) based <code>spray</code> injection. You can profile your app for the PGO based <code>spray</code> injection using the guided configuration workflow.</li> <li>In case option 1 is not the most viable solution for your app, you can use <code>checkpoint</code> injections.</li> </ol> <p>This page provides guidance on how to migrate from using the DexGuard runtime library to automatic RASP injection.</p>"},{"location":"migrationtoautorasp.html#remove-dependency-on-the-dexguard-runtime-aar","title":"Remove dependency on the DexGuard runtime AAR","text":"<p>Automatic RASP does not require apps or SDKs to depend on the DexGuard runtime AAR. Therefore, the following can be removed from your build files.</p> Kotlin / Groovy - version catalogKotlin / Groovy - string notation <p>build.gradle(.kts)<pre><code>dependencies {\n    // Example: include the DexGuard runtime library.\n    implementation(libs.dexguard.runtime)\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"9.10.5\"\n\n[libraries]\ndexguard-runtime = { group = \"com.guardsquare\", name = \"dexguard-runtime\", version.ref = \"dexguard\" }\n</code></pre></p> build.gradle(.kts)<pre><code>dependencies {\n    // Example: include the DexGuard runtime library.\n    implementation('com.guardsquare:dexguard-runtime:9.10.5')\n}\n</code></pre>"},{"location":"migrationtoautorasp.html#replace-runtime-calls-with-checkpoints","title":"Replace runtime calls with checkpoints","text":"<p>Manual calls to the runtime library can be replaced by RASP checkpoints. The following is a generic form of the RASP checkpoint configuration option.</p> <p><pre><code>-raspchecks &lt;detector&gt; checkpoint class &lt;class-specification&gt;\n</code></pre> Here is an example of a runtime library call:</p> KotlinJava <pre><code>class HelloWorldActivity : Activity() {\n    companion object {\n        /**\n        * The method where a call to the runtime is made.\n        */\n        fun myMethod() {\n            Log.i(\"HelloWorldActivity\", \"This method calls the runtime.\")\n            val OK = 1\n            val returnValue = HookDetector.isApplicationHooked(OK)\n            if (OK != returnValue) {\n                // Reaction to a triggered check.\n            }\n        }\n    }\n}\n</code></pre> <pre><code>public class HelloWorldActivity extends Activity {\n    /**\n    * The method where a call to the runtime is made.\n    */\n    public void myMethod() {\n        Log.i(\"HelloWorldActivity\", \"This method calls the runtime.\");\n        int OK = 1;\n        int returnValue = HookDetector.isApplicationHooked(OK);\n        if (OK != returnValue) {\n            // Reaction to a triggered check.\n        }\n    }\n}\n</code></pre> <p>This can be replaced with the following configuration option:</p> <pre><code>-raspchecks hook checkpoint class HelloWorldActivity {\n    public void myMethod();\n}\n</code></pre> <p>By default, DexGuard may elect to inject the check into a method that always precedes the target method. To disable this behavior and ensure the check is always injected exactly in the specified method, you can use the <code>-disableraspdominator</code> configuration option.</p> <p>Use this only as a transition measure</p> <p>This approach closely resembles the use of the runtime library, but it does not give you all the security benefits of a complete RASP injection strategy. Because of this, we advise to use this only as a temporary transition towards fully utilizing auto injected RASP. A good next step would be to enable entrypoint injection. You can then look into identifying other sensitive methods and configuring them as checkpoints as well, or configure spray injection. When configuring spray injection, we suggest using Profile-Guided Obfuscation, which will minimize the performance impact of the injected RASP checks.</p>"},{"location":"migrationtoautorasp.html#passing-a-flag-to-a-rasp-check","title":"Passing a flag to a RASP check","text":"<p>If you are passing a flag in any of the runtime library calls, you can replace it with the following configuration option:</p> <pre><code>-raspflags &lt;detector&gt; &lt;flag-number&gt;\n</code></pre> <p>Here <code>&lt;detector&gt;</code> is the RASP check, e.g., <code>hook</code>, <code>root</code>, etc., and <code>&lt;flag-number&gt;</code> is the integer value of the flag from the runtime library. Please reach out to us via support if you are using a flag and you are not sure about its integer value. If you pass multiple flags to the same RASP check, then you need to provide the option only once with the values bitwise ORed together.</p>"},{"location":"migrationtoautorasp.html#passing-a-certificate-hash-value-to-the-certificatechecker","title":"Passing a certificate hash value to the CertificateChecker","text":"<p>In certain cases such as Google Play Store app signing, building app bundles or app resigning, a certificate hash needs to be provided to the CertificateChecker. In automatic RASP, the same can be achieved using the <code>-raspcertificatehash</code> configuration option.</p>"},{"location":"migrationtoautorasp.html#replace-manual-reaction-with-rasp-callbacks","title":"Replace manual reaction with RASP callbacks","text":"<p>Any reaction to a positive runtime check can be replaced with configuring a RASP callback and implementing the reaction, e.g., sending the event to Crashlytics, triggering a UI reaction, etc., inside the RASP callback.</p> <p>The following code snippet is a template of how a reaction to a triggered check is implemented.</p> KotlinJava <pre><code>val OK = 1\nval returnValue = HookDetector.isApplicationHooked(OK)\nif (OK != returnValue) {\n    // Reaction to a triggered check.\n}\n</code></pre> <pre><code>int OK = 1;\nint returnValue = HookDetector.isApplicationHooked(OK);\nif (OK != returnValue) {\n    // Reaction to a triggered check.\n}\n</code></pre> <p>This can be replaced by implementing and configuring a RASP callback.</p> KotlinJava <pre><code>class HelloWorldActivity : Activity() {\n    companion object {\n        /**\n        * This is the callback method which will be called when a RASP check is triggered.\n        *\n        * @param debugInfo A long value containing encoded threat information.\n        */\n        @JvmStatic\n        fun myRaspCallback(debugInfo: Long) {\n            // Reaction to a triggered check.\n        }\n    }\n}\n</code></pre> <pre><code>public class HelloWorldActivity extends Activity {\n    /**\n    * This is the callback method which will be called when a RASP check is triggered.\n    *\n    * @param debugInfo A long value containing encoded threat information.\n    */\n    public static void myRaspCallback(long debugInfo) {\n        // Reaction to a triggered check.\n    }\n}\n</code></pre> <p>The callback method needs to be configured in your DexGuard configuration.</p> <pre><code>-raspcallback hook class HelloWorldActivity {\n    public static void myRaspCallback(long);\n}\n</code></pre>"},{"location":"migrationtoautorasp.html#debug-info-about-triggered-rasp-checks","title":"Debug info about triggered RASP checks","text":"<p>In the runtime library checks, the OK value passed to a runtime API call and its return value helps in understanding the detection and investigating potential false positives. With automatic RASP, this can be achieved in two ways:</p> <ul> <li> <p>With ThreatCast: The threat event is reported to ThreatCast and displayed on the dashboard with proper explanation. Therefore, no additional information is required from the customer side.</p> </li> <li> <p>Without ThreatCast: If ThreatCast isn't configured, a callback must be configured to retrieve and share the <code>debugInfo</code> value. The <code>debugInfo</code> value is passed to the callback method.</p> </li> </ul>"},{"location":"migrationtoautorasp.html#crash-on-detection","title":"Crash on detection","text":"<p>It is highly discouraged to implement a custom crashing reaction to a positive RASP check. You can utilize DexGuard-initiated app terminations instead, which are inherently more secure and effective.</p>"},{"location":"overview.html","title":"Overview","text":"<p>DexGuard provides two options to apply protections. </p>"},{"location":"overview.html#guided-configuration","title":"Guided Configuration","text":"<p>For an easy start, use the Guardsquare platform guided configuration and protection workflow. </p> <p>This approach simplifies the initial DexGuard setup, automatically downloads the licenses and provides a guided configuration process.  Additionally, the Guardsquare platform provides visibility across your team of the builds, configurations and protection outcomes for improved collaboration.</p> <p>Getting started with guided configuration.</p>"},{"location":"overview.html#manual-configuration","title":"Manual Configuration","text":"<p>If your application is not yet eligible for the Guardsquare platform guided configuration, or you want a manual setup, use the manual configuration workflow.  </p> <p>Getting started with manual configuration.</p>"},{"location":"platform.html","title":"Guided Configuration","text":""},{"location":"platform.html#what-is-guided-configuration","title":"What is guided configuration","text":"<p>Guided configuration is a workflow that simplifies the initial DexGuard  setup, automatically downloads the licenses, and provides a visual interactive guided configuration process. In addition to that, the Guardsquare platform provides visibility across your team of the builds, configurations, and protection outcomes for improved collaboration.</p> <p>The central component of the guided configuration experience is a graphical  user interface hosted on the Guardsquare platform. </p> <p></p>"},{"location":"platform.html#getting-started","title":"Getting started","text":"<p>To get started with this option, follow the next steps.</p> <ol> <li> <p>Log in to Guardsquare. Navigate to  platform.guardsquare.com, and log in with  your Guardsquare credentials.</p> </li> <li> <p>Select the <code>My Applications</code> tab.</p> </li> <li> <p>Select your application and follow the guide on the web page.</p> </li> </ol>"},{"location":"platform.html#when-to-choose-guided-configuration","title":"When to choose guided configuration","text":"Situation Guided Configuration fit Use Manual Configuration instead Programming language or Technology Java, Kotlin, Flutter, React Native Hermes, React Native JSC, Cordova V10 and above C++, Gaming (Unity, Unreal Engine) and Other JavaScript-based hybrid Internet access Both developer workstations and CI servers can access the Internet to interact with the platform No Internet access Product type App SDK <p>If your product is not eligible for the guided configuration flow yet, please get started with the manual configuration.</p> <p>Note</p> <p>The rest of this manual is not applicable to the guided configuration option. Instead use the guidance provided on the platform web site. The Guardsquare platform will provide context help and tips, as well as suggest troubleshooting actions and when to file a technical support request.</p>"},{"location":"platform.html#questions-about-the-guided-configuration","title":"Questions about the guided configuration","text":"<p>You can open a support case to ask a question, report an issue, or provide feedback directly from the Guardsquare platform.</p> <p>Alternatively, please contact Guardsquare support.</p>"},{"location":"protection.html","title":"Code & Data Protection","text":"<p>In this section, we describe the different security mechanisms to harden your code against reverse engineering and tampering. The core idea is to apply different techniques to create multiple layers of obfuscation. Although no single technique is unbreakable, each layer further raises the bar for attackers. The different techniques protect the application code, but they also protect one another. We go over each of the techniques, explaining why they are useful, how you can apply them, and how you can verify their effects.</p> <p>Note that there is no predefined order in which to apply the different security mechanisms. A good guidance is the Protection Report which is locally generated with every DexGuard build. It will give you valuable insights in your current level of protection and which next features to consider. </p> <p>Use AppSweep to gain insight into the security of your application</p> <p>Consider using a Mobile Application Security Testing tool like Guardsquare's AppSweep to identify the sensitive data exposed in your application. </p> <p>DexGuard's static protection mechanisms can be grouped in the following categories:</p> <ul> <li>Code obfuscation: the protection mechanisms which will obfuscate your application's code, in order to make it much harder for adversaries to understand or reverse the business logic of your code.</li> <li>Data obfuscation: the protection mechanisms which will encrypt any sensitive data embedded in your app at rest, so that they cannot be discovered from static analysis.</li> </ul> <p>Deployment-type specific limitations</p> <p>Depending on whether you are building an application (.apk), app bundle (.aab), or a library (.aar), some of DexGuard's security mechanisms may not be available to use. Below table provides a high-level overview. Additional limitations on the usage of each mechanism may apply, and are described in each feature's impact section.</p> <p> Feature APK AAB AAR Code obfuscation Name obfuscation Yes Yes Yes Code obfuscation Yes Yes Yes Reflection Yes Yes Yes Class encryption Yes Yes Yes Code virtualization Yes Yes Yes Native library encryption Yes Yes Yes Metadata encryption Yes Yes No Data obfuscation String encryption Yes Yes Yes Asset encryption Yes Yes Yes Resource file encryption Yes No No Resource string encryption Yes Yes No <p></p> <p>Enable features sequentially</p> <p>As described in the Quickstart page, you should only enable the different security mechanisms one after the other and always validate the proper functioning of your application before moving to the next security mechanism. </p> <p>Specific technology guidance</p> <p>Below described protection mechanisms focus on Android apps written in Java or Kotlin. If you are using hybrid app development, see the specific technology guidance for:</p> <ul> <li>Flutter apps</li> <li>JavaScript apps</li> </ul>"},{"location":"protection.html#code-obfuscation","title":"Code obfuscation","text":""},{"location":"protection.html#name-obfuscation","title":"Name obfuscation","text":"<p>Discussion</p> <p>DexGuard obfuscates the names of identifiers in the applications that it processes. This means that it renames resource files, resources, classes, fields, and methods using meaningless names, where possible. This obfuscation step makes the code base smaller and harder to reverse-engineer.</p> <p>Impact table</p> <p> Aspect Impact Details Stability Yes Any code or third-party frameworks that rely on reflection may be confused by changing the names of classes, fields, methods, and even resources. If the code requires that they keep their original names, you should specify the proper <code>-keep</code> options and <code>-keepresourcefiles</code> options. DexGuard's default configuration helps by already providing tuned configuration for a number of common libraries and frameworks. Code Size No There is no negative impact on code size. Performance No This feature does not have any performance impact on your app. <p></p> <p>Configuration</p> <p>In release builds, DexGuard automatically applies name obfuscation, so the feature is enabled by default.  DexGuard's default configuration already takes care of common entry points like the Android manifest, with all depending activities, intentions, resources, etc.</p> <p>For further stability tuning, you will need to add keep rules to your configuration:</p> <ul> <li>Overview of Keep Options</li> <li>Keep Options for Code</li> <li>Keep Options for Resources</li> </ul> <p>As DexGuard is backward compatible with ProGuard, you can also reuse your ProGuard &amp; R8 keep rules.</p> <p>Tip</p> <p>For faster progress with the stability tuning, instrument your build by adding the <code>-addconfigurationdebugging</code> option to your DexGuard configuration.</p> <p>ProGuard Playground is a useful tool to help you further tweak the keep rules. </p> <p>In case you would want to disable name obfuscation for test purposes, use the <code>-dontobfuscate</code> option. </p> <p>Verification</p> <p>DexGuard will write the mapping of original names to obfuscated names to a file with the option <code>-printmapping</code>.</p> <p>Such a mapping file may look like this:</p> <pre><code>com.example.HelloWorldActivity -&gt; com.example.HelloWorldActivity:\n    39:42:void onCreate(android.os.Bundle) -&gt; onCreate\ncom.example.Util -&gt; o.\uff65:\n    byte[] values -&gt; \uff65\n    int doSomething(android.content.Context) -&gt; \uff65\n    java.lang.String compute(android.content.Context) -&gt; \u02ca\n</code></pre> <p>Note that names from the Android runtime are not obfuscated, since obfuscating them would break the application.</p> <p>You can also see the obfuscated names if you disassemble the code with a tool like dexdump (found in the <code>build-tools</code> in the Android SDK), or baksmali (free and open-source: code.google.com/p/smali/).</p> <p>In the debug version of the application, the names are still readable:</p> <pre><code>  Class descriptor  : 'Lcom/example/Util;\n  ...\n    #0              : (in Lcom/example/Util;)\n      name          : 'values'\n      ...\n</code></pre> <p>In the hardened release version of the application, the names are obfuscated:</p> <pre><code>  Class descriptor  : 'Lo/\uff65;'\n  ...\n    #0              : (in Lo/\uff65;)\n      name          : '\uff65'\n      ...\n</code></pre> <p>More information</p> <ul> <li>Working sample project: <code>samples/setup/HelloDexGuard</code></li> </ul>"},{"location":"protection.html#codeobfuscation","title":"Code obfuscation","text":"<p>Discussion</p> <p>Security mechanisms like name obfuscation make the code less intuitive for humans to interpret, but do not change the execution flow of the application. This allows an attacker to quite easily reconstruct source code by using a decompiler to further analyze or modify the application.</p> <p>In order to significantly raise the bar for adversaries using decompilers or disassemblers, you should consider enabling code obfuscation to security-sensitive parts of your application. By applying code obfuscation, both your control flow logic within methods as well as arithmetic operations will be transformed to functionally equivalent more complex ones.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No As the applied transformations occur within methods only, there is no impact on the stability of your application. Code Size Low-Medium Code transformation techniques have a significant impact on the size of the transformed methods, but the overall impact on your application's size will be limited. We recommend deliberate focus on security-sensitive methods. Also, the applied level of the transformation can be tweaked using strength modifiers. Performance Low-High Code transformation techniques will introduce a runtime performance overhead on each invocation of the transformed methods. In order to reduce the impact, do not apply this technique on performance-critical code. <p></p> <p>Limitations</p> <p>You can currently not apply code obfuscation to methods using synchronization blocks (however methods marked <code>synchronized</code> are fine).</p> <p>Configuration</p> <p>You can apply code obfuscation with the option <code>-obfuscatecode</code>. It allows to specify a strength modifier which controls how aggressive the methods will be obfuscated.</p> <pre><code># Apply with a low level of obfuscation to some secure methods.\n-obfuscatecode,low class com.example.secure.**\n\n# Apply with a high level of obfuscation to the most sensitive methods.\n-obfuscatecode,high class com.example.secure.MySecretActivity\n</code></pre> <p>Verification</p> <p>The generated Protection Report will show how many methods were obfuscated. Alternatively, by using the <code>-verbose</code> option, DexGuard prints out for how many methods it has obfuscated the code. </p> <p>Applying a decompiler to the debug version of your application will show java code that closely matches the original source code of the method.</p> <p>In the hardened release version of the application, decompilers will either completely fail to show corresponding source code, or display a highly obfuscated version which doesn't match the original execution flow anymore.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/CodeObfuscation</code></li> </ul>"},{"location":"protection.html#reflection","title":"Reflection","text":"<p>Discussion</p> <p>Name obfuscation can't change invocations of runtime classes, methods, and fields, since that would break the application's code. These invocations therefore remain conveniently readable in the disassembled or decompiled code. This provides attackers a lot of information about the structure and execution flow of the application. Especially for sensitive APIs, such as encryption and secure communication, you may want to make the code less readable by replacing the direct invocations by reflection.</p> <p>You can let DexGuard replace invocations by reflection and then encrypt the resulting strings. They then become difficult to find with static analysis.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No This feature does not impact the stability of your application. Code Size Low Size impact from this security mechanism will be very limited, but the optional additional decryption code for generated reflection strings impacts the size. Performance Low The performance impact of the added reflection will almost not be noticeable, but the optional string decryption will result in a significant one-time processing overhead. <p></p> <p>Limitations</p> <p>This feature will never be applied to <code>java.lang.Object</code> methods.</p> <p>Configuration</p> <p>You can apply reflection with the option <code>-accessthroughreflection</code>.</p> <pre><code># Apply reflection and additionally encrypt the strings that are generated for the reflection.\n-accessthroughreflection,encryptstrings class java.security.SecureRandom {\n    &lt;init&gt;();\n    int nextInt();\n}\n</code></pre> <p>Verification</p> <p>With the <code>-verbose</code> option, DexGuard prints out how much reflection it has added.</p> <p>In the debug version of the application, you will easily find the original method invocation with a disassembler. For instance:</p> <pre><code>... new-instance v0, Ljava/security/SecureRandom;\n... invoke-direct {v0}, Ljava/security/SecureRandom;.&lt;init&gt;:()V\n...\n... invoke-virtual {v0}, Ljava/security/SecureRandom;.nextInt:()I\n</code></pre> <p>In the hardened release version of the application, you can check that any invocations that you have specified are no longer visible.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/Reflection</code></li> </ul>"},{"location":"protection.html#classencryption","title":"Class encryption","text":"<p>Discussion</p> <p>Class encryption should be regarded as an additional layer of security for classes containing either methods with sensitive programming logic (e.g. user authentication flow, processing of payment transactions, communication with the server, ...), or using secured sensitive data (like encrypted strings or assets). Encrypting these classes will further secure them from static analysis. When applied, DexGuard will hide decryption code into your application which will automatically get invoked once the respective classes need to be loaded.   </p> <p>Impact table</p> <p> Aspect Impact Details Stability No Addition of decryption logic will not affect the stability of your application. Code Size Low Runtime decryption requires additional code. Applying broad allowlists will result in a noticeable size increase, but the overall impact on your app's size will be limited. Performance Low The additional execution of decryption code affects performance during the initial decryption only. <p></p> <p>Limitations</p> <p>It is not possible to encrypt classes that are explicitly preserved from obfuscation (with <code>-keep</code> rules in your configuration), extended by non-encrypted classes, or called by reflection (for instance because they are referenced from XML files). For such classes included into the configured allowlist, this feature will automatically not be applied.</p> <p>Configuration</p> <p>You can specify the classes that you want to encrypt with the option <code>-encryptclasses</code>.</p> <pre><code># The second name in the list matches all inner classes of `MySecretClass`,\n# since inner classes often also contain sensitive code.\n-encryptclasses com.example.MySecretClass,\n                com.example.MySecretClass$*\n</code></pre> <p>Verification</p> <p>The generated Protection Report will show how many classes were encrypted. Alternatively, by using the <code>-verbose</code> option, DexGuard prints out how many classes it has encrypted.</p> <p>DexGuard will write the list of classes it encrypted to a file with the option <code>-printclassencryption</code>.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/ClassEncryption</code></li> </ul>"},{"location":"protection.html#codevirtualization","title":"Code virtualization","text":"<p>Discussion</p> <p>There are cases where class encryption cannot be used due to technical constraints (e.g. Activities referenced by the Android Manifest) or when it is too heavy to efficiently use as a final protection layer. Code obfuscation goes a long way to protect sensitive code from being decompiled. However, some chunks of code are still readable and therefore vulnerable to both static and dynamic analysis.</p> <p>As a powerful final layer around method bodies, DexGuard can perform code virtualization. This technique injects an inlined virtual machine with a randomized instruction set into your application code and re-implements your methods with those instructions. Even though virtualized code can sometimes be decompiled successfully, the resulting method body bears no resemblance to your source code anymore.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No This feature does not impact the stability of your application. Code Size Low-Medium The inlined virtual machine will introduce a limited size overhead in your application. Performance Medium As virtualised code will lead to processing overhead, you should not virtualize performance-critical methods. <p></p> <p>Limitations</p> <p>Exceptions work fine with code virtualization, but line numbers in exception messages are not supported. When interpreting stacktraces passing through methods that have code virtualization applied, there are two possibilities. Either no numbers are displayed, or the device chooses to instead display the byte offset of the instruction that failed. In the latter case, the number will not correspond to any source code line number.</p> <p>It is currently not possible to virtualize initializers (constructors, static initializers) or methods that use explicit synchronization blocks. However, methods marked <code>synchronized</code> are supported.</p> <p>Configuration</p> <p>You can apply code virtualization with the option <code>-virtualizecode</code>. The code is first obfuscated with the <code>low</code> setting and then completely virtualized.</p> <pre><code># Virtualize a proprietary algorithm in a method of class `com.example.MyRecommender`.\n-virtualizecode class com.example.MyRecommender {\n    public java.lang.String[] recommendPopular();\n}\n</code></pre> <p>Verification</p> <p>With the <code>-verbose</code> option, DexGuard prints out for how many methods it has applied code virtualization.</p> <p>Applying a decompiler to the debug version of your application will show Java code that closely matches the original source code of the method.</p> <p>In the hardened release version of the application, decompilers will either completely fail to show the method's code, or display a code array followed by a partial interpreter in the form of a loop over a <code>switch</code>.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/CodeVirtualization</code></li> </ul>"},{"location":"protection.html#native-library-encryption","title":"Native library encryption","text":"<p>Discussion</p> <p>By default, DexGuard already obfuscates the names of JNI functions inside native libraries. You can explicitly specify to further encrypt sensitive native libraries. DexGuard then encrypts them and your application will decrypt them on the fly. The encryption prevents static analysis of the native code and tampering with the libraries.</p> <p>Tip</p> <p>Native library protection only protects your native libraries from static analysis. If you are looking for a comprehensive native code protection solution with more advanced obfuscation techniques and native RASP, consider DexGuard's NDK add-on.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No If correctly applied, this feature will not introduce any stability issues. See <code>Limitations</code>. Code Size Low Runtime decryption requires additional code, but the impact on the overall app size is very limited. Performance Low-Medium The one-time performance overhead for the additional execution of decryption code depends on the size of the native libraries. <p></p> <p>Limitations</p> <p>Make sure that the encrypted native library is loaded using <code>System.loadLibrary(String)</code> or <code>System.load(String)</code>, or as a dependency of another encrypted native library.</p> <p>Configuration</p> <p>You can specify the native library files that you want to encrypt with the option <code>-encryptnativelibraries</code>. For example:</p> <pre><code># Encrypt the libsecret.so native library.\n-encryptnativelibraries lib/*/libsecret.so\n</code></pre> <p>DexGuard native loader</p> <p>You can also add the <code>lib/dexguard-nativeloader.aar</code> as a dependency to your project to use a more secure way of loading your encrypted native libraries. The secure native loader allows the decryption of encrypted native libraries to take place in-memory, avoiding the need to write them to disk.</p> KotlinGroovy <pre><code> repositories {\n     flatDir { dirs(\"libs\") } // For the DexGuard native loader.\n }\n\n dependencies {\n     // By including the DexGuard native loader library DexGuard\n     // will use the native loader to load encrypted native libraries.\n     implementation(group = \"com.guardsquare\", name = \"dexguard-nativeloader\", ext = \"aar\")\n }\n</code></pre> <pre><code> repositories {\n     flatDir { dirs 'libs' } // For the DexGuard native loader.\n }\n\n dependencies {\n     // By including the DexGuard native loader library DexGuard\n     // will use the native loader to load encrypted native libraries.\n     implementation(name: 'dexguard-nativeloader', ext: 'aar')\n }\n</code></pre> <p>Warning</p> <p>If you include this dependency in an SDK, you force your users who also use DexGuard to use this approach for their encrypted native libraries as well.</p> <p>Verification</p> <p>With the <code>-verbose</code> option, DexGuard prints out how many native library files it has encrypted.</p> <p>If you unpack encrypted native library files from the hardened release version of the application, you'll see that they have the same lengths as the original files, but encrypted contents instead of the usual ELF format.</p> <p>DexGuard will write the list of native libraries it encrypted to a file with the option <code>-printnativelibraryencryption</code>.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/NativeLibraryEncryption</code></li> </ul>"},{"location":"protection.html#metadata-encryption","title":"Metadata encryption","text":"<p>Discussion</p> <p>By default, DexGuard only inlines metadata in the Android Manifest. You can explicitly specify to encrypt sensitive metadata. DexGuard then both inlines and encrypts them, and your application will decrypt them on the fly.</p> <p>Note that only String metadata are currently supported.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No If correctly applied, this feature will not introduce any stability issues. See <code>Limitations</code>. Code Size Low Runtime decryption requires additional code, but the impact on the overall app size is very limited. Performance Low The additional execution of decryption code affects performance at runtime. <p></p> <p>Limitations</p> <p>This feature is not usable for SDK projects.</p> <p>Only String metadata which are retrieved using <code>Bundle.getString(int)</code> with an integer constant (not a variable) are currently supported.</p> <p>Configuration</p> <p>You can specify the metadata that you want to encrypt with the option <code>-encryptmetadata</code>. For example, if your Android Manifest contains a meta-data element:</p> <pre><code>&lt;meta-data android:name=\"myKey\" android:value=\"sensitiveDataToBeEncrypted\" /&gt;\n</code></pre> <p>you can encrypt this metadata using:</p> <pre><code>-encryptmetadata myKey\n</code></pre> <p>Verification</p> <p>If you inspect the Android Manifest in the hardened release version of the application, you'll see that the metadata is no longer present.</p> <p>In the hardened application code, the metadata retrieval code will be replaced with a version that decrypts the metadata value.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/MetadataEncryption</code></li> </ul>"},{"location":"protection.html#removing-logging-code-and-stack-traces","title":"Removing logging code and stack traces","text":"<p>Discussion</p> <p>Logging code provides attackers information about the structure and execution flow of the application. From the perspective of thwarting reverse engineering, you should not leave logging code in released applications. If your logging code (or the logging code in your external libraries) does not depend on compile-time flags like <code>Build.DEBUG</code>, you can let DexGuard remove logging calls for you. It makes your code easier to maintain and debug, and automatically removes these entries for your protected builds.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No If applied correctly - see below snippet - there is no stability impact at all. Code Size No As logging calls will get removed, applying this feature has a positive impact on the size. Performance No Applying this feature will impact the performance of your application in a positive way. <p></p> <p>Configuration</p> <p>Apply below configuration snippet to automatically benefit from the feature.</p> <pre><code># Remove all standard Android logging invocations.\n-assumenosideeffects class android.util.Log {\n    public static boolean isLoggable(java.lang.String, int);\n    public static int v(...);\n    public static int i(...);\n    public static int w(...);\n    public static int d(...);\n    public static int e(...);\n    public static java.lang.String\n                    getStackTraceString(java.lang.Throwable);\n}\n\n# Remove all printing of stack traces.\n-assumenosideeffects class java.lang.Exception {\n    public void printStackTrace();\n}\n</code></pre> <p>Verification</p> <p>In the debug version of the application, you may find many logging invocations with a disassembler. For instance:</p> <pre><code>... invoke-static {v0, v1}, Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I\n</code></pre> <p>In the release version of the application, all of these invocations should be gone.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/LoggingRemoval</code></li> </ul>"},{"location":"protection.html#data-obfuscation","title":"Data Obfuscation","text":""},{"location":"protection.html#string-encryption","title":"String encryption","text":"<p>Discussion</p> <p>String constants in the source code are still readable in the compiled application, with a disassembler like dexdump or baksmali, or a decompiler for Dalvik bytecode. You should let DexGuard encrypt sensitive string constants, so they become invisible to static analysis. Keys, tokens, communication-related strings, and log messages are all good candidates for encryption. When applied, DexGuard will encrypt the specified strings during processing and will hide the decryption code inside your application.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No Addition of decryption logic will not affect the stability of your application. Code Size Medium Runtime decryption requires additional code. Applying broad allowlists will result in a significant size increase. Performance Low-Medium The additional execution of decryption code has a one-time impact on your app's performance. The overall impact also depends on when the encrypted strings are invoked. <p></p> <p>Limitations</p> <p>The current implementation does not support encrypting strings in static initializers in interfaces. Final string constants in interfaces are not a problem.</p> <p>Performance Tip</p> <p>Every encrypted string is decrypted on the fly at runtime, without implicit caching. If performance of encrypted strings is important in some parts of your code, you can define them as <code>private static String</code> fields, so they are only decrypted once, when the class is initialized. Don't declare them as <code>final</code> though, because the compiler will then inline them again.</p> <p>Configuration</p> <p>You can apply string encryption with the option <code>-encryptstrings</code>. It offers a number of ways to specify the strings to be encrypted. The most common ones:</p> <pre><code># The most straightforward way is to specify the strings literally.\n-encryptstrings \"Secret token\", \"Secret url\"\n\n# Apply to a specified string constant.\n-encryptstrings class com.example.MyConstants {\n    public static final java.lang.String SECRET_KEY;\n}\n\n# Apply to all string constants actually used in the specified class.\n-encryptstrings class com.example.MySecretClass\n\n# Apply to all string constants actually used in the specified method.\n-encryptstrings public class com.example.MySensitiveClass {\n    public void mySecretMethod();\n}\n</code></pre> <p>Be aware that the Java compiler already inlines final string constants wherever they are used in the code, which may be in other classes. They may have spread throughout the code before DexGuard processes it. With the above configuration, DexGuard encrypts these constants throughout the code, to provide the expected results.</p> <p>Note: When using companion objects in Kotlin, be aware that the Kotlin compiler stores any defined final string constants on the enclosing class and not on the generated <code>MySecretClass$Companion</code> class.</p> <pre><code>class MySecretClass {\n    companion object {\n        const val SECRET_KEY: String = \"...\"\n    }\n}\n</code></pre> <p>DexGuard can still encrypt these strings as follows:</p> <pre><code>-encryptstrings class com.example.MySecretClass {\n    java.lang.String SECRET_KEY;\n}\n</code></pre> <p>Verification</p> <p>The generated Protection Report will show how many strings were encrypted. Alternatively, by using the <code>-verbose</code> option, DexGuard prints out how many strings it has encrypted.</p> <p>DexGuard will write the list of strings it encrypted, grouped per class, to a file with the <code>-printstringencryption</code> option.</p> <p>In the debug version of the application, you'll easily find the original strings with a disassembler. For instance:</p> <pre><code>... const-string v0, \"Hello world!\"\n</code></pre> <p>In the release version of the application, encrypted strings should no longer be visible.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/StringEncryption</code></li> </ul>"},{"location":"protection.html#asset-encryption","title":"Asset encryption","text":"<p>Discussion</p> <p>By default, DexGuard leaves asset files untouched. You can explicitly specify to encrypt sensitive asset files. DexGuard then encrypts them and your application will decrypt them on the fly.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No Addition of decryption logic will not affect the stability of your application. Code Size Low Runtime decryption requires additional code, but the overall impact on app size is limited. Performance Low-Medium The additional one-time execution of decryption code affects performance, and depends on the size of the protected assets. <p></p> <p>Limitations</p> <p>DexGuard only encrypts asset files that are read with an <code>AssetManager.open(String)</code> call, with a literal string as argument.</p> <p>For app bundles, it is not possible to encrypt non-install time asset packs.</p> <p>Warning</p> <p><code>InputStream.available()</code> does not guarantee to provide the amount of bytes that are present in the entire <code>InputStream</code>. Relying on <code>InputStream.available()</code> to give the total number of bytes in that <code>InputStream</code> does not correspond to the specification of the <code>available</code> method. Please refer to the official documentation for this method for further detail.</p> <p>Even if this seems to be working on the unprotected application, it might not work when the asset is encrypted. A more robust implementation can be found in the <code>AssetEncryption</code> sample.</p> <p>Configuration</p> <p>You can specify the asset files that you want to encrypt with the option <code>-encryptassetfiles</code>. For example:</p> <pre><code>-encryptassetfiles assets/secret.txt\n</code></pre> <p>Verification</p> <p>The generated Protection Report will show how many asset files were encrypted. Alternatively, by using the <code>-verbose</code> option, DexGuard prints out how many asset files it has encrypted.</p> <p>DexGuard will write the list of assets it encrypted, grouped per class, to a file with the <code>-printassetencryption</code> option.</p> <p>If you unpack encrypted asset files from the hardened release version of the application, you will see that they have the same lengths as the original files, but encrypted contents.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/AssetEncryption</code></li> </ul>"},{"location":"protection.html#resource-file-encryption","title":"Resource file encryption","text":"<p>Discussion</p> <p>By default, DexGuard leaves resource files untouched. You can explicitly specify to encrypt sensitive resource files. DexGuard then encrypts them and your application will decrypt them on the fly.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No If properly applied (see <code>Limitations</code>), this feature will not affect the stability of your application. Code Size Low Runtime decryption requires additional code, but the overall impact on app size is limited. Performance Low-Medium The additional one-time execution of decryption code affects performance, and depends on the size of the protected resource files. <p></p> <p>Limitations</p> <p>This feature is only applicable to APKs; resource file encryption in app bundles and SDKs is not supported.</p> <p>App widgets can't decrypt resources. Don't encrypt resource files that are accessed by app widgets or retrieved via <code>android.content.pm.PackageManager</code>.</p> <p>Configuration</p> <p>You can specify the resource files that you want to encrypt with the option <code>-encryptresourcefiles</code>. DexGuard can encrypt resources in <code>res/layout</code>, <code>res/menu</code>, and <code>res/xml</code>. </p> <pre><code>-encryptresourcefiles res/layout*/secret.xml\n</code></pre> <p>Verification</p> <p>The generated Protection Report will show how many resource files were encrypted. Alternatively, by using the <code>-verbose</code> option, DexGuard prints out how many resource files it has encrypted.</p> <p>DexGuard will write the list of resources it encrypted to a file with the option <code>-printresourceencryption</code>.</p> <p>If you unpack encrypted resource files from the hardened release version of the application, you will see that they can no longer be viewed with an Android binary XML viewer like <code>aapt</code>.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/ResourceEncryption</code></li> </ul>"},{"location":"protection.html#resource-string-encryption","title":"Resource string encryption","text":"<p>Discussion</p> <p>By default, DexGuard only inlines resource strings. You can explicitly specify to encrypt sensitive resource strings. DexGuard then encrypts them and your application will decrypt them on the fly.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No Addition of decryption logic will not affect the stability of your application. Code Size Low Runtime decryption requires additional code, but the overall impact is limited. Performance Low The additional one-time execution of decryption code affects performance. <p></p> <p>Limitations</p> <p>This feature is only applicable to applications (APKs and app bundles), resource string encryption in SDKs is not supported.</p> <p>Currently only string resources are supported. Resource strings referenced from other XML files can't be encrypted.</p> <p>Configuration</p> <p>You can specify the resource strings that you want to encrypt with the option <code>-encryptresources</code>. The filter is applied to strings of the form \"type/name\".</p> <pre><code># To encrypt the resource string with resource name `apiKey`.\n-encryptresources string/apiKey\n</code></pre> <p>Verification</p> <p>The generated Protection Report will show how many resource strings were encrypted. Alternatively, by using the <code>-verbose</code> option, DexGuard prints out how many resource strings it has encrypted.</p> <p>DexGuard will write the list of resources it encrypted to a file with the option <code>-printresourceencryption</code>.</p> <p>If you read resource strings from the hardened release version of the application using a tool like <code>aapt</code>, you will see that they will be encrypted.</p> <p>More information</p> <ul> <li>Working sample project: <code>samples/features/ResourceEncryption</code></li> </ul>"},{"location":"quickstart.html","title":"Manual Configuration","text":""},{"location":"quickstart.html#prepare_development_environment","title":"Prepare your development environment","text":"<p>DexGuard is available through Maven. If you plan to integrate DexGuard in your Gradle build process with Maven, please follow the instructions on the Maven configuration page and skip forward to the DexGuard configuration step.</p> <p>If you want to manage your DexGuard installation locally, make sure you have the right tools and components in place.</p> <ol> <li>Log in to the Guardsquare website.</li> <li>Download the DexGuard software and your license file <code>dexguard-license.txt</code> and install them on your local system.</li> </ol> Not using Gradle? <p>If you don't want to integrate DexGuard in your Gradle build, or you are not using Gradle at all, you can run DexGuard directly from the command line. Detailed instructions can be found in the standalone mode page. Please follow these instructions and skip forward to the automated configuration step.</p> <p>If you are using hybrid app development, see also the technology guidance for</p> <ul> <li>Flutter apps</li> <li>JavaScript hybrid apps</li> </ul>"},{"location":"quickstart.html#plugin-setup","title":"Setting up the Gradle plugin","text":"<p>The DexGuard Gradle plugin is available in the <code>lib</code> folder of your DexGuard distribution. It can easily be added to your project by making the changes highlighted in the code snippet below.</p> Kotlin - Plugins DSLKotlin - BuildscriptGroovy - Plugins DSLGroovy - Buildscript <p>settings.gradle.kts<pre><code>pluginManagement {\n    repositories {\n        maven { url=uri(\"/path/to/DexGuard/lib\") }\n    }\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"+\"\n\n[plugins]\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> build.gradle.kts<pre><code>buildscript {\n    repositories {\n        maven { url=uri(\"/path/to/DexGuard/lib\") }\n    }\n    dependencies {\n        classpath(\"com.guardsquare:dexguard-gradle-plugin:+\")\n    }\n}\n</code></pre> <p>settings.gradle<pre><code>pluginManagement {\n    repositories {\n        maven { url '/path/to/DexGuard-x.y.z/lib' }\n    }\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"+\"\n\n[plugins]\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> build.gradle<pre><code>buildscript {\n  repositories {\n    maven {\n        url '/path/to/DexGuard/lib'\n    }\n  }\n  dependencies {\n    classpath 'com.guardsquare:dexguard-gradle-plugin:+'\n  }\n}\n</code></pre> Avoid modifying your DexGuard installation <p>In case you need to copy the DexGuard plugin to a different location, make sure to copy the whole directory structure located in <code>/path/to/DexGuard/lib</code>.</p>"},{"location":"quickstart.html#dexguard-gradle-block","title":"Configuring the DexGuard Gradle plugin","text":"<p>Now that the DexGuard plugin is added to your project, you can apply and configure DexGuard using a <code>dexguard</code> configuration block. This is a top-level configuration block and should be placed outside the <code>android</code> block.</p> <p>The snippets below show the minimum configuration required to execute DexGuard automatically for the <code>release</code> variant of an application.</p> KotlinGroovy - Plugins DSLGroovy - Buildscript <p>app/build.gradle.kts<pre><code>plugins { \n    alias(libs.plugins.dexguard)\n}\n\ndexguard {\n    path = \"/path/to/DexGuard\"\n    license = \"/path/to/dexguard-license.txt\"\n    configurations {\n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n        }                               \n    }\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"+\"\n\n[plugins]\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> <p>app/build.gradle<pre><code>plugins {\n    alias(libs.plugins.dexguard)\n}\n\ndexguard {\n  path = '/path/to/DexGuard'\n  license = '/path/to/dexguard-license.txt'\n  configurations {\n    release {\n      defaultConfiguration 'dexguard-release.pro'\n    }\n  }\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"+\"\n\n[plugins]\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> app/build.gradle<pre><code>apply plugin: 'com.guardsquare.dexguard'\n\ndexguard {\n  path = '/path/to/DexGuard'\n  license = '/path/to/dexguard-license.txt'\n  configurations {\n    release {\n      defaultConfiguration 'dexguard-release.pro'\n    }\n  }\n}\n</code></pre> <p>The <code>path</code> option specifies where to find your DexGuard installation. If you are using the maven distribution, this option is not required.</p> <p>The <code>license</code> option indicates where your license file can be found.</p> <p>In the <code>configurations</code> block, you should specify which build variants you want DexGuard to protect. In the example snippets, the <code>release</code> variant is configured.</p> <p>The default configuration <code>defaultConfiguration</code> contains pre-defined, required configuration options.</p> Disable ProGuard &amp; R8! <p>DexGuard expects its inputs to be unobfuscated! Make sure the variants you want to protect have the <code>minifyEnabled</code> and <code>shrinkResources</code> options set to <code>false</code> in the <code>android</code> Gradle block. <pre><code>android {\n    buildTypes {\n        release {\n            minifyEnabled false\n            shrinkResources false\n        }\n    }\n}\n</code></pre></p> <p>At this point, DexGuard is completely integrated in your build process and will be executed when you build your application. Please verify your setup by building your application  (<code>./gradlew bundle</code> for a bundle or <code>./gradlew assemble</code> for an apk).</p> <p>If everything was set up correctly, a protected version of your application was created alongside the unprotected version with a <code>-protected</code> suffix.</p> Unable to build your application? <p>To verify that your environment is set up correctly, try and build one of the samples included in the DexGuard distribution. Compare the setup of the samples to your own.</p> <p>The <code>build/outputs/dexguard</code> directory contains several other outputs. Most notably, a Protection Report can be found under <code>build/outputs/dexguard/report</code>. This report indicates the level of protection of your application and will be your main guideline when configuring additional protections later.</p> <p>The Gradle plugin will automatically configure DexGuard to sign the protected app using the same key that was used to sign the original app.  So you don't have to explicitly configure DexGuard to sign the processed app.</p> Default Android Studio <code>install</code> task <p>The Android Gradle Plugin <code>install</code> task will install the unprotected application. If you want to test the protected application instead, you can use <code>adb</code> to install the protected application from the command line. E.g. <code>adb install build/outputs/apk/release/MyApp-release-protected.apk</code>.</p> <p>Alternatively, consider using the ** <code>overwriteUnprotected</code> ** option to overwrite the unprotected version. The protected apk will then no longer have the -protected suffix, and will be recognized by the <code>install</code> task. This may cause unexpected Gradle caching results!</p>"},{"location":"quickstart.html#automated-configuration-phase","title":"Automated configuration phase","text":"<p>At this point, you have completed your first successful protected build, congratulations! Go ahead and try running it on an emulator or test device.</p> <p>Did your protected application crash? Do not worry, this is expected!</p> <p>You are likely facing runtime crashes due to reflection in your application. Reflection uses strings to find entities directly, but since DexGuard has obfuscated the names of these entities, the reflection calls in your application are not able to find the referred entities, and are throwing various forms of exceptions that indicate some entity could not be found.</p> <p>To solve this issue, all entities that are accessed by reflection should be targeted by keep rules. These keep rules preserve reflective accesses by keeping the names of the entities.</p> <p>Reusing your existing ProGuard &amp; R8 configurations</p> <p>DexGuard is backward compatible with ProGuard and R8. As such you can reuse your ProGuard configuration files. However, inclusion of a <code>proguard-project.txt</code> configuration is not mandatory.</p> <p>Manually figuring out the required set of keep rules can only be done one keep rule at a time:</p> <ol> <li>Build, launch and explore the application until it crashes,</li> <li>Check which entity was reflected and caused the crash,</li> <li>Add a keep rule for that entity,</li> <li>Rebuild the application and repeat the process.</li> </ol> <p>This is a very time-consuming effort.  Instead, DexGuard can build an instrumented version of your application that automatically collects the required keep rules and does not crash at runtime. This feature enables you to collect all keep rules using a single build, rather than having to repeat the process for each keep rule!</p> <p>Additionally, this instrumented build gathers performance data which DexGuard leverages during the protection run to ensure acceptable performance impact when injecting  Runtime Application Self Protections (referred to as RASP). This will become relevant when setting up advanced protections later.</p> <p>To build the instrumented version, simply follow the next steps:</p> <ol> <li>Add a <code>dexguard-project.txt</code> file to your project.</li> <li>Add the <code>-addconfigurationdebugging</code>    and <code>-addprofiling</code> configuration options to the configuration.     dexguard-project.txt<pre><code>-addconfigurationdebugging\n-addprofiling\n</code></pre></li> <li> <p>Include the configuration when running DexGuard.</p> GradleStandalone DexGuard plugin block<pre><code>dexguard {\n  path = '/path/to/DexGuard'\n  license = '/path/to/dexguard-license.txt'\n  configurations {\n    release {\n      defaultConfiguration 'dexguard-release.pro'\n      configuration '/path/to/dexguard-project.txt'\n    }\n  }\n}\n</code></pre> <pre><code>bin/dexguard.sh -injars path/to/my-application.apk \\\n                -outjars path/to/obfuscated-application.apk \\\n                -androidsdk path/to/android/sdk \\\n                -include /lib/dexguard-release.pro \\ \n                -include path/to/dexguard-project.txt \\\n                -keystore path/to/keystore \\\n                -keyalias your_key_alias \\\n                -keypassword your_key_password \\\n                -keystorepassword your_keystore_password\n</code></pre> </li> </ol> <p>Why your instrumented application looks different</p> <ul> <li>This configuration only performs name obfuscation. Advanced protection features are disabled.</li> <li>Your application is prevented from being released on the Google Play Store.</li> <li>The icon of your application will be changed to the DexGuard icon to indicate an instrumented build.</li> <li>Once you have your debug configuration, you should discard this build and remove the options from your configuration.</li> </ul> <p>Once your instrumented application is built, run it on a device and extensively explore your application. In the <code>logcat</code>, your application will now print keep rule recommendations whenever a reflection call is encountered. Additionally, these keep rules and some performance metrics are collected to files on the device. Instructions for retrieving these files can be found in <code>logcat</code> and will have the following formats:</p> <pre><code>Writing rule suggestions to &lt;path&gt;: use `adb pull &lt;path&gt;` to retrieve the file from the device.\nWriting profiling data to device storage. Use `adb pull &lt;path&gt;` to retrieve the file.\n</code></pre> <p>After running the suggested <code>adb pull</code> commands in your project directory, you will have:</p> <ul> <li>a <code>dexguard-debugging-rules.txt</code> file to prevent runtime crashes due to reflection.</li> <li>a <code>profilingdata.pb</code> file to manage performance impact when injecting RASP.</li> </ul> <p>Explore extensively!</p> <p>It is important that you explore your instrumented application thoroughly. Unexplored code paths will not be covered by the generated configuration and may remain unstable!</p> <p>To conclude the automated configuration phase:</p> <ol> <li>Remove the instrumentation options from your <code>dexguard-project.txt</code> file.</li> <li> <p>Include the generated <code>dexguard-debugging-rules.txt</code> configuration.</p> GradleStandalone DexGuard plugin block<pre><code>dexguard {\n  path = '/path/to/DexGuard'\n  license = '/path/to/dexguard-license.txt'\n  configurations {\n    release {\n      defaultConfiguration 'dexguard-release.pro'\n      configuration '/path/to/dexguard-debugging-rules.txt'\n      configuration '/path/to/dexguard-project.txt'\n    }\n  }\n}\n</code></pre> <pre><code>bin/dexguard.sh -injars path/to/my-application.apk \\\n                -outjars path/to/obfuscated-application.apk \\\n                -androidsdk path/to/android/sdk \\\n                -include /lib/dexguard-release.pro \\ \n                -include path/to/dexguard-debugging-rules.txt \\\n                -include path/to/dexguard-project.txt \\\n                -keystore path/to/keystore \\\n                -keyalias your_key_alias \\\n                -keypassword your_key_password \\\n                -keystorepassword your_keystore_password\n</code></pre> </li> </ol> <p>That concludes the basic configuration phase! You should now be able to build a minimally protected version of your application that doesn't crash at runtime. If your application still crashes, perhaps the  troubleshooting page can offer  a solution.</p>"},{"location":"quickstart.html#improve-your-protection","title":"Improve your protection","text":"<p>Now that you have your first stable protected build, it is time to improve the security of your application.</p> <p>An invaluable resource to do that is the Protection Report we mentioned earlier. If you have integrated DexGuard in your Gradle process, the report is located at <code>build/outputs/dexguard/report</code>. Users of standalone mode first have to specify the location where the report can be generated.</p> <pre><code>bin/dexguard.sh -injars path/to/my-application.apk \\\n                -outjars path/to/obfuscated-application.apk \\\n                -androidsdk path/to/android/sdk \\\n                -include /lib/dexguard-release.pro \\ \n                -include path/to/dexguard-debugging-rules.txt \\\n                -include path/to/dexguard-project.txt \\\n                -protectionreportdirectory /path/to/report-directory \\\n                -keystore path/to/keystore \\\n                -keyalias your_key_alias \\\n                -keypassword your_key_password \\\n                -keystorepassword your_keystore_password\n</code></pre> <p>Depending on the threat model for your application, prioritize your work on different protection techniques and improve your score in relevant risk categories.</p> <p>We recommend the following iterative approach when enabling advanced protection features.</p> <ol> <li>Identify your most relevant security metric(s) in the Protection Report,    and discover which of DexGuard's features contribute to it.</li> <li>Click on a disabled feature to get redirected to the relevant section in the manual.</li> <li>Configure the feature in your <code>dexguard-project.txt</code> file by following the manual.</li> <li>Rebuild your application.</li> <li>Test the application for stability and performance.</li> <li>Tune the configuration to fix any issues prior to enabling the next protection feature.</li> <li>Repeat the previous step for the next feature.</li> </ol> <p>Layered protection</p> <p>The different protection features reinforce each other. This is why setting up all the protection layers is important. We recommend scoring grade A in every category in the Protection Report.</p>"},{"location":"quickstart.html#monitor-your-application","title":"Monitor your application","text":"<p>We recommend the iterative approach because it gives you an indication of the impact a particular feature has on your application. This way, when things go wrong, you know exactly what feature caused the issue, and you can reconfigure it accordingly.</p> <p>Below, we'll touch on the most common issues you may encounter when configuring advanced protections.</p>"},{"location":"quickstart.html#poor-app-performance","title":"Poor app performance","text":"<p>The most common issue you may encounter at this stage is app performance problems. This is expected and can often be easily addressed.</p> <p>The most common reason for decreased app performance is that you have enabled a feature with a high performance impact on a performance-sensitive class or method.</p> <p>Most notably, while our RASP checks are very powerful, some are very expensive (e.g. the hook detector). This is where the <code>profilingdata.pb</code> file, generated by the instrumentation build, will help. Add the <code>-profilingdata /path/to/profilingdata.pb</code> option to your configuration as an initial indication of performance-sensitive code for DexGuard. If you notice performance is still poor, you can exclude specific performance-sensitive areas of your code from being injected into by using the <code>-raspdenylist</code> option.</p> <p>You can find an impact table for each feature on the protection overview page. Limit the use of features with medium to high performance impact to the security-sensitive parts of your code.</p>"},{"location":"quickstart.html#application-size-increase","title":"Application size increase","text":"<p>You may find that the size of your application has increased too much.  Double check that you haven't been too aggressive with the applied level of hardening of the feature you are currently tuning. </p> <ul> <li>All encryption features require DexGuard to inject decryption code into your application,   so they will have a direct impact on your app's size.    You might consider narrowing down the allowlist for which you enabled such features.   Encrypting all strings or classes is overkill; focus on the most security-sensitive ones instead. </li> <li>DexGuard's RASP features inject code snippets with small checks into your application.    You can reduce the amount of injected checks by reducing the aggressiveness level. </li> <li>Code obfuscation has an option to tweak the aggressiveness level.    Find a balance in setting it higher for security-sensitive methods, lower for other methods.</li> </ul>"},{"location":"quickstart.html#testing","title":"Testing","text":"<p>It is important to test your application but there are certain limitations to be aware of when testing applications protected by DexGuard.</p> <p>Unit testing is not possible because</p> <ul> <li>DexGuard changes the internals of your application.</li> <li>DexGuards features rely on the Android environment and this cannot easily be mocked.</li> </ul> <p>Integration testing is only possible with end-to-end tests because checking internal application state is not possible.</p> Supported integration testing frameworks <ul> <li>Espresso</li> <li>Appium<ul> <li>UI elements can be selected using the UI tree.</li> <li>Element IDs can be used only if kept by adding additional keep rules to your configuration.</li> </ul> </li> </ul>"},{"location":"quickstart.html#before-you-go-live","title":"Before you go live","text":"<p>Once your protection configuration is complete and everything is working properly, it\u2019s time to plan your go-live. Consider the following best practices in your go-live strategy:</p>"},{"location":"quickstart.html#release-only-well-protected-versions","title":"Release only well-protected versions","text":"<p>If you have implemented protection only partially, we strongly recommend you not to release such a version into production.</p> <p>The reason for this is that partially protected versions will teach reverse engineers the methods that you are using by introducing protection gradually, when it can be digested more easily.</p> <p>Having all protections implemented at once significantly raises the bar for the attackers.</p> <p>Regularly adopt new versions of DexGuard!</p> <p>Due to DexGuard's polymorphic approach, every new release of your app will be hardened differently. As such, sunsetting older versions of your app at a regular cadence is always a good practice,  as it will force adversaries to restart their efforts again from scratch. Additionally, our RASP checks are under constant development. To stay up to speed with the attack surface, it is important that you update DexGuard and rebuild your protected application regularly.</p>"},{"location":"quickstart.html#check-your-crash-reporting","title":"Check your crash reporting","text":"<p>Your application is now protected, and one of the most important protection techniques used in DexGuard is name obfuscation. This means that the names of classes and class members will be changed, which makes it difficult for reverse engineers, but it can also make it difficult for you to diagnose crashes.</p> <p>Guardsquare tools enable you to de-obfuscate crash stack traces automatically or semi-automatically. However, you need to verify that everything is configured correctly before you go live by simulating a crash and making sure you are able to get the de-obfuscated trace.</p>"},{"location":"quickstart.html#consider-threat-reporting","title":"Consider threat reporting","text":"<p>If you have configured RASP features, Guardsquare will detect various tools and techniques used to tamper with your application or use it in a compromised environment. By default, this information stays local  within the app, however you may want to benefit from centralizing this information and using it in your fraud monitoring process.</p> <p>Enabling Guardsquare's mobile threat monitoring solution ThreatCast is very straightforward and will bring a lot of visibility and useful insights into the attack vectors your application is suffering from after it has been released into the wild.</p>"},{"location":"quickstart.html#plan-deprecation-of-your-unprotected-application","title":"Plan deprecation of your unprotected application","text":"<p>If you have an unprotected version of your application in production, it can still be attacked.  Plan an approach to phase it out so that only the properly protected version of the app is out there. </p> <p>We will always be happy to help you on all stages of your journey - from early onboarding to post-going-live. Do not hesitate to reach out to us if you have any questions or suggestions for our team.</p>"},{"location":"rasp.html","title":"Runtime Application Self-Protection","text":""},{"location":"rasp.html#what-is-rasp","title":"What is RASP?","text":"<p>Runtime Application Self-Protection (RASP) enables applications and libraries to defend themselves against analysis and attacks at runtime. DexGuard's various RASP checks monitor, at runtime, the integrity of the application or library and its execution environment.</p> <p>DexGuard's legacy RASP implementation relied on the user manually adding calls to the DexGuard runtime library in their application. This page covers how DexGuard offloads this burden from the user by automatically injecting these calls, while at the same time providing numerous other benefits:</p> <ul> <li>Security: The locations of the RASP checks are automatically randomized across builds.</li> <li>Monitoring: Detected threats can be monitored on Guardsquare's ThreatCast dashboard.</li> <li>Strategies: Multiple injection strategies allow you to fine-tune your RASP protection.</li> <li>Maintenance: You are no longer required to manually add code in your project.</li> <li>Updates: Automatic RASP routinely benefits from performance and security related updates.</li> </ul> <p>The DexGuard runtime library is planned for deprecation. Please replace usages of the DexGuard runtime library with automatic RASP checks.</p> <p>For a quick start with the migration, please refer the automatic RASP migration guide.</p> <p>If your project performs some action when you detect a threat, you can still configure one or more callbacks to perform the same action for the automatic checks.</p> <p>If you rely on controlling the locations of the checks, automatic RASP offers the same control with the checkpoint injection strategy.</p> <p>RASP will only be enabled if obfuscation is also enabled</p> <p>Enabling RASP will only have an effect if obfuscation is enabled for your application or library. Concretely, RASP will only be enabled if your DexGuard configuration does not contain <code>-dontobfuscate</code>. Notably, the <code>dexguard-debug.pro</code> and <code>dexguard-library-debug.pro</code> default configurations disable obfuscation. Any builds (most likely debug builds) that use either of those default configurations will not be protected with RASP.</p>"},{"location":"rasp.html#available-rasp-checks","title":"Which RASP checks are available?","text":"<p>The table below shows an overview of the RASP checks DexGuard provides.</p> Detector Description Configuration name Root Checks if your application is running on a rooted device. root Hook Checks for the presence of hooking frameworks, and safeguards user code from function hooks. hook Debug Checks if your application can be debugged or is being debugged. debug Memory scanning Detects if the application's memory has been scanned by a memory scanner. memoryscanning Emulator Checks if your application is running on an emulator. emulator Virtual environment Checks if your application is running inside a virtual environment. virtualenvironment Tamper Detects static tampering on your app. apptamper Certificate checker Checks whether the app is still signed with trusted certificates. certificatetamper Hardware Checks the integrity of the device. For more information, see the OS Integrity page. hardware <p>Check out the Addressing RASP check limitations section!</p> <p>Depending on your project type, some of these detectors require additional configuration. Without it, false positives could occur.</p> <p>Make sure to read the Addressing RASP check limitations section to understand and address these limitations.</p>"},{"location":"rasp.html#how-is-rasp-injected","title":"How is RASP injected?","text":"<p>DexGuard offers 3 complementary approaches to control injection locations:</p> Strategy Details Recommended use case Entrypoint Checks will run when the application starts or when a public method of the SDK is called for the first time. This approach is advised if you need to guarantee the integrity from startup. Checkpoint Checks will run before the specified methods are executed. This approach is advised for security-sensitive methods such as user authentication or transaction methods. Spray Checks will be sprayed across all available code. This approach ensures different injection locations for every build as an additional measure against scalable attacks. <p>For optimal security it is recommended to combine these strategies. The next section contains instructions on enabling and configuring RASP checks in your project.</p>"},{"location":"rasp.html#enabling-rasp-checks","title":"Enabling RASP checks","text":"<p>Your application or library will start crashing on compromised devices</p> <p>Most RASP checks will crash your protected application or library by default if they trigger. These intended crashes will start happening once you enable RASP checks. Please see the crashing on detection section for more detail.</p> <p>Enabling RASP checks is done with the <code>-raspchecks &lt;detector...&gt; [injection_strategy]</code> option. The option allows to specify which detectors to enable, and which injection strategy to apply.</p> <p>The examples below illustrate how you can use the <code>-raspchecks</code> option and highlight some of its nuances.</p> Configuring spray &amp; entrypoint injectionConfiguring checkpoint injection Enabling specific detectors while disabling others<pre><code># If you do not specify a strategy, spray and entrypoint will be used by default:\n# Enable spray and entrypoint injection for the emulator and apptamper checks.\n-raspchecks emulator,apptamper\n\n# This configuration is explicit, but has exactly the same effect.\n# -raspchecks emulator,apptamper spray\n# -raspchecks emulator,apptamper entrypoint\n</code></pre> Disabling specific detectors while enabling others<pre><code># Enable spray and entrypoint injection for all detectors except for the emulator detector.\n-raspchecks !emulator\n</code></pre> Enabling all detectors using a wildcard<pre><code># Enable spray and entrypoint injection for all detectors.\n-raspchecks *\n</code></pre> <p>Checkpoint injection configuration is similar to the configuration for entrypoint and spray injection, but additionally requires a method specification for the target methods. Note that descriptive names for checkpoint methods that are not obfuscated are not allowed since they can lead to a checkpoint being easily located and then bypassed.</p> <p>Similarly, selecting only a single method as a checkpoint for each detector, while not also using entrypoint and/or spray injection strategies, makes the RASP check easier to find and bypass by malicious actors. Especially if the selected checkpoint doesn't have any side-effects of its own. While we don't disallow this practice, we strongly discourage it as it weakens the resilience of your application.</p> Configuring a checkpoint location for a specific detector<pre><code># Guarantees execution of root and hook detectors just before\n# com.example.Class.sensitiveAction is executed.\n-raspchecks root,hook checkpoint class com.example.Class {\n  void sensitiveAction();\n}\n</code></pre> Configuring a checkpoint location for all detectors<pre><code># Guarantees execution of all detectors before\n# com.example.Class.sensitiveAction is executed.\n-raspchecks * checkpoint class com.example.Class {\n  void sensitiveAction();\n}\n</code></pre> Configuring a checkpoint for all detectors except certain ones<pre><code># Guarantees execution of all detectors except emulator and root before\n# com.example.Class.sensitiveAction is executed.\n-raspchecks !emulator,!root checkpoint class com.example.Class {\n  void sensitiveAction();\n}\n</code></pre> <p>As mentioned before, if the configured checkpoint method is not obfuscated and has a descriptive name, DexGuard will terminate and ask for the name to be changed. However, in the scenario where you select checkpoints in code you don't own, and thus cannot change, which also needs to be kept, you can allow the checkpoint to have a descriptive name. We do want to stress that this should only be done in the mentioned case and not for checkpoints in your own code! Use this option at your own risk!</p> Allow a checkpoint to have a descriptive name<pre><code>-raspchecks root checkpoint,allowdescriptivenames class com.example.Class {\n    void sensitiveAction();\n}\n</code></pre> <p>RASP checks have an impact on application performance!</p> <p>As they are executed during runtime, RASP checks will introduce a performance overhead to your application or library. Tuning your RASP performance impact is described in detail in the performance section below.</p> Check out the sample projects! <p>You can find several sample projects in your DexGuard distribution:</p> <ul> <li><code>samples/features/RASP</code></li> <li><code>samples/features/RASPInLibraryProject</code></li> <li><code>samples/features/ThreatCastTamperDetection</code></li> </ul>"},{"location":"rasp.html#wildcards","title":"Wildcards","text":"<p>You can use wildcards in the checkpoint class specification, but DexGuard will not allow you to have over 1000 methods targeted in this way to guard against defining too many checkpoints accidentally.</p> <p>The hardware checker is not enabled when using a wildcard to enable all detectors! The hardware checker needs to be explicitly listed in your <code>-raspchecks</code> option for it to be injected:</p> Enable all detectors, including the hardware checker<pre><code>-raspchecks *,hardware\n</code></pre> <p>Please refer to the OS Integrity page for more information.</p>"},{"location":"rasp.html#addressing-rasp-check-limitations","title":"Addressing RASP check limitations","text":"<p>Some RASP detectors have certain limitations depending on your project and setup. These can be addressed with some additional configuration.</p> Certificate checkerRoot detectorDebug BlockerTamper detector <p>In the following use cases, DexGuard's inputs won't have the required signing information for the certificate checker.</p> Use case Reason Play App Signing Google Play manages signing of your app on your behalf. App Bundle projects App bundles defer app signing to Google Play. Re-signing your APK App signing is deferred to a later step in the build. <p>Additional configuration is thus required to support the certificate checker. To this end, you should use the <code>-raspcertificatehash</code> option.</p> Play App SigningAPK re-signing <p>Provide the certificate hash from the App Signing section on your App Play console.</p> Configuring certificate hashes for Play App signing<pre><code># WARNING: This certificate hash is only an example. DexGuard will throw an error if you try to use this exact certificate hash.\n-raspcertificatehash \"EB:B0:FE:DF:19:42:A0:99:B2:87:C3:DB:00:FF:73:21:62:15:24:81:AB:B2:B6:C7:CB:CD:B2:BA:58:94:A7:68\"\n-raspcertificatehash \"EBB0FEDF1942A099B287C3DB00FF732162152481ABB2B6C7CBCDB2BA5894A768\"\n</code></pre> <p>Provide the certificate hash of the final APK.</p> Configuring certificate hashes for APK re-signing<pre><code># WARNING: This certificate hash is only an example. DexGuard will throw an error if you try to use this exact certificate hash.\n-raspcertificatehash \"EB:B0:FE:DF:19:42:A0:99:B2:87:C3:DB:00:FF:73:21:62:15:24:81:AB:B2:B6:C7:CB:CD:B2:BA:58:94:A7:68\"\n-raspcertificatehash \"EBB0FEDF1942A099B287C3DB00FF732162152481ABB2B6C7CBCDB2BA5894A768\"\n</code></pre> <p>The certificate hash can be provided with or without the colons. Only the SHA-256 hash is supported.</p> <p>Don't specify the Android debug keystore certificate hashes!</p> <p>Android provides a default debug.keystore. If you specify its certificate hashes, the certificate checker will not detect when attackers re-sign your application with this keystore.</p> Multiple certificate hashes are supported. <p>In case you use different certificates to sign different builds (e.g local &amp; release), you can specify multiple certificate hashes.</p> <pre><code># A certificate hash for a local build.\n-raspcertificatehash \"73:21:62:15:24:81:AB:B2:B6:C7:CB:CD:B2:BA:58:94:A7:68:EB:B0:FE:DF:19:42:A0:99:B2:87:C3:DB:00:FF\"\n# A certificate hash for a release build.\n-raspcertificatehash \"AB:B2:B6:C7:CB:CD:B2:BA:58:73:21:62:15:24:81:94:A7:68:EB:B0:FE:DF:19:42:A0:99:B2:87:C3:DB:00:FF\"\n</code></pre> <p>When configuring checkpoints for the root detector, please note that some root checks will only trigger when the check is performed on the main thread. If checkpoints are only executed in background threads, some root setups might be missed. In applications that have entrypoint and spray configured, the locations used for injection will automatically ensure these checks run on the main thread.</p> <p>By default, DexGuard injects a debug blocker as part of the debug checks. The debug blocker is a feature that blocks debugger processes from attaching to your application, which prevents your application from being debugged at runtime.</p> <p>However, if you use an SDK that has a debug detection functionality embedded, the debug blocker may be detected as a debugger by that SDK. In case this causes issues, you can disable the debug blocker feature by adding the following to your DexGuard configuration:</p> <pre><code>-dontinjectdebugblocker\n</code></pre> <p>SDKs protected by DexGuard v9.4 and above are compatible and won't require this option.</p> <p>The tamper detector requires <code>-disableapktamper</code> to be specified in your configuration if you are building an APK and signing it after processing with DexGuard.</p> <p>This detector cannot be used for libraries (.aar).</p>"},{"location":"rasp.html#reacting-to-rasp-checks","title":"Reacting to RASP checks","text":"<p>The previous sections covered how to enable and configure RASP checks. What happens when these checks detect a threat is defined by your reaction strategy. Do you want to disallow the user to continue using the app? Do you want to monitor detected integrity violations? Do you want some custom reaction? DexGuard provides solutions for each of these use cases.</p> <p>This section covers how to configure your desired reactions to threats.</p>"},{"location":"rasp.html#crashing-on-detection","title":"Crashing on detection","text":"<p>Disallowing users to continue using the app when a RASP detector triggers involves crashing the application. This is the default behaviour for most RASP checks, but there are some exceptions due to the risk of false positives. More specifically the root, virtual environment and hook detectors rely on complex heuristics and are therefore more likely than others to return false positives. Because of this, they don't crash the application by default.</p> <p>Use ThreatCast to monitor your RASP checks before enabling app crashing.</p> <p>We recommend a strategy where you initially release in a monitoring-only mode, using ThreatCast, to prevent any impact to your users. After this initial monitoring period, crashing can be enabled for these checks.</p> <p>The table below gives an overview of the default crashing behaviour of the various RASP checks.</p> Default threat behaviour Detectors Crash Debug, Emulator, Tamper, Certificate checker, Hardware Continue Root, Hook, Memory scanning, Virtual environment <p>This default behaviour can be overwritten with the <code>-raspcontinueon</code> option. Here are some example usages of the <code>-raspcontinueon</code> option:</p> Don't crash for specific detector(s)Crash for specific detector(s) Emulator and virtual environments<pre><code># The app is allowed to run on an emulator or in a virtual environment.\n# Detection of any other type of threat will crash the application.\n-raspcontinueon emulator,virtualenvironment\n\n# DexGuard interprets this configuration as follows:\n# -raspcontinueon emulator,virtualenvironment,!root,!hook,!...\n</code></pre> Only crash on emulator and root<pre><code># The app is not allowed to run on an emulator nor on a rooted device.\n# Detection of any other type of threat will not crash the application.\n-raspcontinueon !emulator,!root\n\n# DexGuard interprets this configuration as follows:\n# -raspcontinueon !emulator,virtualenvironment,!root,hook,...\n</code></pre> <p>There are also wildcards available if you want the same behaviour for all detectors.</p> Never crash the applicationAlways crash the application Don't crash for any detectors.<pre><code># Never crash the application regardless of threats.\n-raspcontinueon *\n\n# DexGuard interprets this configuration as follows:\n# -raspcontinueon emulator,virtualenvironment,root,hook,...\n</code></pre> Don't crash for any detectors.<pre><code># Crash the application for any type of detected threat.\n-raspcontinueon none\n\n# DexGuard interprets this configuration as follows:\n# -raspcontinueon !emulator,!virtualenvironment,!root,!hook,...\n</code></pre> <p>The <code>-raspcontinueon</code> option overrides default behaviour.</p> Continues only for emulator checks, crashes for any other checks.<pre><code>-raspcontinueon emulator\n</code></pre> <p>The above option also overrides the default behaviour of other checks. When using this option, be very explicit what types of threats warrant crashes!</p> Preserves default behaviour while not crashing for emulator checks.<pre><code>-raspcontinueon emulator,root,hook,virtualenvironment,memoryscanning\n</code></pre> <p>Crashing does not influence other reactions to threats.</p> <p>Any additional reactions to threats you implement (callbacks, ThreatCast) will be executed before the application crashes. All reaction strategies are compatible with each other.</p> Crashing improves resilience significantly! <p>Crashing your app might seem scary, but it significantly increases the resilience of your application as adversaries will need to restart their efforts over and over again. We recommend invoking DexGuard's crashing mechanism for as many detectors as you are comfortable with.</p>"},{"location":"rasp.html#identifying-crashes-due-to-rasp","title":"Identifying crashes due to RASP","text":"<p>When the app crashes because of a RASP check triggering, the stack trace appears unrelated to RASP to hide information from attackers.</p> Example stack trace (stripped for readability)<pre><code>RuntimeException: Unable to start activity:\n  NullPointerException: Attempt to invoke method on a null object reference\n  // ...\nCaused by:\n  NullPointerException: Attempt to invoke method on a null object reference\n    at com.example.HelloWorldActivity.onCreate (:259)\n    at android.app.Activity.performCreate (Activity.java:8000)\n    at android.app.Activity.performCreate (Activity.java:7984)\n    // ...\n</code></pre> <p>If you are monitoring crashes of your app, this makes it difficult to distinguish between real application crashes and crashes caused by RASP. To solve this issue, DexGuard encodes additional information regarding the RASP checks in the mapping file. Retracing the stack trace with this mapping file, it will become clear whether  the crash was initiated by a RASP check. Below is the retraced version of the stack trace above, in which you can clearly see references to the <code>EmulatorDetector</code>.</p> Example retraced stack trace (stripped for readability)<pre><code>RuntimeException: Unable to start activity:\n  NullPointerException: Attempt to invoke method on a null object reference\n  // ...\nCaused by:\n  NullPointerException: Attempt to invoke method on a null object reference\n    at com.guardsquare.dexguard.detection.EmulatorDetector.EMULATOR (HelloWorldActivity.java:151)\n    at com.guardsquare.dexguard.detection.EmulatorDetector.EMULATOR (HelloWorldActivity.java:216)\n    at com.example.HelloWorldActivity.onCreate (HelloWorldActivity.java:24)\n    at android.app.Activity.performCreate (Activity.java:8000)\n    at android.app.Activity.performCreate (Activity.java:7984)\n    // ...\n</code></pre> <p>This mapping file is compatible with crash reporting services that automatically retrace your stack trace, such as Crashlytics or Sentry.</p>"},{"location":"rasp.html#monitoring-threats","title":"Monitoring threats","text":"<p>You can monitor the threats your app is exposed to using Guardsquare's threat monitoring console. For more details, check out the ThreatCast page!</p>"},{"location":"rasp.html#custom-reaction-strategies","title":"Custom reaction strategies","text":"<p>DexGuard provides a callback system to support custom reaction strategies towards detected threats. For example, you can implement your own notification mechanism, or limit the usability of the application for the end-user after certain detections have triggered.</p> <p>Custom callbacks are security risks!</p> <p>Incorrect usage of callbacks can lead to significant security risks and can even make RASP ineffective.</p> <p>Callback methods can be considered a single point of failure. A tampered callback method can essentially render the underlying RASP check useless. As a precaution, descriptive names for callback functions are not allowed since they can lead to a callback being easily located and then bypassed. Under the hood, DexGuard tries to limit the impact of a compromised callback method, but the threat remains significant.</p> <p>Use callbacks carefully and only when absolutely unavoidable. Try to avoid these typical mistakes when implementing your callback:</p> Typical mistake Risk Do this instead Using complex behavior in callbacks, e.g. displaying UI messages The more complex the logic of a callback is, the more likely it is that the callback can be easily located. Use simple or no custom behaviour on RASP checks. Using unobfuscated symbols and strings in callbacks to react to RASP events Using method names like <code>isAppTampered()</code> or enum values like <code>GUARDSQUARE_HOOKING</code>  enables an attacker to quickly determine the intended behavior, and later change it. Obfuscate such identifiers and values or do not introduce them at all. Pentest your product to make sure that all sensitive information is hidden. Conditionally terminating the application in a callback An exit in a callback is a single point of failure, which can be easily located and then bypassed. Use <code>-raspcontinueon none</code>: DexGuard's crash invocation is well hidden and much more cumbersome to locate. Sending network threat monitoring messages in callbacks Sending a network message may help locate the callback faster. In addition, having this reaction in a callback creates a single point of failure. A better alternative is to use ThreatCast to monitor application runtime threats. Guardsquare will inject ThreatCast communication securely. The link between the communication message and the RASP check will be harder to trace when using ThreatCast. Too mild response Some threats unambiguously indicate that untrusted code is being executed, such as hooking or app integrity threats. A mild response to such threats (such as a message to the user) can accelerate the reverse engineering process. If the application code has been modified, there is no reason to continue execution. Do not use callbacks and immediately terminate the application."},{"location":"rasp.html#callback-implementation-configuration","title":"Callback implementation &amp; configuration","text":"Multiple callbacks[Deprecated] Single callback <p>DexGuard supports unique callbacks for each type of RASP detector. In your application's source code, add a method such as the following <code>myRaspCallback</code> method for each RASP detector:</p> KotlinJava <pre><code>class HelloWorldActivity : Activity() {\n    companion object {\n        /**\n         * This is an optional DexGuard RASP callback method.\n         * The callback method should match one of the supported callback signatures.\n         * Refer to\n         * &lt;a href=\"https://platform.guardsquare.com/manual/dexguard/stable/latest/rasp.html#supported-rasp-callback-signatures\"&gt;this section&lt;/a&gt;\n         * of the manual for a complete list of supported signatures.\n         *\n         * &lt;p&gt;Any strings used in the callback will be automatically encrypted.\n         *\n         * @param debugInfo A long value containing encoded threat information.\n         */\n        @JvmStatic\n        fun myRaspCallback(debugInfo: Long) {\n            Log.i(\"HelloWorldActivity\",\n                  \"RASP threat detected. DebugInfo : \" + debugInfo)\n        }\n    }\n}\n</code></pre> <pre><code>public class HelloWorldActivity extends Activity {\n    /**\n     * This is an optional DexGuard RASP callback method.\n     * The callback method should match one of the supported callback signatures.\n     * Refer to\n     * &lt;a href=\"https://platform.guardsquare.com/manual/dexguard/stable/latest/rasp.html#supported-rasp-callback-signatures\"&gt;this section&lt;/a&gt;\n     * of the manual for a complete list of supported signatures.\n     *\n     * &lt;p&gt;Any strings used in the callback will be automatically encrypted.\n     *\n     * @param debugInfo A long value containing encoded threat information.\n     */\n    public static void myRaspCallback(long debugInfo) {\n        Log.i(\"HelloWorldActivity\",\n              \"RASP threat detected. DebugInfo : \" + debugInfo);\n    }\n}\n</code></pre> <p>You do not have to use this method anywhere in your app. Instead, add the following DexGuard configuration to set <code>myRaspCallback</code> as the RASP callback method for your RASP check(s):</p> Example: use the callback for emulator checks<pre><code>-raspcallback emulator class com.example.HelloWorldActivity {\n    public static void myRaspCallback(long);\n}\n</code></pre> <p>Note</p> <p>Supported RASP Callback methods' signatures are available in this link.</p> <p>Ensure specified callbacks are valid.</p> <p>In order to define a callback in your configuration, the callback class specification needs to match an existing callback method. Do not use the sample callbacks as indicated above (e.g. <code>com.example.HelloWorldActivity</code>). Ensure the package and class name, as well as the method name, access modifiers and signatures match the existing callback defined in your source code.</p> <p>Danger</p> <p>It is strongly discouraged to indicate to the end users which RASP check was triggered as it might help malicious users identify and bypass the RASP checks injected into your application. </p> <p>You can also configure the same callback for multiple RASP checks by providing a comma separated list of the RASP checks, or all RASP checks by providing a * wildcard instead of <code>emulator</code> in the above example.</p> <p>Example: use the callback for emulator &amp; apptamper checks<pre><code>-raspcallback emulator,apptamper class com.example.HelloWorldActivity {\n    public static void myRaspCallback(long);\n}\n</code></pre> Example: use the callback for all rasp checks<pre><code>-raspcallback * class com.example.HelloWorldActivity {\n    public static void myRaspCallback(long);\n}\n</code></pre></p> <p>Use multiple callbacks, i.e. a different callback for each RASP check.</p> <p>Warning</p> <p>Callbacks that take <code>DetectionReport</code> as an argument are deprecated. It's more resilient against reverse engineering to use multiple callbacks that take a <code>long</code> value as an argument.</p> <p>For backward compatibility, the deprecated single callback for all RASP checks will continue working as previously.</p> <p>In order to add a callback, you must add a dependency to your project. You need to add the following to your root-level <code>build.gradle</code> file or add it inside the <code>dependencyResolutionManagement</code>, if a modular project structure is used:</p> Manual Download (Kotlin)Manual Download (Groovy)Maven <pre><code>repositories {\n    flatDir { dirs(\"libs\") }\n}\n</code></pre> <pre><code>repositories {\n    flatDir { dirs 'libs' }\n}\n</code></pre> <pre><code>repositories {\n    maven {\n        credentials {\n            username = \"maven\"\n            password = \"${dexguardMavenToken}\"\n        }\n        url \"https://maven.guardsquare.com\"\n        authentication {\n            basic(BasicAuthentication)\n        }\n    }\n}\n</code></pre> <p>The dependency then needs to be added to the <code>build.gradle</code> of the module where the callback is located:</p> Manual Download (Kotlin)Manual Download (Groovy)Maven <pre><code>dependencies {\n    compileOnly(mapOf(\"name\" to \"dexguard-rasp\",\n                      \"ext\"  to \"jar\")\n}\n</code></pre> <p>You can find the dependency at the following locations:</p> <p> Dependency Location DexGuard RASP support library ${DexGuardInstallPath}/lib/dexguard-rasp.jar <p></p> <pre><code>dependencies {\n    compileOnly (name: 'dexguard-rasp', ext: 'jar')\n}\n</code></pre> <p>You can find the dependency at the following locations:</p> <p> Dependency Location DexGuard RASP support library ${DexGuardInstallPath}/lib/dexguard-rasp.jar <p></p> <pre><code>dependencies {\n    compileOnly 'com.guardsquare:dexguard-rasp:9.10.5'\n}\n</code></pre> <p>You can add a method such as the following <code>myCallback</code> method:</p> KotlinJava <pre><code>class HelloWorldActivity : Activity()\n{\n    companion object\n    {\n        /**\n         * This is an optional DexGuard RASP callback method.\n         * The callback method should match one of the supported callback signatures.\n         * Refer to\n         * &lt;a href=\"https://platform.guardsquare.com/manual/dexguard/stable/latest/rasp.html#supported-rasp-callback-signatures\"&gt;this section&lt;/a&gt;\n         * of the manual for a complete list of supported signatures.\n         *\n         * &lt;p&gt;Any strings used in the callback will be automatically encrypted.\n         *\n         * @param detectionReport A detection report containing threat information.\n         */\n        @JvmStatic\n        fun myCallback(detectionReport: DetectionReport)\n        {\n            // The type of threat detected can be checked.\n            if (detectionReport.isRunningInEmulator)\n            {\n                Log.i(\"HelloWorldActivity\", \"Emulator detected\")\n            }\n        }\n    }\n}\n</code></pre> <pre><code>public class HelloWorldActivity extends Activity\n{\n    /**\n     * This is an optional DexGuard RASP callback method.\n     * The callback method should match one of the supported callback signatures.\n     * Refer to\n     * &lt;a href=\"https://platform.guardsquare.com/manual/dexguard/stable/latest/rasp.html#supported-rasp-callback-signatures\"&gt;this section&lt;/a&gt;\n     * of the manual for a complete list of supported signatures.\n     *\n     * &lt;p&gt;Any strings used in the callback will be automatically encrypted.\n     *\n     * @param detectionReport A detection report containing threat information.\n     */\n    public static void myCallback(DetectionReport detectionReport)\n    {\n        // The type of threat detected can be checked.\n        if (detectionReport.isRunningInEmulator())\n        {\n            Log.i(\"MyApp\", \"Emulator detected\");\n        }\n    }\n}\n</code></pre> <p>along with the following DexGuard configuration to set <code>myCallback</code> as the RASP callback method:</p> <pre><code>-raspcallback class com.example.HelloWorldActivity {\n    public static void myCallback(com.guardsquare.dexguard.rasp.callback.DetectionReport);\n}\n</code></pre> <p>Note</p> <p>Supported RASP callback methods' signatures are available in this link.</p> <p>Note</p> <p>The method must be static and have the same parameter as in the example. You don't need a <code>-keep</code> rule for the method.</p> <p>The <code>DetectionReport</code> contains several methods that allow you to determine the type of threat. You can find the complete list in the DetectionReport JavaDoc.</p> <p>Tip</p> <p>The method <code>getDebugInfo()</code> contains encoded debugging information. If you are not using ThreatCast, we highly recommend that you log this value as it will be helpful for providing to Guardsquare support when diagnosing any problems.</p> <p>Note that you cannot reuse your malware protection callback for your RASP protections.</p>"},{"location":"rasp.html#visual-feedback","title":"Providing Visual Feedback","text":"<p>DexGuard also supports callback methods that accept a Context object, which can be leveraged to provide visual  feedback to the end users when a RASP check is triggered. This can be achieved by updating the <code>-raspcallback</code>  and implementing the callback methods that resemble the template below:</p> <pre><code>-raspcallback emulator class com.example.HelloWorldActivity {\n    public static void myEmulatorCallback(android.content.Context, long);\n}\n</code></pre>"},{"location":"rasp.html#limitations-and-guidelines","title":"Limitations and guidelines","text":"<p>RASP checks may trigger in parts of your applications where access to UI is either unavailable or limited. Some basic guidelines should be followed to avoid unexpected behavior:</p> <ol> <li> <p>Add a null check on the Context parameter</p> <p>If the RASP check triggers before a context is available, then the context passed to the callback will be null. Therefore, a necessary null check on this object should be performed before accessing them.</p> KotlinJava <pre><code>class HelloWorldActivity : Activity()\n{\n    companion object\n    {\n        /**\n         * This is an optional DexGuard RASP callback method.\n         * The callback method should match one of the supported callback signatures.\n         * Refer to\n         * &lt;a href=\"https://platform.guardsquare.com/manual/dexguard/stable/latest/rasp.html#supported-rasp-callback-signatures\"&gt;this section&lt;/a&gt;\n         * of the manual for a complete list of supported signatures.\n         *\n         * &lt;p&gt;Any strings used in the callback will be automatically encrypted.\n         *\n         * @param context   Application context used for visual feedback.\n         * @param debugInfo A long value containing encoded threat information.\n         */\n        @JvmStatic\n        fun myEmulatorCallback(context: Context?, debugInfo: Long)\n        {\n            // Null check the `context` object.\n            if (context == null) {\n                // Alternative call back implementation when the `context` is null\n                // ...\n                return\n            }\n\n            // Optionally provide visual feedback using the provided context.\n            // ...\n        }\n    }\n}\n</code></pre> <pre><code>public class HelloWorldActivity extends Activity\n{\n    /**\n      * This is an optional DexGuard RASP callback method.\n      * The callback method should match one of the supported callback signatures.\n      * Refer to\n      * &lt;a href=\"https://platform.guardsquare.com/manual/dexguard/stable/latest/rasp.html#supported-rasp-callback-signatures\"&gt;this section&lt;/a&gt;\n      * of the manual for a complete list of supported signatures.\n      *\n      * &lt;p&gt;Any strings used in the callback will be automatically encrypted.\n     *\n     * @param context   Application context used for visual feedback.\n     * @param debugInfo A long value containing encoded threat information.\n     */\n    public static void myEmulatorCallback(Context context, long debugInfo)\n    {\n        // Null check the `context` object.\n        if (context == null) {\n            // Alternative call back implementation when the `context` is null\n            // ...\n            return;\n        }\n\n        // Optionally provide visual feedback using the provided context.\n        // ...\n    }\n}\n</code></pre> </li> <li> <p>Do not rely on activity context</p> <p>A RASP check can trigger when only an <code>Application</code> context is available. You should therefore only use UI elements that can be shown with an <code>Application</code> context (see the examples section).</p> <p>Avoid UI elements that require an <code>Activity</code> context (e.g. Dialog).</p> </li> </ol> <p>Note</p> <p>Supported RASP Callback methods' signatures are available in this link.</p> <p>Danger</p> <p>It is important to not indicate which RASP check is triggered in the visual feedback as such practices  would enable malicious users to identify and patch the triggered RASP check.  </p>"},{"location":"rasp.html#rasp-callbacks-with-context-examples","title":"RASP callbacks with context examples","text":"<p>Below are examples of how a RASP callback with context can be leveraged to provide visual feedback to the end users upon the trigger of a RASP check: </p> Showing a toast messagePosting a notificationRedirecting to a web pageRedirecting to a local web page <p>With this example, a Toast message indicating that the app is not supported on the user device is shown  when the app is executed on an emulator.</p> <pre><code>-raspchecks emulator\n-raspcallback emulator class com.example.HelloWorldActivity {\n    public static void myEmulatorCallback(android.content.Context, long);\n}\n</code></pre> KotlinJava <pre><code>@JvmStatic\nfun myEmulatorCallback(context: Context?, debugInfo: Long)\n{\n    // Null check the `context` object to avoid NullPointerExceptions!\n    if (context == null) {\n        Log.e(\"HelloWorldActivity\", \"Context is null, no visual feedback possible\")\n        return\n    }\n\n    // Optionally provide visual feedback using the provided context.\n    Toast.makeText(context, \"This device is not supported by our application.\", Toast.LENGTH_LONG).show()\n}\n</code></pre> <pre><code>public static void myEmulatorCallback(Context context, long debugInfo)\n{\n    // Null check the `context` object to avoid NullPointerExceptions!\n    if (context == null) {\n      Log.e(\"HelloWorldActivity\", \"Context is null, no visual feedback possible\");\n      return;\n    }\n\n    // Optionally provide visual feedback using the provided context.\n    Toast.makeText(context, \"This device is not supported by our application.\", Toast.LENGTH_LONG).show();\n}\n</code></pre> <p>Known limitations</p> <p>On API 29 (Quince Tart) or below, toast messages might not show up when used in the RASP callback with the default RASP crash reaction.</p> <p>With this example, a Notification message indicating that the app is not supported on the user device will be sent  when the app is executed on an emulator.</p> <pre><code>-raspchecks emulator\n-raspcallback emulator class com.example.HelloWorldActivity {\n    public static void myEmulatorCallback(android.content.Context, long);\n}\n</code></pre> <p>Note</p> <p>On API 33 (Tiramisu) and above, the <code>POST_NOTIFICATIONS</code> permission is required to post notifications. Make sure to request this permission upfront.</p> KotlinJava <pre><code>@JvmStatic\nfun myEmulatorCallback(context: Context?, debugInfo: Long)\n{\n    // Null check the `context` object to avoid NullPointerExceptions!\n    if (context == null) {\n        Log.e(\"HelloWorldActivity\", \"Context is null, no visual feedback possible\")\n        return\n    }\n\n    // Optionally provide visual feedback using the provided context.\n    // API 33+ (Tiramisu) requires the `POST_NOTIFICATIONS` permission to be granted\n    // in order to post notifications. Requesting this permission should happen outside\n    // of the callback so we assume that it has already been granted here.\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {\n        if (ActivityCompat.checkSelfPermission(context, android.Manifest.permission.POST_NOTIFICATIONS)\n            != PackageManager.PERMISSION_GRANTED) {\n            Toast.makeText(context, \"No permission to post notifications.\", Toast.LENGTH_LONG).show()\n            return\n        }\n    }\n\n    // API 26+ (Oreo) requires a NotificationChannel to manage notification settings.\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n        val name = \"Notification channel\"\n        val description = \"Notification channel description\"\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(\"channel_id\", name, importance)\n        channel.description = description\n        // Register the channel with the system. You can't change the importance\n        // or other notification behaviors after this.\n        val notificationManager = context.getSystemService(NotificationManager::class.java)\n        notificationManager.createNotificationChannel(channel)\n    }\n\n    val builder = NotificationCompat.Builder(context, \"channel_id\")\n        .setSmallIcon(R.drawable.ic_launcher)\n        .setContentTitle(\"Unsupported device!\")\n        .setContentText(\"This device is not supported by our application.\")\n        .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n\n    val notificationManagerCompat = NotificationManagerCompat.from(context)\n    notificationManagerCompat.notify(1, builder.build())\n}\n</code></pre> <pre><code>public static void myEmulatorCallback(Context context, long debugInfo)\n{\n    // Null check the `context` object to avoid NullPointerExceptions!\n    if (context == null) {\n      Log.e(\"HelloWorldActivity\", \"Context is null, no visual feedback possible\");\n      return;\n    }\n\n    // Optionally provide visual feedback using the provided context.\n    // API 33+ (Tiramisu) requires the `POST_NOTIFICATIONS` permission to be granted\n    // in order to post notifications. Requesting this permission should happen outside\n    // of the callback so we assume that it has already been granted here.\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {\n        if (ActivityCompat.checkSelfPermission(context, android.Manifest.permission.POST_NOTIFICATIONS)\n                != PackageManager.PERMISSION_GRANTED) {\n            Toast.makeText(context, \"No permission to post notifications.\", Toast.LENGTH_LONG).show();\n            return;\n        }\n    }\n\n    // API 26+ (Oreo) requires a NotificationChannel to manage notification settings.\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n        CharSequence name = \"Notification channel\";\n        String description = \"Notification channel description\";\n        int importance = NotificationManager.IMPORTANCE_DEFAULT;\n        NotificationChannel channel = new NotificationChannel(\"channel_id\", name, importance);\n        channel.setDescription(description);\n        // Register the channel with the system. You can't change the importance\n        // or other notification behaviors after this.\n        NotificationManager notificationManager = context.getSystemService(NotificationManager.class);\n        notificationManager.createNotificationChannel(channel);\n    }\n\n    NotificationCompat.Builder builder =\n        new NotificationCompat.Builder(context, \"channel_id\")\n            .setSmallIcon(R.drawable.ic_launcher)\n            .setContentTitle(\"Unsupported device!\")\n            .setContentText(\"This device is not supported by our application.\")\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT);\n\n    NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\n    notificationManagerCompat.notify(1, builder.build());\n}\n</code></pre> <p>With this example, the user will be redirected to a web page when the app is executed on an emulator.</p> <pre><code>-raspchecks emulator\n-raspcallback emulator class com.example.HelloWorldActivity {\n    public static void myEmulatorCallback(android.content.Context, long);\n}\n</code></pre> KotlinJava <pre><code>@JvmStatic\nfun myEmulatorCallback(context: Context?, debugInfo: Long)\n{\n    // Null check the `context` object to avoid NullPointerExceptions!\n    if (context == null) {\n        Log.e(\"HelloWorldActivity\", \"Context is null, no visual feedback possible\")\n        return\n    }\n\n    // Optionally provide visual feedback using the provided context.\n    val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.google.com\"))\n    browserIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n    context?.startActivity(browserIntent)\n}\n</code></pre> <pre><code>public static void myEmulatorCallback(Context context, long debugInfo)\n{\n    // Null check the `context` object to avoid NullPointerExceptions!\n    if (context == null) {\n      Log.e(\"HelloWorldActivity\", \"Context is null, no visual feedback possible\");\n      return;\n    }\n\n    // Optionally provide visual feedback using the provided context.\n    Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.google.com\"));\n    browserIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    context.startActivity(browserIntent);\n}\n</code></pre> <p>With this example, the user will be redirected to a web page when the app is executed on an emulator.</p> <pre><code>-raspchecks emulator\n-raspcallback emulator class com.example.HelloWorldActivity {\n    public static void myEmulatorCallback(android.content.Context, long);\n}\n</code></pre> KotlinJava <pre><code>@JvmStatic\nfun myEmulatorCallback(context: Context?, debugInfo: Long)\n{\n    // Null check the `context` object to avoid NullPointerExceptions!\n    if (context == null) {\n        Log.e(\"HelloWorldActivity\", \"Context is null, no visual feedback possible\")\n        return\n    }\n\n    // Optionally provide visual feedback using the provided context.\n    try {\n        val builder: java.lang.StringBuilder = java.lang.StringBuilder()\n        val `is`: java.io.InputStream = HelloWorldActivity::class.java.getResourceAsStream(\"/assets/index.html\")\n        val reader: java.io.BufferedReader =\n            java.io.BufferedReader(java.io.InputStreamReader(`is`, java.nio.charset.StandardCharsets.UTF_8))\n\n        var buffer: String?\n        while ((reader.readLine().also { buffer = it }) != null) {\n            builder.append(buffer)\n        }\n        reader.close()\n\n        val outputStream: java.io.FileOutputStream =\n            java.io.FileOutputStream(java.io.File(context.getFilesDir(), \"index.html\"))\n        outputStream.write(builder.toString().toByteArray(java.nio.charset.StandardCharsets.UTF_8))\n        outputStream.close()\n\n        // Get the file URI.\n        val file: java.io.File = java.io.File(context.getFilesDir(), \"index.html\")\n        val uri: android.net.Uri =\n            FileProvider.getUriForFile(context, context.getPackageName() + \".provider\", file)\n\n        // Open the file in the system browser.\n        val browserIntent: android.content.Intent = android.content.Intent(android.content.Intent.ACTION_VIEW)\n        browserIntent.setDataAndType(uri, \"text/html\")\n        browserIntent.setFlags(android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION or android.content.Intent.FLAG_ACTIVITY_NEW_TASK)\n        context.startActivity(browserIntent)\n    } catch (e: java.io.IOException) {\n        throw java.lang.RuntimeException(e)\n    }\n}\n</code></pre> <pre><code>public static void myEmulatorCallback(Context context, long debugInfo)\n{\n    // Null check the `context` object to avoid NullPointerExceptions!\n    if (context == null) {\n      Log.e(\"HelloWorldActivity\", \"Context is null, no visual feedback possible\");\n      return;\n    }\n\n    // Optionally provide visual feedback using the provided context.\n    try {\n        StringBuilder builder = new StringBuilder();\n        InputStream is = HelloWorldActivity.class.getResourceAsStream(\"/assets/index.html\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n        String buffer;\n        while ((buffer = reader.readLine()) != null) {\n            builder.append(buffer);\n        }\n        reader.close();\n\n        FileOutputStream outputStream = new FileOutputStream(new File(context.getFilesDir(), \"index.html\"));\n        outputStream.write(builder.toString().getBytes(StandardCharsets.UTF_8));\n        outputStream.close();\n\n        // Get the file URI.\n        File file = new File(context.getFilesDir(), \"index.html\");\n        Uri uri = FileProvider.getUriForFile(context, context.getPackageName() + \".provider\", file);\n\n        // Open the file in the system browser.\n        Intent browserIntent = new Intent(Intent.ACTION_VIEW);\n        browserIntent.setDataAndType(uri, \"text/html\");\n        browserIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(browserIntent);\n\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}\n</code></pre> <p>Tip</p> <p>Try and experiment with the visual callbacks using the RASPCallbackWithContext sample, which can be found at <code>samples/features/RASPCallbackWithContext</code>.</p>"},{"location":"rasp.html#rasp_callback-signatures","title":"Supported RASP callback signatures","text":"<p>DexGuard supports following RASP callbacks signatures:</p> <p>Note</p> <p>Please ensure your RASP callback method signature matches one of the following supported formats, including the parameters types and access modifiers. </p> <p>Tip</p> <p>The method name and parameter names can be chosen arbitrarily, as long as the method  signature matches the one specified in the <code>-raspcallback</code> rule.</p> <pre><code>public static void myCallBack(DetectionReport detectionReport);\npublic static void myCallBack(long debugInfo);\npublic static void myCallBack(Context context, long debugInfo);\n</code></pre>"},{"location":"rasp.html#verification","title":"Verification","text":"<p>RASP checks are injected in your application and will increase its size and incur a performance cost. This section covers the options available to manage these impacts in case either is problematic.</p> <p>Impact table</p> <p> Aspect Impact Details Stability No The additional runtime detection logic by itself will not cause stability issues to your application. Code Size Med As additional detection logic will be added, there will be a limited but noticeable impact on your application's size. Also, you can use the <code>aggressiveness</code> level to limit the amount of checks being injected. Performance Low-High Additional detection logic will impact your app's performance, depending on the location and the amount of checks being injected. Make sure to denylist your performance-sensitive code from such random injections. <p></p>"},{"location":"rasp.html#size","title":"Size","text":"<p>When spray injection is enabled, DexGuard injects checks randomly spread in the project's code. In case your protected application is significantly larger due to these injections, you can configure the number of injections through the appropriate aggressiveness setting.</p> Where can I find the number of injections? <p>You can find the total number of injections for each detector in the protection report. This total number includes all types of RASP injection.</p> <p>Alternatively, more detailed debug information can be generated with the <code>-printinjectmapping &lt;some_file&gt;</code> option.</p> <p>The <code>-raspaggressiveness &lt;detector&gt; &lt;level&gt;</code> option allows you to configure the  aggressiveness of the spray injection for each detector. The possible aggressiveness levels are: <code>min</code>, <code>low</code>, <code>medium</code> and <code>high</code>.</p> <p>For example, to increase the amount of injected hook detections you can put the following in your DexGuard configuration:</p> <pre><code>-raspaggressiveness hook high\n</code></pre> <p>The default aggressiveness levels are listed in the table below:</p> <p> Detector name Configuration name Default aggressiveness Tamper Detector <code>apptamper</code> <code>medium</code> Certificate Checker <code>certificatetamper</code> <code>medium</code> Debug Detector <code>debug</code> <code>medium</code> Emulator Detector <code>emulator</code> <code>high</code> Hook Detector <code>hook</code> <code>medium</code> Root Detector <code>root</code> <code>medium</code> Virtual Environment Detector <code>virtualenvironment</code> <code>medium</code> Memory Scanning Detector <code>memoryscanning</code> <code>medium</code> Hardware Checker <code>hardware</code> N/A <p></p>"},{"location":"rasp.html#performance","title":"Performance","text":"<p>DexGuard uses a pseudo-random seed value to determine the injection locations for spray checks. This improves the resilience of your application but can introduce performance differences across builds when a check is injected in performance sensitive code. One intuitive example of performance sensitive code are methods responsible for updating the UI of a scroll view.</p>"},{"location":"rasp.html#profile-guided-obfuscation","title":"Profile-Guided Obfuscation","text":"<p>The Profile-guided obfuscation (PGO) feature provides a structural approach to identify the hot code paths and fine-tune the RASP injection accordingly. This feature is intended to be used as part of a two-phase configuration workflow which consists of:</p> <ul> <li>Phase 1: App instrumentation to collect profiling data and configurations.</li> <li>Phase 2: Apply protection features tailored to the collected data.</li> </ul> <p>Follow the getting started guide of the Profile-guided obfuscation feature to learn more on how to set up this feature and workflow.</p>"},{"location":"rasp.html#excluding-injection-locations","title":"Excluding injection locations","text":"<p>The following section covers advanced configuration options. Try out the profile-guided obfuscation workflow before manually excluding injection locations!</p> <p>It's possible that the profiling-guidance data did not exclude all performance-sensitive parts of your code, and you still experience some performance degradation in a user flow of the app.</p> <p>To find these remaining performance-sensitive injection locations, you can use the <code>-debugraspchecks</code> option. This option builds an unreleasable version of your app which logs executed RASP checks and will not crash due to RASP. You can use these logs to get more insight into your protected app and why its performance may be impacted.</p> <p>Danger</p> <p>The printed logs expose a lot of information about the executing RASP checks, which could also be used by a malicious attacker. The<code>-debugraspchecks</code> option prevents these logs from being accidentally included in your released application or library by setting the  testOnly attribute in the Android manifest. This has implications on how to install an application under test:</p> <ul> <li>Apk     <pre><code>$ adb install -t out.apk\n</code></pre></li> <li>Bundle     <pre><code>$ bundletool install-apks --apks out.apks --allow-test-only\n</code></pre> If you are building a library: every application using the processed library will have testOnly set to true, preventing it from being releasable. The steps outlined for the application case will have to be repeated by all consumers of your library. </li> </ul> <p>The example logs below show a hypothetical situation where the root check is executed multiple times during the startup flow of the application.</p> Logcat example<pre><code>Running Rooted check in com/example/StartupActivity.attachBaseContext\nRunning Rooted check in com/example/StartupActivity.onCreate\n</code></pre> <p>If you notice that the performance of this startup is significantly slower than before, you may opt to denylist one of these locations.</p> <p>This can be achieved with the <code>-raspdenylist &lt;method_specification&gt;</code> option. </p> <p>Do not denylist methods when there's no significant performance degradation!</p> <p>Excluding too many locations lowers the protection of your application. Use an evidence-based approach for configuring the <code>-raspdenylist</code> option. Do not exclude methods when they have not proven to be performance sensitive.</p> <p>RASP checks are designed with performance in mind, and repeated calls such as the ones in the example are usually not an issue! </p> <p>In the example, we could opt to exclude the <code>onCreate</code> method of the startup activity:</p> <pre><code>-raspdenylist class com.example.StartupActivity {\n    void onCreate(android.os.Bundle);\n}\n</code></pre> <p>With this configuration, the <code>attachBaseContext</code> method is still eligible for injection so the implications for the security of the <code>StartupActivity</code> are minimal.</p> <p>If performance of the <code>StartupActivity</code> remains problematic,  you can opt to exclude all methods in the <code>StartupActivity</code> by using a wildcard.</p> <pre><code>-raspdenylist class com.example.StartupActivity { *; }\n</code></pre> <p>Alternatively, you can also use annotations to denylist specific classes or methods from RASP injection.</p> <pre><code>-raspdenylist @MyAnnotation class * { @NoRasp &lt;methods&gt;; }\n</code></pre> Remove ineffective denylists <p>If you added a denylist but it did not improve the performance, take care to remove it again. This way, security of the app is compromised as little as possible.</p> <p>Checkpoints</p> <p>Defined checkpoints have strict priority over the excluded classes.</p> <p>Checkpoint checks will be executed regardless of the list of excluded classes in <code>-raspdenylist</code>.</p>"},{"location":"rasp.html#turn-off-spray-injection","title":"Turn off spray injection","text":"<p>If performance of the protected application remains problematic, you can try turning off spray injection entirely. Disabling spray injection can be achieved by explicitly specifying that you only want entrypoint injection:</p> <pre><code># -raspchecks root,emulator\n-raspchecks root,emulator entrypoint\n</code></pre> <p>This will guarantee that injection locations are limited to entrypoints. In this case, we highly recommend configuring additional checkpoints.</p> <p>With spray disabled, checkpoints become even more important!</p> <p>To prevent compromising your app security, you should make sure to define  checkpoints for your most sensitive methods.</p>"},{"location":"threatcast.html","title":"ThreatCast","text":"<p>Guardsquare's ThreatCast is a mobile app security console that allows real-time threat monitoring of applications protected by Guardsquare. It displays detected runtime threats and provides insight into the users and devices causing these. </p> <p>To learn more about ThreatCast's capabilities and the integration in your project, please consult the online documentation.</p> <p>ThreatCast is a freemium SaaS solution</p> <p>As a Guardsquare customer, monitoring of a single Android or iOS application is included in your license and comes without additional charges.  </p> <p></p>"},{"location":"threatcast.html#enrollment","title":"Enrollment","text":"<p>Log in to Guardsquare, navigate to  <code>My Applications</code> and select the app you'd like to monitor, then click <code>Monitor</code>.  Team Managers can self-enroll the app by clicking <code>Activate</code>.</p>"},{"location":"threatcast.html#quickstart","title":"Quickstart","text":"<p>Enabling support for ThreatCast is as easy as:</p> <ul> <li>Adding your ThreatCast API key to your DexGuard configuration.</li> <li>Enabling RASP in your application.</li> <li>Reprocessing your app with DexGuard.</li> </ul> <p>Additionally, you can enrich the threat data by:</p> <ul> <li>Adding an App User ID to identify the users causing these threats.</li> <li>Discovering where in your app's code any integrity violations were detected.</li> </ul> <p>A sample application demonstrating the ThreatCast integration can be found under <code>samples/features/ThreatCastTamperDetection</code> in the DexGuard release zip archive.</p> <p>Prerequisites</p> <p>To get useful data sent to your dashboard, you need to  configure the  automatic injection of RASP checks for your application.  Without this step, no threats will be reported to ThreatCast.</p> <p>Limitations</p> <p>For Dart code of Flutter apps, only environment integrity violations will be reported to ThreatCast.</p>"},{"location":"threatcast.html#configuration","title":"Configuration","text":"<p>As the application to monitor will already be registered by Guardsquare, you will only have to copy the generated API key from the dashboard to your DexGuard configuration. </p> <p>Add your ThreatCast API key to your configuration as follows:</p> DexGuardNDK Add-on <pre><code>-threatcastapikey YOUR_API_KEY\n</code></pre> <pre><code>monitor:\n  threatcast-key:\n    \"YOUR_API_KEY\"\n</code></pre> <p>Warning</p> <p>If you're also configuring ThreatCast in the NDK Add-on, make sure the provided ThreatCast API key is the same in both the DexGuard and BitGuard configuration. DexGuard will throw a <code>RuntimeException</code> if the ThreatCast API keys are different.</p>"},{"location":"threatcast.html#app-user-id","title":"App User ID","text":"<p>ThreatCast accompanies threat events with a soft device identifier (not persistent to factory resets or app reinstalls) which allows you to group the different threats on a per-device basis. </p> <p>In order to make ThreatCast events even more actionable you can optionally provide an app user ID (AUID) that can be used to map events to users. For example, it could be used to take actions related to specific users such as blocking their access. </p> <p></p> <p>To provide an AUID, you need to implement a method that DexGuard can call to retrieve it and configure the method in your DexGuard configuration. It will be called every time a threat is detected.</p> <p>A method such as the following <code>getAuid</code> method can be added to the application:</p> KotlinJava <pre><code>class HelloWorldActivity : Activity()\n{\n    // ...\n\n    companion object\n    {\n        /**\n         * This is an optional DexGuard ThreatCast AUID getter method. This signature must match.\n         *\n         * Any strings used in the getAuid will be automatically encrypted.\n         *\n         * @return A String representing the App User ID (AUID).\n         */\n        @JvmStatic\n        fun getAuid(): String\n        {\n            // Implementation of how the AUID is generated and retrieved is left to the app developer.\n            return appUserId\n        }\n    }\n}\n</code></pre> <pre><code>public class HelloWorldActivity extends Activity\n{\n    // ...\n\n    /**\n     * This is an optional DexGuard ThreatCast AUID getter method. This signature must match.\n     *\n     * Any strings used in the getAuid will be automatically encrypted.\n     *\n     * @return A String representing the App User ID (AUID).\n     */\n    public static String getAuid()\n    {\n        // Implementation of how the AUID is generated and retrieved is left to the app developer.\n        return appUserId;\n    }\n}\n</code></pre> <p>along with the following DexGuard configuration to set <code>getAuid</code> as the AUID getter method:</p> <pre><code>-threatcastappuseridgetter class com.example.HelloWorldActivity {\n    public static java.lang.String getAuid();\n}\n</code></pre> <p>Do note that DexGuard will not allow an AUID getter method with a descriptive name that is kept, as this could serve as an entry point for an attack.</p> <p>Tip</p> <p>Keep in mind that threats can be detected before the user has had a chance to identify themselves  (like at application startup). The default return value of the AUID getter method in these cases should be either <code>null</code> or an empty string (<code>\"\"</code>). The ThreatCast server will try to autocomplete these based on previous and future events originating from the same device. </p> <p>Note</p> <p>The method must be static and public, and the <code>-threatcastappuseridgetter</code> specification in your configuration  must not contain any wildcard characters. You don't need a <code>-keep</code> rule for the method.</p> <p>Limitations</p> <p>For Flutter apps, <code>-threatcastappuseridgetter</code> should not be implemented in the Dart code, but instead in the  Java or Kotlin part of your application, and configured in your DexGuard configuration.</p>"},{"location":"threatcast.html#threat-location-reporting","title":"Threat location reporting","text":"<p>To display additional detailed information about the location in your code where a threat was detected, ThreatCast sends check location identifiers along with each threat it reports. In order to translate these identifiers into actual code locations, a ThreatCast mapping file must be printed and  uploaded to the dashboard.</p> <p>By default, the DexGuard Gradle plugin takes care of configuring DexGuard to this end. DexGuard prints a <code>threatcast-mapping.yml</code> file in the <code>build/outputs/dexguard/</code> directory, and automatically uploads  the mapping to your dashboard. Changing the output location of the file is possible with the <code>-printthreatcastmapping &lt;path&gt;</code> option.</p> <p>When using DexGuard in standalone mode, you have to explicitly specify the <code>-printthreatcastmapping &lt;path&gt;</code>  option in your configuration to achieve the above.</p> <p>To disable automatic uploading of the mapping file, you can use the <code>-dontuploadthreatcastmapping</code> option. In this case, since the generated file is build-specific, you will need to upload your ThreatCast mapping file manually for every released app version. You can do so by logging in to your ThreatCast account, selecting Options / Manage Apps, selecting the correct app, and uploading your mapping file in the mappings tab.</p> <p>Limitations</p> <p>For Flutter apps, the reported location will be <code>&lt;dart&gt;</code> for RASP checks that are injected into Dart code.</p>"},{"location":"threatcast.html#debugging-threatcast","title":"Debugging ThreatCast","text":"<p>We also provide a debug version of the ThreatCast client. This version contains additional logcat logging information to verify your setup. To use it, simply specify the <code>-usethreatcastdebugclient</code> option in your configuration. When using this version, the application is made debuggable to prevent accidental releases. After debugging, you should remove the configuration option and rebuild your application.</p>"},{"location":"troubleshooting.html","title":"Overview","text":"<p>While preparing a configuration for processing your code, you may bump into a few problems. The following sections discuss some common issues and solutions.</p>"},{"location":"troubleshooting.html#useful-tools-for-solving-common-problems","title":"Useful tools for solving common problems","text":"<ul> <li>The <code>ReTrace</code> tool can be used to de-obfuscate stacktraces.</li> <li>The library rule generator can be used to generate keep rules required for a library aar.</li> <li>The ProGuard Playground can be used to write keep rules interactively.</li> <li>The <code>-addconfigurationdebugging</code> option can be used to instrument the application, so that it prints rule suggestions to logcat at runtime.</li> </ul>"},{"location":"troubleshooting.html#quick-troubleshooting","title":"Quick troubleshooting","text":"<p>If you have problems setting up your project:</p> <ul> <li>Check if you can build and run a sample, to verify that your environment   is set up properly:</li> </ul> Linux/macOSWindows <pre><code>./gradlew assembleRelease\nadb install build/outputs/apk/release/HelloWorld-release-protected.apk\n</code></pre> <pre><code>gradlew assembleRelease\nadb install build\\outputs\\apk\\release\\HelloWorld-release-protected.apk\n</code></pre> <p>Info</p> <p>By default, the target in the samples is \"android-28\", so you should have the target API for Android 9.0 installed.</p> <p>If the obfuscated application crashes at runtime, you may have to add some custom configuration to <code>dexguard-project.txt</code>.  The most common issues you will encounter are:</p> <p>1. ClassNotFoundException:  The application tries to access a class by means of reflection, but DexGuard has removed or obfuscated it. You should explicitly preserve the class.</p> <pre><code>-keep class mypackage.MyClass\n</code></pre> <p>2. NoSuchMethodException: The application tries to access a method by means of reflection  (for a WebView, for instance), but DexGuard has removed or obfuscated it.  You should explicitly preserve the method.</p> <pre><code>-keepclassmembers class mypackage.MyClass {\n    void myMethod(java.lang.String);\n}\n</code></pre> <p>3. Resources$NotFoundException: The application tries to access a resource by its name (typically with <code>Resources#getIdentifier</code>) instead of its numeric identifier, but DexGuard has removed or obfuscated the resource or its name. You should explicitly preserve the resource.</p> <pre><code>-keepresources drawable/my_icon\n</code></pre> <p>You can look at the generated files <code>bin/proguard/seeds.txt</code> and <code>bin/proguard/usage.txt</code> to check which classes and class members DexGuard has explicitly kept (due to the configuration), or removed (because they appeared unused).</p>"},{"location":"troubleshooting.html#processing","title":"Problems while processing","text":""},{"location":"troubleshooting.html#notes","title":"Notes and non-fatal warnings","text":"<p>DexGuard may print out some notes and non-fatal warnings. You can switch off these notes by specifying the <code>-dontnote</code> option.</p> Note: can't find dynamically referenced class '...' DexGuard can't find a class or interface that your code is accessing by   means of introspection. You should consider adding the jar that contains   this class. Note: '...' calls '(...)Class.forName(variable).newInstance()' Your code uses reflection to dynamically create class instances, with a   construct like <code>(MyClass)Class.forName(variable).newInstance()</code>. Depending   on your application, you may need to keep the mentioned classes with an   option like <code>-keep class MyClass</code>, or their implementations with an option like <code>-keep class * implements MyClass</code>. Note: '...' accesses a field/method '...' dynamically Your code uses reflection to find a field or a method, with a construct   like <code>.getField(\"myField\")</code>. Depending on your application, you may need   to figure out where the mentioned class members are defined and keep them   with an option like <code>-keep class MyClass { MyFieldType myField; }</code>.   Otherwise, DexGuard might remove or obfuscate them. You can switch off these notes by specifying the   <code>-dontnote</code> option. Note: '...' calls 'Class.get...', '...' calls 'Field.get...', or '...' calls 'Method.get...' Your code uses reflection to access metadata from the code, with an   invocation like <code>class.getAnnotations()</code>. You then generally need to   preserve optional class file attributes, which DexGuard   removes by default. These attributes contain information about annotations,   enclosing classes, enclosing methods, etc. In a summary in the log, DexGuard   provides a suggested configuration, like <code>-keepattributes   *Annotation*</code>. You should only switch off these notes    if you're certain the attributes are not necessary.   You can switch off these notes by specifying the   <code>-dontnote</code> option. Note: '...' calls 'WebView.addJavascriptInterface' for '...' DexGuard lists a number of constructs like   <code>webView.addJavascriptInterface(new MyInterfaceClass(),   \"myInterfaceName\")</code>. Such a construct means that the Javascript code in the   WebView can invoke methods in <code>MyInterfaceClass</code>. You should therefore let   DexGuard know not to remove or rename those methods. If the methods have been   annotated with <code>@JavascriptInterface</code> (as required as of Android SDK   17), the default configuration for Android   will take care of it. Otherwise, you have to keep the methods with an option   like <code>-keepclassmembers class MyInterfaceClass { public &lt;methods&gt;; }</code>.   You can switch off these notes by specifying the   <code>-dontnote</code> option. Note: the configuration refers to the unknown class '...' Your configuration refers to the name of a class that is not present in   the program jars or library jars. You should check whether the name is   correct. Notably, you should make sure that you always specify   fully-qualified names, not forgetting the package names. Note: the configuration keeps the entry point '...', but not the descriptor class '...' Your configuration contains a <code>-keep</code> option to preserve   the given method (or field), but no <code>-keep</code> option for the given class that   is an argument type or return type in the method's descriptor. You may then   want to keep the class too. Otherwise, DexGuard will obfuscate its name,   thus changing the method's signature. The method might then become   unfindable as an entry point, e.g. if it is part of a public API. You can   automatically keep such descriptor classes with the <code>-keep</code> option modifier   <code>includedescriptorclasses</code>   (<code>-keep,includedescriptorclasses</code> ...). You can switch off these notes by specifying the   <code>-dontnote</code> option. Note: the configuration explicitly specifies '...' to keep library class '...' Your configuration contains a <code>-keep</code> option to preserve   the given library class. However, you don't need to keep any library   classes. DexGuard always leaves underlying libraries unchanged. You can switch off these notes by specifying the   <code>-dontnote</code> option. Note: the configuration doesn't specify which class members to keep for class '...' Your configuration contains a   <code>-keepclassmembers</code>/<code>-keepclasseswithmembers</code>   option to preserve fields or methods in the given class, but it doesn't   specify which fields or methods. This way, the option simply won't have any   effect. You probably want to specify one or more fields or methods, as usual   between curly braces. You can specify all fields or methods with a wildcard   <code>*;</code>. You should also consider whether you just need the more common   <code>-keep</code> option, which preserves all specified classes and   class members. The overview of all <code>keep</code> options   can help. Note: the configuration specifies that none of the methods of class '...' have any side effects Your configuration contains an option   <code>-assumenosideeffects</code> to indicate that the   specified methods don't have any side effects. However, the configuration   tries to match all methods, by using a wildcard like \"<code>*;</code>\". This includes   methods from <code>java.lang.Object</code>, such as <code>wait()</code> and <code>notify()</code>. Removing   invocations of those methods will most likely break your application. You   should list the methods without side effects more conservatively. You can   switch off these notes by specifying the <code>-dontnote</code>   option. Note: duplicate definition of program/library class Your program jars or library jars contain multiple definitions of the   listed classes. DexGuard continues processing as usual, only considering the   first definitions.  The note may be an indication of some problem though,   so it's advisable to remove the duplicates. A convenient way to do so is by   specifying filters on the input jars or library jars. The standard Android and   DexGuard build processes automatically specify the input jars for you.   There may not be an easy way to filter them to remove   these notes. You could remove the duplicate classes manually from your   libraries.  You should also not add libraries to your application that are already part   of the Android runtime (notably <code>org.apache.commons.logging.Log</code>, <code>org.w3c.dom</code>, <code>org.xml.sax</code>,   <code>org.xmlpull.v1</code>, <code>org.apache.http</code>, and   <code>org.json</code>). They are possibly inconsistent, and the runtime libraries   would get precedence over these anyway. Warning: can't write resource '...' duplicate zip entry Your input jars contain multiple resource files with the same name.   DexGuard continues copying the resource files as usual, skipping any files   with previously used names.  Once more, the warning may be an indication of some problem, so it's advisable   to remove the duplicates. A convenient way to do so is by specifying filters   on the input jars. There is no option to switch off these warnings.   The standard Android and DexGuard build processes automatically specify the   input jars for you. There may not be an easy way to filter them to remove   these warnings. You could remove the duplicate resource files manually from   the input and the libraries."},{"location":"troubleshooting.html#warnings","title":"Serious warnings and I/O errors","text":"<p>DexGuard may terminate when it encounters parsing errors or I/O errors, or some more serious warnings:</p> Warning: can't find superclass or interface orWarning: can't find referenced class <p>A class in one of your program jars or library jars references a   class or interface that is missing from the input. The warning lists both   the referencing class(es), and the missing referenced class(es). There can be   a few causes, each with their own solutions:</p> <ol> <li> <p>If the missing class is referenced from your own code, you may     have forgotten to specify an essential library. Just like when     compiling all code from scratch, you must specify all libraries     that the code is referencing, directly or indirectly. If the     library should be processed and included in the output, you     should specify it with <code>-injars</code>, otherwise     you should specify it with <code>-libraryjars</code>.     For example, if DexGuard complains that it can't find a     <code>java.lang</code> class, you have to make sure that you are specifying     the runtime library of your platform. For Android, it is     typically packaged in <code>android.jar</code>.</p> </li> <li> <p>If the missing class is referenced from a pre-compiled     third-party library, and your original code runs fine without     it, then the missing dependency doesn't seem to hurt. The     cleanest solution is to filter out the     referencing class or classes from the input, with a filter     like      <code>-injars myapplication.jar(!somepackage/SomeUnusedReferencingClass.class)</code>\".     DexGuard will then skip this class entirely in the input, and it     will not bump into the problem of its missing reference.     However, you may then have to filter out other classes that are     in turn referencing the removed class. In practice, this works     best if you can filter out entire unused packages at once, with     a wildcard filter like     <code>-libraryjars mylibrary.jar(!someunusedpackage/**)</code>.</p> </li> <li> <p>Instead of filtering out the problematic classes, the      <code>-ignorewarnings</code> or     <code>-dontwarn</code> options can be used to let      DexGuard accept that there are classes missing. You should only     use these options if you are certain that your application works     without them.</p> </li> </ol> For example, if you're developing for Android, and DexGuard complains that it can't find a <code>java.awt</code> class, then some library that you are using is referencing <code>java.awt</code>. Android does not have this package,  so your application may not be using any <code>java.awt</code> classes anyway. In this case, it's not an issue that they are missing, and you can let DexGuard accept this with \"<code>-dontwarn java.awt.**</code>\". If the missing class is an Android runtime class, you should make sure that you are building against an Android runtime that is sufficiently recent. Warning: can't find referenced field/method '...' in program class '...' A program class is referencing a field or method that is missing from   another program class. The warning lists both the referencing class, and the   missing referenced class member. Your compiled class files are most likely   inconsistent. Possibly, some class file didn't get recompiled properly, or   some class file was left behind after its source file was removed. Try   removing all compiled class files and rebuilding your project. Warning: can't find referenced field/method '...' in library class '...' A program class is referencing a field or method that is missing from a   library class. The warning lists both the referencing class, and the missing   referenced class member. Your compiled class files are inconsistent with the   libraries. You may need to recompile the class files, or otherwise upgrade   the libraries to consistent versions. Alternatively, you may get away with ignoring the inconsistency   with the options <code>-ignorewarnings</code>   or even <code>-dontwarn</code>. For instance if the   code contains a class to optionally support recent versions of   Android, you can specify \"<code>-dontwarn mypackage.MySupportClass</code>\". Warning: can't find enclosing class/method If there are unresolved references to classes that are defined inside   methods in your input, once more, your compiled class files are likely   inconsistent. Possibly, some class file didn't get recompiled properly, or   some class file was left behind after its source file was removed. Try   removing all compiled class files and rebuilding your project. Warning: library class '...' depends on program class '...' If any of your library classes depend on your program classes, by   extending, implementing or just referencing them, your processed code will   generally be unusable.  Program classes can depend on library classes, but   not the other way around. Program classes are processed, while library   classes always remain unchanged. It is therefore impossible to adapt   references from library classes to program classes, for instance if the   program classes are renamed.  You should define a clean separation between   program code (specified with <code>-injars</code>) and library code   (specified with <code>-libraryjars</code>). Warning: class file '...' unexpectedly contains class '...' The given class file contains a definition for the given class, but the   directory name of the file doesn't correspond to the package name of the   class. DexGuard will accept the class definition, but will not write out   the processed version. Please make sure to package your input classes correctly.    Notably, class files that are in the <code>WEB-INF/classes</code> directory in a WAR should    be packaged in a jar and put in the <code>WEB-INF/lib</code> directory.    If you don't mind these classes not being written to the output,   you can specify the <code>-ignorewarnings</code> option,   or even the <code>-dontwarn</code> option. Warning: '...' is not being kept as '...', but remapped to '...' There is a conflict between a <code>-keep</code> option and the   mapping file specified with an <code>-applymapping</code>   option, in the obfuscation step. The given class name or class member name   can't be kept by its original name, as specified in the configuration, but   it has to be mapped to the other given name, as specified in the mapping   file. You should adapt your configuration, or your mapping file to remove the   conflict. Alternatively, if you're sure the renaming won't hurt, you can   specify the <code>-ignorewarnings</code> option, or even the   <code>-dontwarn</code> option. Warning: field/method '...' can't be mapped to '...' There is a conflict between some new program code and the mapping file   specified with an <code>-applymapping</code> option, in the   obfuscation step. The given class member can't be mapped to the given name,   because it would conflict with another class member that is already being   mapped to the same name. This can happen if you are performing incremental   obfuscation, and applying an obfuscation mapping file from an initial   obfuscation step. For instance, some new class may have been added that   extends two existing classes, introducing a conflict in the name space of   its class members. If you're sure the class member receiving another name   than the one specified won't hurt, you can specify the   <code>-ignorewarnings</code> option, or even the   <code>-dontwarn</code> option. Note that you should always use the   <code>-useuniqueclassmembernames</code> option in   the initial obfuscation step, in order to reduce the risk of conflicts. Warning: not encrypting kept class '...' Your configuration contains options <code>-keep</code> and   <code>-encryptclasses</code> to keep and to encrypt the   given class. This would most likely result in broken code, since an   encrypted class is no longer a valid entry point. To avoid problems, the class   won't be encrypted. You can suppress this warning by specifying the   <code>-dontwarn</code> option. Warning: not encrypting class '...', referenced from a resource file Your configuration contains the option   <code>-encryptclasses</code> to encrypt the given class,   which is also referenced from a resource file.   This would most likely result in broken code, since an   encrypted class is no longer a valid entry point. To avoid problems, the class   won't be encrypted. You can suppress this warning by specifying the   <code>-dontwarn</code> option. Warning: not encrypting class '...', extended by the unencrypted class '...' Your configuration contains the option   <code>-encryptclasses</code> to encrypt the given class, but    the class is extended from by another, unencrypted class.   The former class can't be encrypted either, for technical   reasons. You can suppress this warning by specifying the   <code>-dontwarn</code> option. Warning: not encrypting class '...', referenced in a method descriptor Your configuration contains the option   <code>-encryptclasses</code> to encrypt the given class, but   the class is referenced in the descriptor (argument types)   of a method that occurs in encrypted and in unencrypted classes. Such a   descriptor class can't be encrypted, for technical reasons. You can suppress   this warning by specifying the <code>-dontwarn</code> option. Error: Unsupported class version number You are trying to process class files compiled for a recent version of   Java that your copy of DexGuard doesn't support yet. You   should check if a new release of DexGuard is available that solves the   compatibility issues. IOException: Can't process resource XML file '...' (Not a binary Android resource XML file) You are probably processing an Android library project, while specifying a   configuration for an Android application project.  Library projects contain   Android resource XML files in text form, while application projects contain   them in compiled binary form. Mixing up the project type causes parsing   problems.  For example, in your <code>build.gradle</code> file, you should point to the   default configuration <code>dexguard-library-release.pro</code> instead of   <code>dexguard-release.pro</code>. Technically, the former contains the option   <code>-android</code> (intended for Android libraries), while the latter contains the   option <code>-dalvik</code> (intended for Android applications). IOException: Can't write resource ['...'.so]: New string section exceeds the length of the original This is a rare problem, where the combined obfuscated native function   names are longer than the original native function names. You can generally   work around it by reducing the obfuscation of the JNI methods: <pre><code>-keepclassmembernames class * {\n    native &lt;methods&gt;;\n}\n</code></pre> <p>If this isn't sufficient, you can disable the obfuscation of the JNI   methods entirely:</p> <pre><code>-keepclasseswithmembernames,includedescriptorclasses class * {\n    native &lt;methods&gt;;\n}\n</code></pre> If ever necessary, you can leave native libraries untouched with the   following configuration, before the default configuration: <pre><code>-adaptresourcefilecontents !lib/**.so\n</code></pre> <p>The default configurations <code>dexguard-release-conservative.pro</code> and   <code>dexguard-library-release-conservative.pro</code> contain these settings.</p> Error: You have to specify <code>-keep</code> options You either forgot to specify <code>-keep</code> options, or you   mistyped the class names. DexGuard has to know exactly what you want to   keep: an application, an applet, a servlet, a midlet,..., or any combination   of these. Without the proper seed specifications, DexGuard will shrink,   optimize, or obfuscate all class files away. Error: Expecting class path separator ';' before 'Files\\Java\\...' (in Windows) If the path of your runtime jar contains spaces, like in \"Program Files\",   you have to enclose it with single or double quotes, as explained in the   section on file names. This is true for all   file names containing special characters, on all platforms. Error: Can't read '...' DexGuard can't read the specified file or directory. Double-check that the   name is correct in your configuration, that the file is readable, and that   it is not corrupt. An additional message \"Unexpected end of ZLIB input   stream\" suggests that the file is truncated. You should make sure that   the file is complete on disk when DexGuard starts, and that it is not    somehow overwritten by DexGuard's own output. Error: Can't write '...' DexGuard can't write the specified file or directory. Double-check that   the name is correct in your configuration and that the file is writable. No such property: '...' The DexGuard plugin can't find a property in Gradle or in the Android   plugin. You should verify if the versions of the plugins are compatible. If   you are using an older version of the Android plugin than the documented   version, you should upgrade. If you are using a more recent version, you   should check if a new release of DexGuard is available that solves the   compatibility issues."},{"location":"troubleshooting.html#other-errors","title":"Other errors","text":"OutOfMemoryError You can try increasing the heap size of the Java virtual machine, with the usual <code>-Xmx</code> options. <ul> <li>In Java, specify the option as an argument to the JVM: <code>java -Xmx1024m</code></li> </ul> <ul> <li>In Gradle, you can pass this option to DexGuard using the jvmArgs property of the DexGuard Gradle block.</li> </ul> <p>You can also reduce the amount of memory that DexGuard needs by   removing unnecessary library jars from your configuration, or by   filtering out unused library packages and classes.</p> StackOverflowError This error might occur when processing a large code base.   In theory, increasing the stack size   of the Java virtual machine (with the usual <code>-Xss</code> option) should help.   In practice however, the <code>-Xss</code> setting doesn't have any effect on the main   thread, due to Sun Bug   #4362291. As a result,   this solution will only work when running DexGuard in a different thread. Unexpected error DexGuard has encountered an unexpected condition, typically in the   optimization step. It may or may not recover. You should be able to avoid it   using the <code>-dontoptimize</code> option. In any case,   please report the problem, preferably with the simplest example that causes   DexGuard to crash. Otherwise... Maybe your class files are corrupt. See if recompiling them and trying   again helps. If not, please report the problem, preferably with the simplest   example that causes DexGuard to crash."},{"location":"troubleshooting.html#afterprocessing","title":"Unexpected observations after processing","text":"<p>If DexGuard seems to run fine, but your processed code doesn't look right, there might be a couple of reasons:</p> Disappearing classes If you are working on Windows and it looks like some classes have   disappeared from your output, you should make sure you're not writing your   output class files to a directory (or unpacking the output jar). On   platforms with case-insensitive file systems, such as Windows, unpacking   tools often let class files with similar lower-case and upper-case names   overwrite each other. If you really can't switch to a different operating   system, you could consider using DexGuard's   <code>-dontusemixedcaseclassnames</code> option. You should make sure your class files are in directories that   correspond to their package names. DexGuard will read misplaced class files,   but it will not write their processed versions. Notably, class   files that are in the <code>WEB-INF/classes</code> directory in a WAR should be   packaged in a jar and put in the <code>WEB-INF/lib</code> directory. Classes or class members not being kept If DexGuard is not keeping the right classes or class members, make sure   you are using fully qualified class names. If the package name of some class   is missing, DexGuard won't match the elements that you might be expecting.   It may help to double-check for typos too. You can use the   <code>-printseeds</code> option to see which elements are being   kept. If you are using marker interfaces to keep other classes, the marker   interfaces themselves are probably being removed in the shrinking   step. You should therefore always explicitly keep any marker   interfaces, with an option like   <code>-keep interface MyMarkerInterface</code>. Similarly, if you are keeping classes based on annotations, you may   have to avoid that the annotation classes themselves are removed in   the shrinking step. You should package the annotation classes as a   library, or explicitly keep them in your program code with an option   like \"<code>-keep @interface *</code>\".  Please note that for DexGuard to see runtime-invisible annotations, you currently have to    implement the workaround for runtime-invisible annotations. Class names not being obfuscated If the names of some classes in your obfuscated code aren't obfuscated, you   should first check all your configuration files. Chances are that some   <code>-keep</code> option is preserving the original names. These options may be hiding   in your own configuration files or in configuration files from libraries. Furthermore, some class names mentioned in the Android manifest must always   be preserved, to avoid compatibility issues when upgrading versions of the   app. More specifically, DexGuard automatically keeps the names of exported   activities, broadcast receivers and services. You can find the underlying   reasons in the Google blog \"Things that cannot   change\". Field names not being obfuscated If the names of some fields in your obfuscated code aren't obfuscated, this   may be due to <code>-keep</code> options preserving the original names, for the sake of   libraries like GSON. Such libraries perform reflection on the fields. If the   names were obfuscated, the resulting JSON strings would come out obfuscated   as well, which generally breaks persistence of the data or communication   with servers. Method names not being obfuscated If the names of some methods in your obfuscated code aren't obfuscated, this   is most likely because they extend or implement method names in the   underlying runtime libraries. Since the runtime libraries are not obfuscated,   any corresponding names in the application code can't be obfuscated either,   since they must remain consistent. Variable names not being obfuscated If the names of the local variables and parameters in your obfuscated code   don't look obfuscated, because they suspiciously resemble the names of their   types, it's probably because the decompiler that you are using is coming up   with those names. DexGuard's obfuscation step does remove the original names   entirely, unless you explicitly keep the <code>LocalVariableTable</code> or   <code>LocalVariableTypeTable</code> attributes. Strings not being encrypted If you have applied <code>-encryptstrings</code>, but the   specified strings are still readable when you disassemble the code, you   should make sure that obfuscation is enabled. Obfuscation is only the   default for release builds. With the <code>-verbose</code> option,   DexGuard reports how many strings it has encrypted in the build log.   Furthermore, you should check how you have specified the strings: string   literals, all the strings in specified classes, all the strings in specified   methods, or all the uses of specified string constants. Note that the Java   compiler inlines string constants wherever they are used. If you   explicitly keep a final string field with <code>-keep</code>, its   uses may be encrypted, but its definition is preserved without encryption. Classes not being encrypted If you have applied <code>-encryptclasses</code>, but the   specified classes are still readable when you disassemble the code, you   should make sure that obfuscation is enabled. Obfuscation is only the   default for release builds. With the <code>-verbose</code> option,   DexGuard reports how many classes it has encrypted in the build log.   Due to technical constraints, classes that are created by reflection can't   be encrypted. This can be reflection in your application (e.g. for   deserialization) or in the Android runtime (e.g. activities, layouts, etc.).   DexGuard will avoid encrypting such classes and print out warnings about it.   The recommended solution is to move sensitive code to separate (inner)   classes and encrypt those. Native libraries not being encrypted If you have applied   <code>-encryptnativelibraries</code>, but the   specified native libraries are not encrypted (for instance, they still   clearly start with \"ELF\"), you should make sure that obfuscation is   enabled. Obfuscation is only the default for release builds. Furthermore,   you should make sure that your code loads each native library with   <code>System.loadLibrary(\"String\")</code> or <code>System.load(String)</code>, with the library  specified as a   string literal or constant or with . With the <code>-verbose</code> option,   DexGuard then reports in the build log how many native libraries it has   encrypted. Assets not being encrypted If you have applied <code>-encryptassetfiles</code>,   but the specified assets remain readable inside the processed application,   you should make sure that obfuscation is enabled. Obfuscation is only   the default for release builds.  Furthermore, you should make sure that your   code loads each asset file with <code>AssetManager#open(\"myfile\")</code>, with the file   name specified as a string literal or constant. With the   <code>-verbose</code> option, DexGuard then reports in the build   log how many asset files it has encrypted. Access to wrong classes reflected If you have applied <code>-accessthroughreflection</code>,   using a wildcard class specification together with a member specification,   DexGuard will reflect the access to any class matching the class specification,   regardless if the member specification matches or not (contrary to other configuration   directives). Additionally, all access to matching members is reflected. You should   make sure that the class specification only matches classes that need to be   accessed through reflection. Library project is not obfuscated when consumed by app If you have applied DexGuard to a library module that is consumed by an   application module in the same project, the library module may seem unaffected   by DexGuard. This is not the case. What happened is that since the Android   gradle plugin v3.0, the library module's aar file is no longer exploded. Instead,   the intermediate files are used. Since DexGuard outputs an obfuscated aar, the   files the Android gradle plugin uses are not processed by DexGuard. In order to   work around this issue, refer to the setup of the <code>AssetEncryptionLibrary</code> and   <code>NativeLibraryInLibraryProject</code> samples provided with your DexGuard download."},{"location":"troubleshooting.html#installing","title":"Problems while installing an Android application","text":"<p>If DexGuard runs fine, but <code>adb install</code> refuses to install your processed application, it should print out one of the following error messages:</p> Failure [INSTALL_PARSE_FAILED_MANIFEST_MALFORMED] In a custom build process, you need to specify some attribute names that   the obfuscation step needs to preserve in the Android manifest file, with   the option   <code>-keepresourcexmlattributenames</code>. Failure [INSTALL_PARSE_FAILED_NO_CERTIFICATES] On Android 2.2 or older, if you also see \"Package ... has no certificates   at entry ...; ignoring!\" in the logcat output, your application may contain   file names with special UTF-8 characters. You then need to avoid file name   dictionaries with such characters (including the default file name   dictionary). You can specify or override it with the option   <code>-resourcefilenameobfuscationdictionary</code>   with your own text file. You can specify an empty file, so DexGuard just   continues with a, b, c, etc. File upload has failed for the Samsung app market If you get \"File upload has failed. There is no application   ID(PackageName) or Version information(VersionName) in the Android   Manifest.xml file you have registered.\" while publishing your Android   application on the Samsung app market, then you need to preserve additional   XML attribute names. File upload has failed for AirWatch If you get \"System.IndexOutOfRangeException: Index was outside the bounds of   the array.\" while publishing your Android application to AirWatch, then you need   to preserve additional XML attribute names: <p><code>-keepresourcexmlattributenames manifest/package,manifest/versionName</code></p> <p>and add the following to your <code>gradle.properties</code> in the root project folder:</p> <pre><code>  android.enableAapt2=false\n  systemProp.encode.resourcexml.utf16=true\n</code></pre>"},{"location":"troubleshooting.html#runtime","title":"Problems at runtime","text":"<p>If DexGuard runs fine, but your processed application doesn't behave as expected, there might be several reasons:</p>"},{"location":"troubleshooting.html#general-runtime-issues","title":"General runtime issues","text":"<code>\"You are using a shell runtime library ...\"</code> message in the App or in the logcat If you see the \"You are using a shell runtime library, make sure to process your application with DexGuard before releasing!\"    message when you open the app or in the logcat, that means you include the DexGuard runtime library    (<code>dexguard-runtime.aar</code>) as a dependency in your app but 1) you have the <code>-dontobfuscate</code> option in    your DexGuard configuration file, or 2) your app is built in debug mode, or 3) the app hasn't been   protected by DexGuard yet.    To troubleshoot and remove this message, you can follow the steps below:  <ul> <li>Step 1: Look for the option <code>-dontobfuscate</code> in your DexGuard configuration file. If you find this option,                  delete it or comment it out by adding a <code>#</code> sign right before the option.</li> <li>Step 2: Verify that you don't have <code>defaultConfiguration 'dexguard-debug.pro'</code> in the release variant                 of the <code>dexguard</code> block in your <code>build.gradle</code> file. If you have the <code>dexguard-debug.pro</code> as                 a default configuration in the release variant, please replace it with either the <code>dexguard-release.pro</code>                 or <code>dexguard-release-aggressive.pro</code> default configuration if you are building an app or                  <code>dexguard-library-release.pro</code> or <code>dexguard-library-release-aggressive.pro</code> default configuration                 if you are building a library. </li> <li>Step 3: Verify that you are building and testing your app in release mode. Please note that if                  you are testing your app using the \"Play\" or \"Debug\" button in Android Studio, your app                  might be built in debug mode, and hence, it is very likely that the app hasn't been                  protected by DexGuard yet. To verify that DexGuard has protected the app, you can try installing                 the app binary generated by the <code>./gradlew clean assembleRelease</code> or <code>./gradlew clean bundleRelease</code>                 command, and check whether the \"You are using a shell runtime library ...\" no longer shows up.</li> </ul> Stack traces without class names or line numbers If your stack traces don't contain any class names or lines numbers, even   though you are keeping the proper attributes, make sure this debugging   information is present in your compiled code to start with. Notably the Ant   <code>javac</code> task has debugging information switched off by default. NoClassDefFoundError Your class path is probably incorrect. It should at least contain all   library jars, and your processed program jar. ClassNotFoundException Your code is probably calling <code>Class.forName</code>, trying to create the   missing class dynamically. DexGuard can only detect constant name arguments,   like <code>Class.forName(\"com.example.MyClass\")</code>. For variable name arguments   like <code>Class.forName(someClass)</code>, you have to keep all possible classes using   the appropriate <code>-keep</code> option, e.g. <code>-keep class   com.example.MyClass</code> or <code>-keep class * implements   com.example.MyInterface</code>. While setting up your configuration, you can   specify the option   <code>-addconfigurationdebugging</code> to help   track down these cases at runtime and let the instrumented code suggest   settings for them. NoSuchFieldException Your code is probably calling something like <code>myClass.getField</code>, trying to   find some field dynamically. Since DexGuard can't always detect this   automatically, you have to keep the missing field using the appropriate   <code>-keep</code> option, e.g. \"<code>-keepclassmembers class   mypackage.MyClass { int myField; }</code>\". While setting up your configuration,   you can specify the option   <code>-addconfigurationdebugging</code> to help   track down these cases at run-time and let the instrumented code suggest   settings for them. NoSuchMethodException Your code is probably calling something like <code>myClass.getMethod</code>, trying to   find some method dynamically. Since DexGuard can't always detect this   automatically, you have to keep the missing method using the appropriate   <code>-keep</code> option, e.g. <code>-keepclassmembers class   com.example.MyClass { void myMethod(); }</code>. While setting up your   configuration, you can specify the option   <code>-addconfigurationdebugging</code> to help   track down these cases at run-time and let the instrumented code suggest   settings for them. UnsatisfiedLinkError: Couldn't load '...': findLibrary returned null Your code is failing to load or find a native library from bytecode.   DexGuard may have shrunk the native library, since it   can't always detect all usages automatically. You have to keep the   native library using the appropriate   <code>-keepresourcefiles</code> option, e.g.   <code>-keepresourcefiles lib/*/libexample.so</code>. Failed registering methods for '...' A native library in your application is calling <code>RegisterNatives</code>, trying   to link JNI methods (in bytecode) with JNI functions (in native code). The   call generally uses hard-coded method names. However, DexGuard can't detect   and handle such calls automatically, so it may have obfuscated these method   names in the bytecode. The call then fails. Like with any reflection, you   need to preserve the referenced method names using the appropriate   <code>-keep</code> option, e.g. <code>-keep class package.MyJniClass {   native &lt;methods&gt;; }</code>. MissingResourceException or NullPointerException Your processed code may be unable to find some resource files. DexGuard   simply copies resource files over from the input jars to the output jars.   Their names and contents remain unchanged, unless you specify the options   <code>-adaptresourcefilenames</code> and/or   <code>-adaptresourcefilecontents</code>.   Furthermore, directory entries in jar files aren't copied, unless you   specify the option <code>-keepdirectories</code>. Note that   Sun advises against calling <code>Class.getResource()</code> for directories (Sun Bug   #4761949](http://bugs.sun.com/view_bug.do?bug_id=4761949)). Resources$NotFoundException: Resource ID #0x0 Your Android application is probably calling <code>resources.getIdentifier</code>,   <code>resources.getValue</code>, <code>resources.getDrawable</code>, or a similar method that   retrieves a resource by its name and type. Just like with reflection on   class names, you have to keep this resource with its original name,   using the appropriate <code>-keepresources</code> option,   e.g. <code>-keepresources drawable/my_icon</code> or <code>-keepresources layout/*</code>.   Whenever possible in your code, you should reference resources by their more   efficient numeric identifiers from the <code>R</code> classes, which don't require any   configuration. Fragment$InstantiationException You may be encrypting a Fragment class in your Android application. When   DexGuard encrypts classes, it makes sure that they are decrypted the first   time they are instantiated or accessed. This is not possible for classes   that are instantiated through reflection, such as Fragment classes. A   workaround may be to access the class early on in the application, e.g.   <code>Class c = MyFragment.class;</code> This should let the application decrypt and   load the class before the Android support classes try to access it. FileNotFoundException Your Android application may be calling <code>assetManager.open</code>,   <code>assetManager.openFd</code>, or a similar method that retrieves an asset file.   DexGuard can't always detect this automatically. Just like with reflection   on resources, you then have to keep this asset with its original name, using   the appropriate <code>-keepresourcefiles</code> option,   e.g. <code>-keepresourcefiles assets/my_icon.png</code>. ArrayStoreException: sun.reflect.annotation.EnumConstantNotPresentExceptionProxy You are probably running code that has been processed for Android on a Java   virtual machine. If the code contains annotations with obfuscated enum   values, the Java VM and the Android VM behave differently in a subtle way.   If you do want to test such processed code on a Java VM, you should preserve   the names of the enum types: <code>-keepnames enum *</code>. Disappearing annotations By default, the obfuscation step removes all annotations. If your   application relies on annotations to function properly, you should   explicitly keep them with <code>-keepattributes *Annotation*</code>. Invalid or corrupt jarfile You are probably starting your application with the java option <code>-jar</code>   instead of the option <code>-classpath</code>. The java virtual machine returns with   this error message if your jar doesn't contain a manifest file   (<code>META-INF/MANIFEST.MF</code>), if the manifest file doesn't specify a main class   (<code>Main-Class:</code> ...), or if the jar doesn't contain this main class. You   should then make sure that the input jar contains a valid manifest file to   start with, that this manifest file is the one that is copied (the first   manifest file that is encountered), and that the main class is kept in your   configuration, InvalidJarIndexException: Invalid index At least one of your processed jar files contains an index file   <code>META-INF/INDEX.LIST</code>, listing all class files in the jar. DexGuard by   default copies files like these unchanged. DexGuard may however remove or   rename classes, thus invalidating the file. You should filter the index file   out of the input (<code>-injars in.jar(!META-INF/INDEX.LIST)</code>) or update the file   after having applied DexGuard (<code>jar -i out.jar</code>). Disappearing loops If your code contains empty busy-waiting loops, DexGuard's optimization   step may remove them. More specifically, this happens if a loop continuously   checks the value of a non-volatile field that is changed in a different   thread. The specifications of the Java Virtual Machine require that you   always mark fields that are accessed across different threads without   further synchronization as <code>volatile</code>. If this is not possible for some   reason, you'll have to switch off optimization using the   <code>-dontoptimize</code> option. SecurityException: SHA1 digest error You may have forgotten to sign your program jar after having processed   it with DexGuard. ClassCastException: class not an enumIllegalArgumentException: class not an enum type You should make sure you're preserving the special methods of enumeration   types, which the runtime environment calls by introspection. The required   options are shown in the examples. ArrayStoreException: sun.reflect.annotation.EnumConstantNotPresentExceptionProxy You are probably processing annotations involving enumerations. You   should make sure you're preserving the special methods of the enumeration   type, as shown in the examples. ClassFormatError: Invalid index in LocalVariableTable in class file If you are keeping the <code>LocalVariableTable</code> or <code>LocalVariableTypeTable</code>   attributes, DexGuard's optimizing step is sometimes unable to update them   consistently. You should let the obfuscation step remove these   attributes or disable the optimization step. NullPointerException: create returned null (Dagger)IllegalStateException: Module adapter for class ... could not be loaded. Please ensure that code generation was run for this module.IllegalStateException: Could not load class ... needed for binding members/... Dagger 1 relies on reflection to combine annotated base classes and their   corresponding generated classes. DexGuard's default configuration already   preserves the generated classes, but you still preserve the annotated base   classes in your project-specific configuration. This is explained in some   more detail in the Dagger example. VerifyError Verification errors when executing a program are almost certainly   the result of a bug in the optimization step of DexGuard. Make sure   you are using the latest version. You should be able to work around   the problem by using the   <code>-dontoptimize</code> option."},{"location":"troubleshooting.html#espresso","title":"Problems with Espresso tests","text":"<p>This is a collection of the most common errors that occur when applying DexGuard to your Espresso test and how you can fix them. Please make sure your tests work without DexGuard first and that you have read the best practices section on applying DexGuard to your Espresso tests before you read any further.</p> No tests found. This usually means that your test classes are not in the form that your test runner expects   (e.g. don't inherit from TestCase or lack @Test annotations). This is caused by the fact that DexGuard's shrinking has removed a part of the standard library    from your application which Espresso depends on. Including the <code>dexguard-espresso.pro</code> default    configuration should prevent this from happening. NoClassDefFoundError, NoSuchFieldError or NoSuchMethodError These errors usually mean that you use functionality from the application under test in your Espresso test.   Avoiding this is the preferred solution, but if that's not possible adding the appropriate keep rules to    the application being tested will solve your problem. Resources$NotFoundException This exception usually means that a resource you reference in your Espresso test has been optimized by    DexGuard and can no longer be found as a result. Ideally, you avoid this situation entirely, but if you   cannot, using the <code>dexguard-espresso-no-resource-optimizations.pro</code> will likely resolve the issue. AmbiguousViewMatcherException, NoMatchingViewException or DefaultFailureHandler$AssertionFailedWithCauseError: 'with string from resource id: ...' doesn't match the selected view These messages mean Espresso is unable to get the right view for the current test.    This is likely caused by the resource optimizations DexGuard performs on them.   Including the <code>dexguard-espresso-no-resource-optimizations.pro</code> default configuration    should solve the problem. IncompatibleClassChangeError When you get this error it means DexGuard optimized a part of the code in your application that you are   trying to access in your test. This is discouraged, but can be solved by including the   <code>dexguard-espresso-aggressive-optimizations.pro</code> default configuration which will disable the specific   optimization causing this error. Failed to find the generated JsonAdapter class for class This error occurs when using Moshi codegen which tries to access generated classes through reflection.    Include <code>/lib/dexguard-moshi.pro</code> in your configuration file to fix this issue."},{"location":"usage.html","title":"Reference Guide","text":"<p>DexGuard is compatible with ProGuard configuration. The sections below provide more details, with the new options compared to ProGuard highlighted.</p>"},{"location":"usage.html#iooptions","title":"Input/Output Options","text":"<code>@</code> filename Short for '<code>-include</code> filename'. <code>-include</code> filename Recursively reads configuration options from the given file filename. <code>-basedirectory</code> directoryname Specifies the base directory for all subsequent relative file names in   these configuration arguments or this configuration file. <code>-injars</code>[,feature_name] class_path Specifies the input jars (or apks, aabs, aars, wars, ears, jmods, zips, or   directories) of the application to be processed. The class files in these   jars will be processed and written to the output jars. By default, any   non-class files will be copied without changes. Please be aware of any   temporary files (e.g. created by IDEs), especially if you are reading your   input files straight from directories. An optional feature name specifies how   the contents should be grouped and packaged, notably for dynamic features in   Android app bundles. The entries in the class path can be filtered, as   explained in the filters section. For better readability,   class path entries can be specified using multiple   <code>-injars</code> options. <code>-outjars</code> class_path Specifies the names of the output jars (or apks, aabs, aars, wars, ears,   jmods, zips, or directories). The processed input of the preceding   <code>-injars</code> options will be written to the named jars. This   allows you to collect the contents of groups of input jars into   corresponding groups of output jars. In addition, the output entries can be   filtered, as explained in the filters section. Each   processed class file or resource file is then written to the first output   entry with a matching filter, within the group of output jars. You must   avoid letting the output files overwrite any input files. For better   readability, class path entries can be specified using multiple   <code>-outjars</code> options. Without any   <code>-outjars</code> options, no jars will be written. <code>-libraryjars</code> class_path Specifies the library jars (or apks, aabs, aars, wars, ears, jmods, zips,   directories) of the application to be processed. The files in these jars   will not be included in the output jars. The specified library jars should   at least contain the class files that are extended by application class   files. Library class files that are only called needn't be present,   although their presence can improve the results of the optimization step.   The entries in the class path can be filtered, as explained in the   filters section. For better readability, class path entries   can be specified using multiple <code>-libraryjars</code>   options. Please note that the boot path and the class path set for running   DexGuard are not considered when looking for library classes. This means   that you explicitly have to specify the run-time jar that your code will   use. <code>-androidsdk</code> [directory] Specifies the path to the Android SDK directory. DexGuard can use this   to automatically read the Android platform jars matching the SDK versions   found in the manifest. <code>-abifilter</code> abi_list <p>Specifies a list of ABIs for native libraries that DexGuard generates.    By default, DexGuard determines the output ABIs based on the native libraries   in the input. If the input does not contain any native libraries, this option   can be used to specify the ABIs generated by DexGuard.</p> <p>The option is only applicable if the input application or library does not contain native libraries.</p> <p>abi_list is a comma separated list of ABIs that can include <code>x86</code>, <code>x86_64</code>, <code>arm64-v8a</code>, <code>armeabi-v7a</code>.</p> <code>-skipnonpubliclibraryclasses</code> Specifies to skip non-public classes while reading library jars, to speed   up processing and reduce memory usage of DexGuard. By default, DexGuard   reads non-public and public library classes alike. However, non-public   classes are often not relevant, if they don't affect the actual program code   in the input jars. Ignoring them then speeds up DexGuard, without affecting   the output. Unfortunately, some libraries, including recent JSE run-time   libraries, contain non-public library classes that are extended by public   library classes. You then can't use this option. DexGuard will print out   warnings if it can't find classes due to this option being set. <code>-dontskipnonpubliclibraryclasses</code> Specifies not to ignore non-public library classes. As of version 4.5,   this is the default setting. <code>-dontskipnonpubliclibraryclassmembers</code> Specifies not to ignore package visible library class members (fields and   methods). By default, DexGuard skips these class members while parsing   library classes, as program classes will generally not refer to them.   Sometimes however, program classes reside in the same packages as library   classes, and they do refer to their package visible class members. In those   cases, it can be useful to actually read the class members, in order to make   sure the processed code remains consistent. <code>-keepdirectories</code> [directory_filter] Specifies the directories to be kept in the output jars (or apks, aabs,   aars, wars, ears, jmods, zips, or directories). By default, directory   entries are removed. This reduces the jar size, but it may break your   program if the code tries to find them with constructs like   \"<code>com.example.MyClass.class.getResource(\"\")</code>\". You'll then want to keep the   directory corresponding to the package, \"<code>-keepdirectories com.example</code>\". If   the option is specified without a filter, all directories are kept. With a   filter, only matching directories are kept. For instance, \"<code>-keepdirectories   mydirectory</code>\" matches the specified directory, \"<code>-keepdirectories   mydirectory/*</code>\" matches its immediate subdirectories, and \"<code>-keepdirectories   mydirectory/**</code>\" matches all of its subdirectories. <code>-multidex</code> Deprecated: this option is now applied automatically.   Specifies that classes should split across multiple dex files, if the main   <code>classes.dex</code> file has grown beyond the constraints of the dex format. The   typical breaking point is more than 64K method IDs, triggered by large   external libraries. The corresponding warning sign from the <code>dx</code> compiler is   \"Unable to execute dex: method ID not in [0, 0xffff]: 65536\"). This option   relies on the Android run-time and the optional Android multidex support   library to glue the dex files back together when the application is run.   This means that you should still add a dependency on   <code>com.android.support:multidex:*</code> in your project, and let your Android   manifest or application refer to it. Only applicable when targeting Android   with the <code>-dalvik</code> option. Performance tip: Dynamically loading   classes this way introduces some overhead when the application is started.   You should preferably check if the shrinking step doesn't reduce the code to   an acceptable size again. Note that you can also apply shrinking in debug   builds\u2014see the documentation for the various plugins. <code>-printmaindexlist</code> [filename] Specifies to print the list of classes that are placed into the main dex   and why they need to be stored there. The list is printed to the standard    output or to the given file. Only applicable when the application has    multiple dex files. <code>-printcodepushmapping</code> Print the CodePush mapping file.   This file contains necessary information for encrypting CodePush Hermes assets. <code>-applycodepushmapping</code> Reuse the given CodePush mapping. Necessary for processing CodePush Hermes assets updates. <code>-dontencrypthermesassetfile</code> If your application uses Hermes, the Hermes asset will be automatically encrypted.   Use this option if you want to opt out of this. <code>-instantappfeature</code> name activity URL Specifies one feature of an Instant App to be created. If you specify one or   more of these options, DexGuard automatically transforms your traditional   installed app into an Instant App, based on all specified features. It   partitions and adapts the code, the Android manifest files, and the   resources. It packages the features in separate apk files. Each option   specifies a feature name, the activity that is the entry point of the   feature, and a URL to access the feature. If many features depend on an   activity, you can specify an empty feature name ('') to package it in the   base apk. If two activities are closely related, you can also package them   in the same feature. The Instant App example   illustrates the option. <code>-splitdimensions</code> [dimension_filter] Deprecated: split dimensions are now automatically read directly from an app bundle so this option is no longer required Specifies a filter for dimensions of resources (\"abi\", \"density\", \"language\").   The default is to split along these three dimensions. <code>-dontcompress</code> [file_filter] Specifies files that should not be compressed in output archives (apks,   aabs, jars, aars, wars, ears, jmods, or zips). Some environments or   applications may then be able to map the files into memory. For example, the   Android run-time can access uncompressed images or raw files efficiently,   reducing the amount of RAM that is required. This option is generally   combined with the <code>-zipalign</code> option below, to specify the   optimal alignment of the data. The option is mostly relevant when   processing an Android app or creating an app   bundle. <code>-zipalign</code> n Specifies the number of bytes to which uncompressed data in output   archives should be aligned. For example, the Android run-time can access   uncompressed images or raw files efficiently if they are aligned to 4 bytes.   This option should be combined with the <code>-dontcompress</code>   option above, to specify which files should not be compressed. <code>-target</code> version <p>Specifies the version number to be set in the processed class files. The   version number can be one of <code>1.0</code>,..., <code>1.9</code>, or the more recent short   numbers <code>5</code>,..., <code>12</code>. By default, the version numbers of the class files   are left unchanged. You can also downgrade class files to older versions   than Java 8. DexGuard changes their version numbers and backports Java 8   constructs. DexGuard generally doesn't backport changes in the Java runtime,   except for the Java 8 stream API and the Java 8 date API, if you add the   backported libraries <code>net.sourceforge.streamsupport</code> and <code>org.threeten</code> as   input, respectively.</p> <p>Note: When targeting Android with the <code>-dalvik</code> option, this option has the following effect:</p> <ul> <li>1.6: targeting Android 4.3- devices, backporting any Java 7/8 features.</li> <li>1.7 (default): targeting Android 4.4+ devices, backporting Java 8 features.</li> <li>1.8: targeting Android 7.0+ devices, backporting lambda expressions,   using Dex format 037.</li> </ul> <p>Note: When building Android applications, the property <code>minSdkVersion</code> contained in the <code>AndroidManifest.xml</code> is taken into account to properly setup the target setting. In general it is not necessary to specify a custom <code>-target</code> setting on your own.</p> <code>-forceprocessing</code> Specifies to process the input, even if the output seems up to date. The   up-to-dateness test is based on a comparison of the date stamps of the   specified input, output, and configuration files or directories."},{"location":"usage.html#keepcodeoptions","title":"Keep Options for Code","text":"<code>-keep</code> [,modifier,...] class_specification Specifies classes and class members (fields and methods) to be preserved   as entry points to your code. For example, in order to keep an   application, you can specify the main class along   with its main method. In order to process a library,   you should specify all publicly accessible elements. <code>-keepclassmembers</code> [,modifier,...] class_specification Specifies class members to be preserved, if their classes are preserved as   well. For example, you may want to keep all serialization fields and   methods of classes that implement the   <code>Serializable</code> interface. <code>-keepclasseswithmembers</code> [,modifier,...] class_specification Specifies classes and class members to be preserved, on the condition that   all of the specified class members are present. For example, you may want to   keep all applications that have a main method,   without having to list them explicitly. <code>-keepnames</code> class_specification Short for <code>-keep</code>,<code>allowshrinking</code> class_specification Specifies classes and class   members whose names are to be preserved, if they aren't removed in the   shrinking phase. For example, you may want to keep all class   names of classes that implement the   <code>Serializable</code> interface, so that the processed code remains compatible with   any originally serialized classes. Classes that aren't used at all can still   be removed. Only applicable when obfuscating. <code>-keepclassmembernames</code> class_specification Short for   <code>-keepclassmembers</code>,<code>allowshrinking</code> class_specification Specifies class members whose   names are to be preserved, if they aren't removed in the shrinking phase.   For example, you may want to preserve the name of the synthetic <code>class$</code>   methods when processing a library compiled by JDK 1.2   or older, so obfuscators can detect it again when processing an application   that uses the processed library (although DexGuard itself doesn't need   this). Only applicable when obfuscating. <code>-keepclasseswithmembernames</code> class_specification Short for   <code>-keepclasseswithmembers</code>,<code>allowshrinking</code> class_specification Specifies classes and class   members whose names are to be preserved, on the condition that all of the   specified class members are present after the shrinking phase. For example,   you may want to keep all native method names and the   names of their classes, so that the processed code can still link with the   native library code. Native methods that aren't used at all can still be   removed. If a class file is used, but none of its native methods are, its   name will still be obfuscated. Only applicable when obfuscating. <code>-keepcode</code> [,modifier,...] class_specification Specifies code attributes to be preserved, if their methods are preserved as   well. <code>-if</code> class_specification Specifies classes and class members that must be <code>present</code> to activate the   subsequent keep option (<code>-keep</code>,   <code>-keepclassmembers</code>,...).  The condition and   the subsequent keep option can share wildcards and references to wildcards.   For example, you can keep classes on the condition that classes with related   names exist in your project, with frameworks like   Dagger and Butterknife. <code>-printseeds</code> [filename] Specifies to exhaustively list classes and class members matched by the   various <code>-keep</code> options. The list is printed to the standard output or to   the given file. The list can be useful to verify if the intended class   members are really found, especially if you're using wildcards. For example,   you may want to list all the application classes that   you are keeping."},{"location":"usage.html#keepresourcesoptions","title":"Keep Options for Resources","text":"<code>-keepresourcefiles</code> [file_filter] <p>Specifies the Android resource files that should be preserved, with their   original names. By default, the shrinking step removes Android resource   files that appear to be unused. The obfuscation step additionally renames   the remaining files with short, meaningless names or names from a given   dictionary. With this option, you can preserve matching files, with their   original names. The filter is applied to the complete file names, typically   of the form \"res/**\", for instance <code>res/xml/config.xml</code>. For example, you   should keep the <code>AndroidManifest.xml</code> file as the main entry point when   processing an Android application. You may   also need to apply the option if your code relies on the extension of the   file name. Only applicable when processing Android applications or   libraries. </p> <p>Counter-indication: Android internally makes a distinction  between resources and the corresponding resource files. They can even have  different names. If your code accesses a resource file through some sort of  reflection, you generally need to preserve its resource with the  <code>-keepresources</code> option, rather than this option.</p> <code>-keepresources</code> [,keepresources_modifier,...] [name_filter] Specifies the Android resources that should be preserved, with their   original names. Binary Android resource files are stored in the <code>res</code>   directory and contain an index of all defined resources (XML files, image   files, etc). Each resource is identified by a name and by a numeric   identifier. The shrinking step removes resources that appear to be unused.   The optimization step may inline unambiguous resources in code and in other   resources, as well as remove duplicate and empty resources. The obfuscation   step additionally obfuscates their names. With this option, you can preserve   resources with their original names, if they are still required, for instance   for <code>Resources#getIdentifier(name, type, package)</code>. The filter is applied to   strings of the form \"type/name\", for example \"<code>layout/main</code>\" or   \"<code>drawable/icon</code>\". Only applicable when processing Android applications or   libraries. <code>-keepresourcexmlelements</code> [name_filter] Specifies the XML elements in the Android resource XML files that should   be preserved. The optimization step may inline XML information in the Java   code, for example the values of <code>meta-data</code> entries in the Android Manifest.   When shrinking is enabled, DexGuard may additionally remove XML elements   that are no longer being used after the inlining step. With this option, you   can preserve XML elements, if they are still required. The filter is applied   to strings of the form \"element/element/.../element\", based on the names of   the nested XML elements. By appending an attribute filter of the form   \"@name=value\", you can additionally refine the filter to only match elements   that have an attribute with the given name and value. <code>-keepresourcexmlattributenames</code> [name_filter] Specifies the Android resource XML attribute names that should be   preserved. Binary Android resource XML files are stored in the <code>res</code>   directory and contain XML elements with attributes. Each attribute is   identified by a name, but often also by a numeric identifier. The   obfuscation step can then remove the name. you can preserve it with this   option, if it is still required, for   <code>AttributeSet#getAttributeValue(namespace, name)</code> or   <code>AttributeSet#getAttributeName(id)</code>. The filter is applied to strings of the   form \"element/element/.../element/attribute\", based on the names of the   nested elements and the attributes. For example, the Android runtime   somewhat arbitrarily requires the names of the attributes \"installLocation\",   \"versionCode\", and \"name\", in some elements in the Android manifest file.   The examples for processing a complete Android   application and for publishing on the   Samsung app market show how they are   preserved. Only applicable when obfuscating Android code."},{"location":"usage.html#shrinkingoptions","title":"Shrinking Options","text":"<code>-dontshrink</code> Specifies not to shrink the input. By default, DexGuard shrinks the code and   resources: it removes all unused classes, class members, resources, resource   files, assets files, and native libraries. It only keeps the ones listed by   the various <code>-keep</code> options, and the ones on which they   depend, directly or indirectly. It also applies a shrinking step after each   optimization step, since some optimizations may open up the possibility to   remove more code and resources. <code>-printusage</code> [filename] Specifies to list dead code of the input class files. The list is printed   to the standard output or to the given file. For example, you can list the   unused code of an application. Only applicable when   shrinking. <code>-printresourceusage</code> [filename] Specifies to list unused resources in the input APK/AAB. The list is printed   to the standard output or to the given file. Only applicable when   shrinking and targeting Android with <code>-dalvik</code>. <code>-whyareyoukeeping</code> class_specification Specifies to print details on why the given classes and class members are   being kept in the shrinking step. This can be useful if you are wondering   why some given element is present in the output. In general, there can be   many different reasons. This option prints the shortest chain of methods to   a specified seed or entry point, for each specified class and class member.   In the current implementation, the shortest chain that is printed out may   sometimes contain circular deductions -- these do not reflect the actual   shrinking process. If the <code>-verbose</code> option if specified, the   traces include full field and method signatures. Only applicable when   shrinking."},{"location":"usage.html#optimizationoptions","title":"Optimization Options","text":"<code>-dontoptimize</code> Specifies not to optimize the input class files. By default, DexGuard   optimizes all code and resources. It inlines and merges classes, class   members, resources, and resource files. It optimizes all methods at a   bytecode level. <code>-optimizations</code> optimization_filter Specifies the optimizations to be enabled and disabled, at a more   fine-grained level. Only applicable when optimizing. This is an expert   option. <code>-optimizationpasses</code> n Specifies the number of optimization passes to be performed. By default, two   passes are performed. Multiple passes may result in further   improvements. If no improvements are found after an optimization pass, the   optimization is ended. Only applicable when optimizing. <code>-optimizeaggressively</code> Enables more aggressive assumptions during optimization. This might lead to   improved performance and/or reduced code size, but might result in different behavior in rare cases.   For example, reading from an array might cause an   <code>ArrayIndexOutOfBoundsException</code> to be thrown. Strictly speaking, this means   that such an instruction can have a side effect. If this instruction is removed   during optimization, the code will thus behave differently under specific   circumstances. By default, such instructions are always preserved. Setting this   option will lead to these instructions being candidates for removal during   optimization. Additionally, class merging is only enabled when this option is set. <p><code>-assumenosideeffects</code> class_specification</p> <p>This is an optimization feature</p> <p>If you disable optimization (<code>-dontoptimize</code>) this option will have no effect!</p> Specifies methods that don't have any side effects, other than possibly   returning a value. For example, the method <code>System.currentTimeMillis()</code>   returns a value, but it doesn't have any side effects. In the optimization   step, DexGuard can then remove calls to such methods, if it can determine   that the return values aren't used. DexGuard will analyze your program code   to find such methods automatically. It will not analyze library code, for   which this option can therefore be useful. For example, you could specify   the method <code>System.currentTimeMillis()</code>, so that any idle calls to it will   be removed. With some care, you can also use the option to remove logging   code. Note that DexGuard applies the option to the   entire hierarchy of the specified methods. Only applicable when optimizing.   In general, making assumptions can be dangerous; you can easily break the   processed code. Only use this option if you know what you're doing! <p><code>-assumenoexternalsideeffects</code> class_specification</p> <p>This is an optimization feature</p> <p>If you disable optimization (<code>-dontoptimize</code>) this option will have no effect!</p> Specifies methods that don't have any side effects, except possibly on the   instances on which they are called. This statement is weaker than   <code>-assumenosideeffects</code>, because it allows side   effects on the parameters or the heap. For example, the   <code>StringBuffer#append</code> methods have side effects, but no external side   effects. This is useful when removing logging code,   to also remove any related string concatenation code. Only applicable when   optimizing. Making assumptions can be dangerous; you can easily break the   processed code. Only use this option if you know what you're doing! <p><code>-assumenoescapingparameters</code> class_specification</p> <p>This is an optimization feature</p> <p>If you disable optimization (<code>-dontoptimize</code>) this option will have no effect!</p> Specifies methods that don't let their reference parameters escape to the   heap. Such methods can use, modify, or return the parameters, but not store   them in any fields, either directly or indirectly. For example, the method   <code>System.arrayCopy</code> does not let its reference parameters escape, but method   <code>System.setSecurityManager</code> does. Only applicable when optimizing. Making   assumptions can be dangerous; you can easily break the processed code. Only   use this option if you know what you're doing! <p><code>-assumenoexternalreturnvalues</code> class_specification</p> <p>This is an optimization feature</p> <p>If you disable optimization (<code>-dontoptimize</code>) this option will have no effect!</p> Specifies methods that don't return reference values that were already on   the heap when they are called. For example, the <code>ProcessBuilder#start</code>   returns a <code>Process</code> reference value, but it is a new instance that wasn't on   the heap yet. Only applicable when optimizing. Making assumptions can be   dangerous; you can easily break the processed code. Only use this option if   you know what you're doing! <p><code>-assumevalues</code> class_specification</p> <p>This is an optimization feature</p> <p>If you disable optimization (<code>-dontoptimize</code>) this option will have no effect!</p> Specifies fixed values or ranges of values for primitive fields and   methods. For example, you can optimize your app for given Android SDK   versions by specifying the supported range in   the version constant. ProGuard can then optimize away code paths for older   versions. Making assumptions can be dangerous; you can easily break the   processed code. Only use this option if you know what you're doing! <code>-allowaccessmodification</code> <p>Specifies that the access modifiers of classes and class members may be   broadened during processing. This can improve the results of the   optimization step. For instance, when inlining a public getter, it may be   necessary to make the accessed field public too. Although Java's binary   compatibility specifications formally do not require this (cfr. The Java   Language Specification, Third   Edition,   Section   13.4.6),   some virtual machines would have problems with the processed code otherwise.   Only applicable when optimizing (and when obfuscating with the   <code>-repackageclasses</code> option).</p> <p>Counter-indication: you probably shouldn't use this option when processing code that is to be used as a library, since classes and class members that weren't designed to be public in the API may become public.</p> <code>-mergeinterfacesaggressively</code> <p>Specifies that interfaces may be merged, even if their implementing   classes don't implement all interface methods. This can reduce the size of   the output by reducing the total number of classes. Note that Java's binary   compatibility specifications allow such constructs (cfr. The Java Language   Specification, Third   Edition,   Section   13.5.3),   even if they are not allowed in the Java language (cfr. The Java Language   Specification, Third   Edition,   Section   8.1.4).   Only applicable when optimizing.</p> <p>Counter-indication: setting this option can reduce the performance of the processed code on some JVMs, since advanced just-in-time compilation tends to favor more interfaces with fewer implementing classes. Worse, some JVMs may not be able to handle the resulting code.</p>"},{"location":"usage.html#obfuscationoptions","title":"Obfuscation Options","text":"<code>-dontobfuscate</code> Specifies not to obfuscate, inject RASP checks, reflect, or encrypt the input classes,   resources, assets, and native libraries. By default, DexGuard obfuscates   the code: it assigns new short random names to classes, class members,   resources, resource files, assets files, and native libraries. It also   removes internal attributes that are only useful for debugging, such as   source files names, variable names, and line numbers. Finally, it applies   reflection and encryption to specified elements. <code>-dontnatify</code> By default DexGuard applies various protections when obfuscating code   including the natification of Java bytecode, where possible. If this is   not desired, or problems are encountered with native code <code>-dontnatify</code>   will allow you to disable this feature. <code>-printnatificationmapping</code> [filename] Specifies to print the mapping from Java bytecode to native code.   The mapping is printed to the standard output or to the given file.   Useful for debugging problems when contacting Guardsquare support.   The option is automatically applied by the Gradle plugin   and the resulting mapping file will be located in the build directory.   Only applicable when obfuscating. <code>-printmapping</code> [filename] Specifies to print the mapping from old names to new names for classes and   class members that have been renamed. The mapping is printed to the standard   output or to the given file. For example, it is required for subsequent   incremental obfuscation, or if you ever want to   make sense again of obfuscated stack traces. Only   applicable when obfuscating. <code>-applymapping</code> filename Specifies to reuse the given name mapping that was printed out in a   previous obfuscation run of DexGuard. Classes and class members that are   listed in the mapping file receive the names specified along with them.   Classes and class members that are not mentioned receive new names. The   mapping may refer to input classes as well as library classes. This option   can be useful for incremental obfuscation, i.e.   processing add-ons or small patches to an existing piece of code. If the   structure of the code changes fundamentally, DexGuard may print out warnings   that applying a mapping is causing conflicts. You may be able to reduce this   risk by specifying the option   <code>-useuniqueclassmembernames</code> in both   obfuscation runs. Only a single mapping file is allowed. Only applicable   when obfuscating. <code>-printresourcefilenamemapping</code> [filename] Specifies to print the mapping from old names to new names for resource   files (assets, native libraries, Android resources). The mapping is printed to   the standard output or to the given file. Only applicable when obfuscating. <code>-printresourcemapping</code> [filename] Specifies to print the mapping from old ids to new ids for resource   files (assets, native libraries, Android resources). The mapping is printed to   the standard output or to the given file. Only applicable when obfuscating. <code>-applyresourcemapping</code> filename Specifies to reuse the given resource name mapping that was printed out in a   previous obfuscation run of DexGuard. Resources that are listed in the mapping   file receive the names specified along with them. Resources that are not mentioned   receive new names. Only applicable when obfuscating. <code>-obfuscationdictionary</code> filename or naming scheme Specifies the dictionary file or naming scheme to use for obfuscating field and    method names. By default, short names like 'a', 'b', etc. are used as obfuscated names. A dictionary file contains a list of words, separated by newlines. For example,   it could contain reserved key words, identifiers with foreign characters and so on.   White space, punctuation characters, duplicate words and comments preceded by a    <code>#</code> sign are ignored. Alternatively, an internal naming scheme can be specified.  Note that the chosen names hardly improve the obfuscation. Decent    compilers can automatically replace them, and the effect can fairly simply    be undone by obfuscating again with simpler names. The most useful application    is specifying strings that are typically already present in class files    (such as 'Code'), thus reducing the class file sizes just a little bit more.   Only applicable when obfuscating. <code>-classobfuscationdictionary</code> filename or naming scheme Specifies the dictionary file or naming scheme to use for obfuscating class names.    This is similar to the option <code>-obfuscationdictionary</code>.    Only applicable when obfuscating. <code>-packageobfuscationdictionary</code> filename Specifies a text file from which all valid words are used as obfuscated   package names. Each line contains a name. White space, punctuation characters,    duplicate words and comments after a <code>#</code> sign are ignored. Only applicable    when obfuscating. <code>-useuniqueclassmembernames</code> <p>Specifies to assign the same obfuscated names to class members that have   the same names, and different obfuscated names to class members that have   different names (for each given class member signature). Without the option,   more class members can be mapped to the same short names like 'a', 'b', etc.   The option therefore increases the size of the resulting code slightly, but   it ensures that the saved obfuscation name mapping can always be respected   in subsequent incremental obfuscation steps.</p> <p>For instance, consider two distinct interfaces containing methods with the same name and signature. Without this option, these methods may get different obfuscated names in a first obfuscation step. If a patch is then added containing a class that implements both interfaces, DexGuard will have to enforce the same method name for both methods in an incremental obfuscation step. The original obfuscated code is changed, in order to keep the resulting code consistent. With this option in the initial obfuscation step, such renaming will never be necessary.</p> <p>This option is only applicable when obfuscating. In fact, if you are planning on performing incremental obfuscation, you probably want to avoid shrinking and optimization altogether, since these steps could remove or modify parts of your code that are essential for later additions.</p> <code>-distinctclassmembernames</code> class_specification <p>Specifies to assign distinct obfuscated names to the members of the   classes matching the given class specification. Without the option,   multiple class members with different JVM signatures might be mapped to   the same member name like 'a', 'b', etc. The option therefore increases   the size of the resulting code slightly, but it ensures that classes / interfaces   only contain unique names.</p> <p>For instance, consider the case where through reflection, the members of the class are exposed to another language like Javascript. Javascript does not support overloaded functions and thus cannot distinguish between members with the same name. Part of your class becomes unaccessible through this interface. This can be solved by applying this flag on the classes that can be exposed.</p> <p>This option is only applicable when obfuscating, as the class members are otherwise not renamed.</p> <code>-dontusemixedcaseclassnames</code> Specifies not to generate mixed-case class names while obfuscating. By   default, obfuscated class names can contain a mix of upper-case characters   and lower-case characters. This creates perfectly acceptable and usable   jars. Only if a jar is unpacked on a platform with a case-insensitive filing   system (for example, Windows), the unpacking tool may let similarly named class   files overwrite each other.   Use this option if you require that jars be able to be correctly unpacked   on Windows. Obfuscated jars will become slightly larger as a result.   Only applicable when obfuscating. <code>-keeppackagenames</code> [package_filter] Specifies not to obfuscate the given package names. The optional filter is   a comma-separated list of package names. Package names can contain ?,   *, and ** wildcards, and they can be preceded by the !   negator. Only applicable when obfuscating. <code>-flattenpackagehierarchy</code> [package_name] Specifies to repackage all packages that are renamed, by moving them into   the single given parent package. Without argument or with an empty string   (''), the packages are moved into the root package. This option is one   example of further obfuscating package names. It   can make the processed code smaller and less comprehensible. Only applicable   when obfuscating. <code>-repackageclasses</code> [package_name] <p>Specifies to repackage all class files that are renamed, by moving them   into the single given package. Without argument or with an empty string   (''), the package is removed completely. This option overrides the   <code>-flattenpackagehierarchy</code> option. It is another   example of further obfuscating package names.   It can make the processed code even smaller and less comprehensible. Its   deprecated name is <code>-defaultpackage</code>. Only applicable when obfuscating.</p> <p>Counter-indication: classes that look for resource files in their package directories will no longer work properly if they are moved elsewhere. When in doubt, just leave the packaging untouched by not using this option.</p> <p>Note: On Android, you should not use the empty string when classes like activities, views, etc. may be renamed. The Android run-time automatically prefixes package-less names in XML files with the application package name or with <code>android.view</code>. This is unavoidable but it breaks the application in this case.</p> <code>-keepattributes</code> [attribute_filter] Specifies any optional attributes to be preserved. The attributes can be   specified with one or more <code>-keepattributes</code>   directives. The optional filter is a comma-separated list of attribute   names that Java virtual machines and DexGuard support.   Attribute names can contain ?, *, and ** wildcards, and they   can be preceded by the ! negator. For example, you should at least keep   the <code>Exceptions</code>, <code>InnerClasses</code>, and <code>Signature</code> attributes when   processing a library. You should also keep the   <code>SourceFile</code> and <code>LineNumberTable</code> attributes for producing useful   obfuscated stack traces. Finally, you may want to   keep annotations if your code depends on them.   Only applicable when obfuscating. <code>-keepparameternames</code> <p>Specifies to keep the parameter names and types of methods that are kept.   This option actually keeps trimmed versions of the debugging attributes   <code>LocalVariableTable</code> and <code>LocalVariableTypeTable</code>. It can be useful when   processing a library. Some IDEs can use the   information to assist developers who use the library, for example with tool   tips or autocompletion. Only applicable when obfuscating.</p> <p>When processing Kotlin metadata the Kotlin function, constructor and property setter parameter names are also kept.</p> <code>-keepkotlinintrinsics</code> This option is applied automatically to the configuration by default.   Specifies to keep Kotlin <code>Intrinsics</code> calls. These <code>Intrinsics</code> calls   are added by the Kotlin compiler to provide additional debug info   for unexpected cases during Java interop. When the removal of the   calls is disabled, the Strings inside the calls will be blanked instead   to ensure removal of sensitive data. <code>-renamesourcefileattribute</code> [string] Specifies a constant string to be put in the <code>SourceFile</code> attributes (and   <code>SourceDir</code> attributes) of the class files. Note that the attribute has to   be present to start with, so it also has to be preserved explicitly using   the <code>-keepattributes</code> directive. For example, you   may want to have your processed libraries and applications produce useful   obfuscated stack traces. Only applicable when   obfuscating. It is possible to preserve the <code>SourceFile</code> attribute for kept   classes by specifying the Java system property   <code>obfuscate.keptclasses.dontrenamesourcefileattribute</code> (with <code>-D.....</code>). <code>-accessthroughreflection</code> [,encryptstrings]  class_specification <p>Specifies to replace direct access to the specified classes and class   members by reflection. Matching class references are then replaced by   <code>Class.forName</code> constructs. Reads and writes of matching fields are replaced   by <code>Class.getField</code> and <code>Field.get/set</code> constructs. Method invocation are   replaced by <code>Class.getMethod</code> and <code>Method.invoke</code> constructs. For example,   when processing the Android License Verification Library, you may want to   add reflection for sensitive APIs   in the Android run-time. Only applicable when obfuscating.</p> <p>The <code>encryptstrings</code> modifier additionally encrypts the strings that are created for the reflection, effectively hiding all references to the reflected class or class member.</p> <p>Limitation: Due to technical constraints, <code>-accessthroughreflection</code> cannot currently be applied to <code>java.lang.Object</code> methods.</p> <code>-obfuscatecode</code> [,strength] class_specification <p>Specifies to obfuscate the code (i.e. bytecode instructions) of the   specified methods. If the class specification does not   specify any methods, all methods in the specified class or classes are   obfuscated. With specified methods, only the code of matching methods is   obfuscated. The default obfuscation strength is low.</p> <p>Code obfuscation makes it more difficult to disassemble or decompile classes. Depending on the specified strength, different techniques are applied. They raise the bar for any reverse engineering attempt. Only applicable when obfuscating.</p> <p>Performance tip: Code obfuscation increases the code size and introduces some minor processing overhead in the obfuscated methods at runtime. You should use a low obfuscation strength for methods that are critical for application performance or that execute a large number of arithmetic calculations. Limitation: Due to technical constraints, you can currently not apply code obfuscation to methods using synchronization blocks (however methods marked <code>synchronized</code> are fine).</p> <code>-virtualizecode</code> class_specification <p>Specifies to virtualize the code (i.e. bytecode instructions) of the specified methods.   If the class specification does not specify any methods, all methods in the   specified class or classes are virtualized. With specified methods, only the   code of matching methods is virtualized.</p> <p>Code virtualization makes it more difficult to apply static or dynamic analysis of the application classes as it rewrites the bodies of virtualized methods with a randomized instruction set that is executed by an inlined virtual machine. It considerably raises the bar for any reverse engineering attempt. Only applicable when obfuscating.</p> <p>Performance tip: Code virtualization increases the code size and introduces some processing overhead in the virtualized methods at runtime. You should not virtualize methods that are critical for application performance. Limitation: Due to technical constraints, you can currently not apply code virtualization to initializers (constructors, static initializers) and methods using synchronization blocks (however methods marked <code>synchronized</code> are supported).</p> <code>-obfuscatejavascript</code> file_filter Specifies that the contents of all Javascript files matching the given   filter should be obfuscated using DexGuard's own built-in Javascript obfuscator. <p>Hermes</p> <p>Please note that if you're building a React Native app, you currently cannot obfuscate your Javascript code if you have Hermes enabled. Either disable Hermes by setting <code>hermesEnabled</code> to false in your  android/gradle.properties file or don't specify this rule.</p> <code>-javascriptconfiguration</code> filename <p>Specifies a file that contains a Javascript configuration.   The configuration file will be passed to the Javascript obfuscator,   to obfuscate any Javascript files specified in   <code>-obfuscatejavascript</code>.</p> <p>Note: You can find more details about the integration and usage of the Javascript obfuscator in the separate Javascript obfuscator manual.</p> <code>-javascriptplugin</code> filename [string] <p>Use the specified plugin jar and optional string to obfuscate Javascript files.</p> <code>-encryptclasses</code> [class_filter] <p>Specifies that classes whose names match the given filter should be    encrypted. This makes it more difficult to disassemble or decompile them.   \"Obfuscated\" would be a better word, since the processed code necessarily   has to be able to reverse the encryption. It therefore increases the code   size and introduces processing overhead at runtime, whenever the class is   loaded or accessed. However, it raises the bar for any reverse engineering   attempts. For example, if you have some sensitive license checking class,   you may want to protect it by encrypting it.   Only applicable when obfuscating.</p> <p>You can additionally protect encrypted classes by obfuscating their code with obfuscation strength medium or high. This will render the classes unusable if they are manually extracted from the DEX file. Code obfuscation should not be applied however on performance-sensitive code that is executed very frequently (e.g., tight code loops).</p> <p>Counter-indications: It is not possible to encrypt classes that are explicitly preserved from obfuscation (in your configuration), extended by non-encrypted classes, or created by reflection (for instance because they are referenced from XML files).</p> <p>Caveat: When encrypting classes in library projects, the encrypted classes must not contain references to classes or class members that are later on obfuscated in the final application projects. Once encrypted, classes can no longer be changed, so their references would become invalid. If encrypted classes do contain references to other non-encrypted classes in their library projects, these referenced classes and class members must be preserved from obfuscation in the application projects. If your requirements allow it, it is easier to encrypt classes when processing the final application.</p> <p>Performance tip: Every access from an external class to an encrypted class carries some overhead, due to reflection. If performance is important in this part of your code, you can reduce the overhead by accessing the class through an interface that is not encrypted.</p> <code>-encryptstrings</code> [string_filter]  <code>-encryptstrings</code> class_specification <p>Specifies to encrypt string constants that either match the given filter   or that are defined in matching classes. With a class specification without   fields or methods, all strings in the matching class or classes are   encrypted. With specified fields, the matching final String constants are   encrypted. With specified methods, all strings in the matching methods are   encrypted.</p> <p>String encryption makes it more difficult to find them in disassembled or decompiled code. Again, \"obfuscated\" would be a better word, since the processed code necessarily has to be able to reverse the encryption. It therefore increases the code size and introduces processing overhead whenever the string is accessed. But again, it raises the bar for any reverse engineering attempts. For example, if you have hard-coded some key string, you may want to encrypt it to hide it a bit better. Also, if you are already accessing a class or a class member through introspection, you may want to obfuscate the resulting strings containing their names in the code. Only applicable when obfuscating.</p> <p>Caveat: The current implementation does not support encrypting strings in interfaces on <code>minSdk &lt; 24</code>, unless backporting is enabled. Final string constants in interfaces are not a problem.</p> <p>Performance tip: Every encrypted string is decrypted on the fly at run-time, without implicit caching. If performance of encrypted strings is important in some parts of your code, you can define them as <code>private static String</code> fields, so they are only decrypted once, when the class is initialized. Don't declare them as <code>final</code> though, because the compiler will then inline them again.</p> <code>-adaptclassstrings</code> [class_filter] Specifies that string constants that correspond to class names should be   obfuscated as well. Without a filter, all string constants that correspond   to class names are adapted. With a filter, only string constants in classes   that match the filter are adapted. For example, if your code contains a   large number of hard-coded strings that refer to classes, and you prefer not   to keep their names, you may want to use this option. Primarily applicable   when obfuscating, although corresponding classes are automatically kept in   the shrinking step too. <code>-keepkotlinmetadata</code> ** Deprecated: use <code>-keep class kotlin.Metadata</code> instead. **   Instructs DexGuard to process <code>kotlin.Metadata</code> annotations if present.   Currently only shrinking and obfuscation of its content is supported.   Classes containing such annotations should be excluded from optimization   if this option is enabled. <code>-adaptresourcefilenames</code> [file_filter] Specifies the resource files to be renamed, based on the obfuscated names   of the corresponding class files (if any). Without a filter, all resource   files that correspond to class files are renamed. With a filter, only   matching files are renamed. For example, see processing resource   files. Only applicable when obfuscating. <code>-adaptresourcefilecontents</code> [file_filter] Specifies the resource files and native libraries whose contents are to be   updated. Any class names mentioned in the resource files are renamed, based   on the obfuscated names of the corresponding classes (if any). Any function   names in the native libraries are renamed, based on the obfuscated names of   the corresponding native methods (if any). Without a filter, the contents of   all resource files updated. With a filter, only matching files are updated.   The resource files are parsed and written using UTF-8 encoding. For an   example, see processing resource files. Only   applicable when obfuscating. Caveat: You probably only want to apply this   option to text files, Android resource XML files, and native libraries, since   parsing and adapting general binary files as text files can cause unexpected   problems. Therefore, make sure that you specify a sufficiently narrow filter. <code>-dontadaptserviceproviderconfigurationfiles</code> DexGuard automatically adapts Service Provider Interface configuration files   located in <code>assets/services</code>. This option disables that behavior. <code>-stripnativelibrarysections</code> [file_filter] Specifies the native libraries that should undergo a removal of sections which   are not needed at runtime. Note: This flag only has an effect on native   libraries that also match the <code>-adaptresourcefilecontents</code> filter. <code>-resourcefilenameobfuscationdictionary</code> filename Specifies a text file from which the lines are used as obfuscated Android   resource file names. Each line contains a name. Comments after a <code>#</code> sign   are ignored. Only applicable when obfuscating Android code. <code>-excludedresourcefilenames</code> filename Specifies a text file from which the lines are used to denylist obfuscated Android   resource file names. Each line contains a name. Comments after a <code>#</code> sign   are ignored. Only applicable when obfuscating Android code. <code>-encryptmetadata</code> [string_filter] Specifies the metadata in the Android Manifest that should be encrypted.   All metadata whose name matches the given filter will be encrypted.   DexGuard will inline the metadata values in the code and then encrypt these   values in the code. The original metadata entries will be removed from the   Android Manifest, unless they are explicitly kept using   <code>-keepresourcexmlelements</code>. Only String metadata which are retrieved using   <code>Bundle.getString(int)</code> with a integer constant (not a variable) are currently   supported. <code>-encryptassetfiles</code> [file_filter] <p>Specifies the Android asset files that should be encrypted. Asset files   are stored in the <code>assets</code> directory and can contain any data. The   obfuscation step can automatically encrypt them and make sure they are   decrypted on the fly at run-time. In order for this to work, the assets   must be loaded using one of the <code>AssetManager.open</code> methods.   Only applicable when obfuscating Android code.</p> <p>Note: If the processed application contains at least one call to <code>AssetManager.open(String)</code> with a non-constant string argument, DexGuard will encrypt all assets that match the specified file filter. If there are assets that are loaded via other mechanisms, make sure they do not match the specified file filter.</p> <p>Note: Baseline profile assets (<code>baseline.prof</code> and <code>baseline.profm</code>) are never encrypted.</p> <p>Note: When building an app bundle, it is not possible to encrypt non-install time asset packs.</p> <code>-encryptresources</code> [name_filter] <p>Specifies the Android resources to be encrypted. The filter is applied to   strings of the form \"type/name\", for example \"string/apiKey\". Currently only   String resources are supported.   A resource excluded from obfuscation using <code>-keepresources</code>    can still be encrypted by using the    <code>allowencryption</code> modifier.   Only applicable when processing Android applications. Resource encryption    is not supported for Android libraries, as library resources are only compiled    during the application build-time. Therefore,    encrypting uncompiled resources before this time would not allow libraries to load    them during the application runtime. In the case of resource string encryption,    resource tables are only generated at application build-time. This limitation prevents    encrypting resource strings as the encrypted strings cannot be stored in a resource    table to be decrypted upon usage. The lack of this resource table also prevents    inlining resource strings before encrypting them as regular strings in the code.</p> <p>Counter-indication: resource Strings referenced from other XML files can't be encrypted.</p> <code>-encryptresourcefiles</code> [file_filter] <p>Specifies to encrypt Android resource files. Resource files are stored in   the <code>res</code> directory and can contain application resources such as layout XML   files. The obfuscation step can automatically encrypt them and make sure   they are decrypted on the fly at run-time. Supported resources:   <code>res/layout</code>, <code>res/menu</code>, and <code>res/xml</code> files. Counter-indication: app   widgets can't decrypt resources. Don't encrypt resource files that are   accessed by app widgets or retrieved via android.content.pm.PackageManager.   Only applicable when processing Android applications. Resource file encryption   is not supported for Android libraries as library resource files are only compiled   during the application build-time. Therefore,   encrypting uncompiled resource files before this time would not allow libraries to load   them during the application runtime.</p> <p>Counter-indication: resource file encryption is not compatible with Android App  Bundles.</p> <code>-encryptnativelibraries</code> [file_filter] [percentage] <p>Specifies the Android native libraries that should be encrypted. Native   libraries are packaged in subdirectories of the <code>lib</code> or <code>jni</code> directory.    The obfuscation step can automatically encrypt them and make sure they are   decrypted on the fly at run-time. In order for this to work, your application    must load the native library using <code>System.loadLibrary(String)</code> or    <code>System.load(String)</code>, or be a dependency of an encrypted native library. Your   configuration can then specify \"<code>-encryptnativelibraries lib/**/libmycode.so</code>\",    matching the complete path and name of the library. Note that the paths are    the paths as you find them in the output, with <code>lib/</code>, not <code>libs/</code>. Also note    the wildcards: if a library is encrypted for one platform, it must be encrypted    for all platforms. Only applicable when obfuscating Android code.</p> <p>Note: For a more secure way of loading your encrypted native libraries, you can include <code>lib/dexguard-nativeloader.aar</code> as a dependency to your project. For more details, see the section on native library encryption.</p> <p>Note: If the processed application contains at least one call to <code>System.loadLibrary(String)</code> with a non-constant string argument, DexGuard will encrypt all native libraries that match the specified file filter. If there are libraries that are loaded via other mechanisms, make sure they do not match the specified file filter.</p> <p>Note: The percentage modifier optionally specifies which fraction of the library should be encrypted. For example, a percentage modifier of 50 only encrypts half of the library. The provided value should be an integer in the range (0, 100]. This modifier should only be used in exceptional circumstances for very large libraries, when the runtime performance impact of decrypting the full library is too high.</p> <code>-compressencryptednativelibraries</code> When specified, Android native libraries are compressed before encryption. Note that    uncompressed native libraries already have zip compression applied, since the APK and    App Bundle formats are based on the zip format. However, this compression is not   effective on encrypted data. Therefore, this option enables compressing native libraries   before encrypting them, resulting in the same size gains as the unencrypted case. <code>-randomizationseed</code> integer_seed Specifies an additional value that is taken into account when generating the seed value   to randomize the obfuscation. <code>-printclassencryption</code> [filename] Specifies to print the class encryption groups, and the plugins which were   used to encrypt each class group. The mapping is printed to the standard   output or to the given file.   Only applicable when encrypting classes. <code>-printstringencryption</code> [filename] Specifies to print the string encryption groups, and the plugins which were   used to encrypt each string group. The mapping is printed to the standard   output or to the given file.   Only applicable when encrypting strings. <code>-printassetencryption</code> [filename] Specifies to print the asset encryption groups, and the plugin which was   used to encrypt each asset group. The mapping is printed to the standard   output or to the given file.   Only applicable when encrypting assets. <code>-printresourceencryption</code> [filename] Specifies to print the resources that are encrypted, and the plugin which was   used to encrypt them. The mapping is printed to the standard   output or to the given file.   Only applicable when encrypting resources. <code>-printnativelibraryencryption</code> [filename] Specifies to print the native library encryption groups, and the plugins   which was used to encrypt each group. The mapping is printed to the standard   output or to the given file.   Only applicable when encrypting native libraries."},{"location":"usage.html#preverificationoptions","title":"Preverification Options","text":"<code>-dontpreverify</code> Specifies not to preverify the processed class files. By default, class   files are preverified if they are targeted at Java Micro Edition or at Java   6 or higher. For Java Micro Edition, preverification is required, so you   will need to run an external preverifier on the processed code if you   specify this option. For Java 6, preverification is optional, but as of Java   7, it is required. Only when eventually targeting Android, it is not   necessary, so you can then switch it off to reduce the processing time a   bit. This option is not relevant for Android applications. <code>-microedition</code> Specifies that the processed class files are targeted at Java Micro   Edition. The preverifier will then add the appropriate StackMap attributes,   which are different from the default StackMapTable attributes for Java   Standard Edition. For example, you will need this option if you are   processing midlets. This option is not relevant for Android applications. <code>-android</code> Specifies that the processed class files are targeted at the Android   platform. DexGuard will then make sure some features like string encryption   and class encryption are compatible with Android. For example, you may need   this option if you are processing libraries for Android. This option is   always set in DexGuard."},{"location":"usage.html#conversionoptions","title":"Conversion Options","text":"<code>-dalvik</code> Specifies that the code is targeted at the Android platform and the Dalvik   virtual machine. DexGuard will then convert the processed class files to the   Dex format. The output will contain a single <code>classes.dex</code> file instead of   many <code>.class</code> files. For example, you probably want to use this option if   you are processing Android applications. <code>-protobuffer</code> Deprecated: app bundles are now automatically detected so this option is no longer required Specifies to write the processed resource files in protobuffer format."},{"location":"usage.html#signingoptions","title":"Jar Signing Options","text":"<code>-keystore</code> filename Specifies the key store file that contains your private signing key. Only   required if you want DexGuard to sign the output jars. <code>-keystorepassword</code> password Specifies the password of the key store. This can also be a pin in the case of a PKCS11 configuration. Only required if you want DexGuard to sign the output jars. <code>-keyalias</code> alias Specifies the alias of the key that you want to select from the key store.   Only required if you want DexGuard to sign the output jars. <code>-keypassword</code> password Specifies the password of the key. Only required if you want DexGuard to   sign the output jars. <code>-pkcs11configuration</code> filename Specifies the configuration file that contains the connection information to the PKCS11 keystore. Only   required if you want DexGuard to sign the output jars using PKCS11. More about the configuration format   can be found by running <code>man 5 pkcs11.conf</code>. <code>-certificatelineage</code> filename Specifies the certificate lineage file, if you want to apply key rotation.   You then need to specify the corresponding oldest and newest key stores,   aliases, and passwords. Alternatively, you can specify the entire lineage,   without a lineage file, as a list of key stores, aliases, and passwords   (oldest to newest). <code>-apksignatureschemes</code> [signature_scheme_filter] Specifies a filter for apk signing schemes that should be used when creating an apk.   DexGuard supports the following apk signing schemes: <code>v1, v2, v3, v4</code>.   By default, if no apk signature scheme option is provided, v1 and v2 signature schemes are enabled."},{"location":"usage.html#raspoptions","title":"RASP Options","text":"<p>See RASP for more information on these options:</p> <code>-raspchecks</code> [RASP detector,...] Enable spray and entrypoint injection for one or more of the RASP detectors. <code>-raspchecks</code> [RASP detector,...] spray Enable spray injection for the specified RASP detectors. <code>-raspchecks</code> [RASP detector,...] entrypoint Enable entrypoint injection for the specified RASP detectors. <code>-raspchecks</code> [RASP detector,...] checkpoint[,allowdescriptivenames] class_specification Enable a RASP checkpoint for the specified detectors and methods. <code>-debugraspchecks</code> Enable debugging for RASP check injections. This is useful for debugging the performance impact of RASP. Your app or a consuming application of your SDK is made unreleasable when this option is enabled. <code>-raspcontinueon</code> [RASP detector,...] Prevents listed detectors from crashing the application when triggered. If this option is not provided, the default behavior is used. <code>-raspcallback</code> [RASP detector,...] class_specification Custom callback that will be executed when a RASP threat is detected. <code>-raspdenylist</code> class_specification Denylist to filter methods from RASP injection locations. <code>-noinjectioncoldzone</code> integer Denylists the given percentage of the least executed methods in the profiling data in the PGO workflow. <code>-noinjectionhotzone</code> integer Denylists the given percentage of the most executed methods in the profiling data in the PGO workflow. <code>-raspaggressiveness</code> Detector name aggressiveness level Change the level of aggressiveness of RASP injection for a certain RASP detector. <code>-raspcertificatehash</code> certificate hash Specify the certificate hash of the signing key which will be used to sign the app. <code>-disableapktamper</code> Disables part of the <code>apptamper</code> check that is sensitive to re-signing. If you are building an   APK that is re-signed after DexGuard has protected it, this option should be specified to be able   to use <code>apptamper</code> RASP checks. <code>-dontinjectdebugblocker</code> Disables part of the <code>debug</code> detector that blocks debug processes from attaching to your application in runtime. <code>-intunecompatibility</code> Ignores certain hooks associated with Microsoft Intune's Mobile Application Management SDK, if those libraries   are detected at runtime."},{"location":"usage.html#antimalwareoptions","title":"Anti-malware Options","text":"<p>See Malware Protection for more information on these options.</p> <code>-malwareprotect</code> malware detector[,...] [class specification] Enables the given malware detector(s) for the activities or fragments matching the given class specification, or all   activities and fragments if no class specification is specified. The allowed malware detectors are <code>a11y</code>,   <code>screenrecording</code>, <code>overlays</code>, and <code>activityinjection</code>. You can also specify a wildcard (<code>*</code>) to enable all malware   detectors. <code>-malwaremessage</code> malware detector[,...] string/my_string_resource Configures the warning message for the given malware detector to the given string resource, which allows for custom   and localised messages. The allowed malware detectors are <code>a11y</code>, <code>overlays</code>, and <code>activityinjection</code>. You can also   specify a wildcard (<code>*</code>) to configure the given message for all malware detectors. When not specified, a default   warning message based on the detector is shown. <code>-malwareallowstores</code> package.name[,...] Configures the malware <code>a11y</code> detector to consider accessibility services installed from the specified stores as \"safe\".   When not specified, a default list of allowed stores is used. <code>-malwarecallback</code> malware detector[,...] class specification Configures a callback that will be called when the given malware detector is triggered. Currently only the <code>a11y</code>   malware detector is supported. The specified class specification must match exactly 1 static method with a return type   of <code>void</code> and a parameter list of exactly 1 <code>long</code>. <code>-malwarecrashon</code> malware detector[,...] Configures the given malware detectors to crash on detection. Currently only the <code>a11y</code> malware detector is supported. <code>-malwarewarnon</code> malware detector[,...] Configures the given malware detectors to show a warning on detection. The warning involves a dialog and a toast, both   showing the same message, which is different for each detector. This is the default behavior for all malware detectors   and this option can be used to disable the warning. Currently only the <code>a11y</code> malware detector can have its warning   disabled by specifying <code>!a11y</code>. <code>-malwarea11ydeviceadmin</code> Enables the admin subcheck for the <code>a11y</code> malware detector. <p>Note: This option requires the <code>a11y</code> malware detector to be enabled using <code>-malwareprotect a11y</code>.</p>"},{"location":"usage.html#generaloptions","title":"General Options","text":"<code>-verbose</code> Specifies to write out some more information during processing. If the   program terminates with an exception, this option will print out the entire   stack trace, instead of just the exception message. <code>-dontnote</code> [class_filter]  <code>-dontnote</code> ['type[:id]'] Specifies not to print notes about potential mistakes or omissions in the   configuration, such as typos in class names or missing options that might be   useful. The optional filter is a regular expression; DexGuard doesn't print   notes about classes with matching names. You can also specify a type with an optional id to suppress advice and   warnings that are printed in the protection report. <p>Quotes</p> <p>When writing a <code>-dontnote</code> rule for the protection report that contains an id the entire argument has to be quoted as shown below. <pre><code>-dontnote 'report_message:1234'\n</code></pre></p> <code>-dontwarn</code> [class_filter] Specifies not to warn about unresolved references and other important   problems at all. The optional filter is a regular expression; DexGuard   doesn't print warnings about classes with matching names. Ignoring warnings   can be dangerous. For instance, if the unresolved classes or class members   are indeed required for processing, the processed code will not function   properly. Only use this option if you know what you're doing! <code>-ignorewarnings</code> Specifies to print any warnings about unresolved references and other   important problems, but to continue processing in any case. Ignoring   warnings can be dangerous. For instance, if the unresolved classes or class   members are indeed required for processing, the processed code will not   function properly. Only use this option if you know what you're doing! <code>-printconfiguration</code>[,modifier] [filename] Specifies to write out the entire configuration that has been parsed, with   included files and replaced variables. The structure is printed to the   standard output or to the given file. This can sometimes be useful to   debug configurations. By default, keystore information will not be printed out.   You can change this behavior using the <code>includesensitive</code> sub option. <code>-printlibraryconfiguration</code> filename Specifies to generate and write out the configuration that is needed when you   additionally process the obfuscated output again with ProGuard or DexGuard.   The configuration provides keep rules for all classes, class members   and resource files whose use can no longer be found after the primary   obfuscation step, due to reflection, encryption, ... Any keep rule from the   input configuration will also be copied to the library configuration, if it   is still applicable. The configuration is still automatically generated and    written to the \u2018proguard.txt\u2019 file inside the output AAR for all projects that    have at least one keep rule with the \u2018asapi\u2019 modifier. Only    applicable to library projects. <code>-printstatistics</code> [filename] <p>Specifies to write out extended statistics on package-level. The statistics   are printed to the standard output or to the given file. This can be useful   to verify or optimize configurations.</p> <p>Note: by default, the package hierarchy up to level 3 will be displayed, e.g. com.example.subpackage. This can be customised with some Java system properties, which can be set as JVM arguments (with <code>-D...</code>):</p> <ul> <li>statistics.maxlevel=level: the maximum package hierarchy level to display.</li> <li>statistics.fold=package_filter: packages matching the filter will be folded.</li> <li>statistics.expand=package_filter: packages matching the filter will be expanded.</li> </ul> <code>-printinjectmapping</code> [filename] Specifies to write out a mapping of which RASP checking code was  injected into which method in your application. <code>-printthreatcastmapping</code> [filename] Specifies to write out a mapping file that lists the human readable method names for each check location identifier. This mapping file can be uploaded to your ThreatCast server portal, to provide more info on the runtime threats your app is facing. <code>-dontuploadthreatcastmapping</code> Don't upload the ThreatCast mapping file automatically. <code>-threatcastappuseridgetter</code> class_specification Specifies a custom App User ID (AUID) getter method that will be executed to collect the AUID and send it to ThreatCast when a RASP threat is detected. <code>-usethreatcastdebugclient</code> Use a debug version of ThreatCast which prints additional information to logcat. Apps cannot be released when this version of ThreatCast is used. <code>-addconfigurationdebugging</code> <p>Specifies to instrument the processed code with debugging statements that   print out suggestions for missing DexGuard configuration. This can be very   useful to get practical hints at run-time, if your processed code crashes   because it still lacks some configuration for reflection. For example, the   code may be serializing classes with the GSON library   and you may need some configuration for it. You can generally just   copy/paste the suggestions from the console into your configuration file.</p> <p>Counter-indication: do not use this option in release versions, as it adds obfuscation information to the processed code.</p> <code>-addprofiling</code> Specifies to instrument the processed code to guide automatic   configuration of obfuscation rules. <code>-uselegacyprofiling</code> Enable legacy PGO, both during the instrumentation phase and the obfuscation phase. <code>-disableprotectionreport</code> Disables the generation of protection reports.    When protection report generation is disabled, DexGuard does not create the HTML report    which summarizes the impact of DexGuard on the generated outputs. <code>-disabletelemetry</code> Disables the sending of usage reports to Guardsquare's servers. <code>-disablebuildtelemetry</code> Disables the sending of usage reports to Guardsquare's servers at DexGuard processing time. <code>-disableruntimetelemetry</code> Disables the sending of usage reports to Guardsquare's servers at application runtime.   This is only relevant when the <code>-addconfigurationdebugging</code> option is being used. <code>-protectionreportdirectory</code> directoryname Specifies the location where protection reports shall be created.    By default, such files are created in the 'reports' directory. <code>-intermediatedirectory</code> directoryname Specifies the location of DexGuard's intermediate directory.    This is an optional rule that puts the directory of intermediate files in the specified    location and prevents it from being removed. When not provided, the directory is created    in the default location for temporary directories and is removed after processing. When the    specified directory is not empty, the \u2018allowoverwrite\u2019 modifier    should be provided. Note that this may overwrite existing files and directories in the    specified location, so be careful when using this modifier. <code>allowoverwrite</code> Modifier for intermediatedirectory that specifies that files    and directories in the given intermediate directory may be overwritten. This is useful    when you have specified a non-existent or empty directory that DexGuard has used during    a first run, and you want to reuse this directory for intermediate files in subsequent    runs. Be careful with this modifier when you have specified an intermediate directory    that is not DexGuard-specific. <code>-disableversioncheck</code> Disables performing the version check.   By default, this check is enabled to check whether a newer DexGuard version is available.    If enabled, a message is added to the build log, warning you when a new release    is available and notifying you that you might want to try out a new beta release. <code>-profilingdata</code> Specifies the path to the profiling data file.   Profiling data is generated when using <code>-addprofiling</code> and is    used to automatically configure DexGuard. <code>-printraspdenylist</code> [filename] Specifies to print the RASP denylist provided and/or generated from the   provided profiling data. The RASP denylist is printed to the standard output   or to the given file. <code>-archivedebugfiles</code> [,modifier] filename Packages the inputs and outputs of DexGuard in a zip file.   This option is particularly useful when contacting Guardsquare support to allow   issues to be investigated efficiently.    This option packages the inputs and outputs of DexGuard in a zip file.   By default,  all mapping files, all reports, and the full configuration will be packaged   in the specified zip file to allow easily reproducing issues. <code>-compatibilityfeatures</code> features Enable or disable compatibility features. Compatibility features can be useful to achieve better obfuscation when using specific frameworks such as <code>hilt</code>. Some compatibility features are enabled by default but can be disabled, such as by using <code>-compatibilityfeatures !hilt</code>. The following compatibility features are currently available: <code>hilt</code> <code>-reactnativebundlename</code> [string] Explicitly specifies the React Native bundle name.   DexGuard tries to extract the name from the application automatically, but this is   not possible in some cases.   This option is only necessary if the bundle was renamed from the default <code>index.android.bundle</code>   and could not be found, in which case DexGuard will also print an error message."},{"location":"usage.html#classpath","title":"Class Paths","text":"<p>DexGuard accepts a generalization of class paths to specify input files and output files. A class path consists of entries, separated by the traditional path separator (e.g. ':' on Unix, or ';' on Windows platforms). The order of the entries determines their priorities, in case of duplicates.</p> <p>Each input entry can be:</p> <ul> <li>A class file, dex file, or resource file,</li> <li>An apk file, containing any of the above,</li> <li>An aab file, containing any of the above,</li> <li>A jar file, containing any of the above,</li> <li>An aar file, containing any of the above,</li> <li>A war file, containing any of the above,</li> <li>An ear file, containing any of the above,</li> <li>A jmod file, containing any of the above,</li> <li>A zip file, containing any of the above,</li> <li>A directory (structure), containing any of the above.</li> </ul> <p>The paths of directly specified class files and resource files is ignored, so class files should generally be part of a jar file, an aar file, a war file, an ear file, a zip file, or a directory. In addition, the paths of class files should not have any additional directory prefixes inside the archives or directories.</p> <p>Each output entry can be:</p> <ul> <li>An apk file, in which all processed and converted class files and   resource files will be collected.</li> <li>An aab file, in which any and all of the above will be collected,</li> <li>A jar file, in which any and all of the above will be collected,</li> <li>An aar file, in which any and all of the above will be collected,</li> <li>A war file, in which any and all of the above will be collected,</li> <li>An ear file, in which any and all of the above will be collected,</li> <li>A jmod file, in which any and all of the above will be collected,</li> <li>A zip file, in which any and all of the above will be collected,</li> <li>A directory, in which any and all of the above will be collected.</li> </ul> <p>When writing output entries, DexGuard generally packages the results in a sensible way, reconstructing the input entries as much as required. Writing everything to an output directory is the most straightforward option: the output directory will contain a complete reconstruction of the input entries. The packaging can be almost arbitrarily complex though: you could process an entire application, packaged in a zip file along with its documentation, writing it out as a zip file again. The Examples section shows a few ways to restructure output archives.</p> <p>Files and directories can be specified as discussed in the section on file names below.</p> <p>In addition, DexGuard provides the possibility to filter the class path entries and their contents, based on their full relative file names. Each class path entry can be followed by up to 9 types of file filters between parentheses, separated by semi-colons:</p> <ul> <li>A filter for all jmod names that are encountered,</li> <li>A filter for all aar names that are encountered,</li> <li>A filter for all aab names that are encountered,</li> <li>A filter for all apk names that are encountered,</li> <li>A filter for all zip names that are encountered,</li> <li>A filter for all ear names that are encountered,</li> <li>A filter for all war names that are encountered,</li> <li>A filter for all jar names that are encountered,</li> <li>A filter for all class file names and resource file names that   are encountered.</li> </ul> <p>If fewer than 9 filters are specified, they are assumed to be the latter filters. Any empty filters are ignored. More formally, a filtered class path entry looks like this:</p> <pre><code>classpathentry([[[[[[[[jmodfilter;]aarfilter;]aabfilter;]apkfilter;]zipfilter;]earfilter;]warfilter;]jarfilter;]filefilter)\n</code></pre> <p>Square brackets \"[]\" mean that their contents are optional.</p> <p>For example, \"<code>android.jar(java/**.class,javax/**.class)</code>\" matches all class files in the <code>java</code> and <code>javax</code> directories inside the <code>android</code> jar.</p> <p>For example, \"<code>input.jar(!**.gif,images/**)</code>\" matches all files in the <code>images</code> directory inside the <code>input</code> jar, except gif files.</p> <p>The different filters are applied to all corresponding file types, irrespective of their nesting levels in the input; they are orthogonal.</p> <p>For example, \"<code>input.war(lib/**.jar,support/**.jar;**.class,**.gif)</code>\" only considers jar files in the <code>lib</code> and <code>support</code> directories in the <code>input</code> war, not any other jar files. It then matches all class files and gif files that are encountered.</p> <p>The filters allow for an almost infinite number of packaging and repackaging possibilities. The Examples section provides a few more examples for filtering input and output.</p>"},{"location":"usage.html#filename","title":"File Names","text":"<p>DexGuard accepts absolute paths and relative paths for the various file names and directory names. A relative path is interpreted as follows:</p> <ul> <li>relative to the base directory, if set, or otherwise</li> <li>relative to the configuration file in which it is specified, if any,   or otherwise</li> <li>relative to the working directory.</li> </ul> <p>The names can contain Java system properties (or Ant properties, when using Ant), delimited by angular brackets, '&lt;' and '&gt;'. The properties are automatically replaced by their corresponding values.</p> <p>For example, <code>&lt;java.home&gt;/lib/rt.jar</code> is automatically expanded to something like <code>/usr/local/java/jdk/jre/lib/rt.jar</code>. Similarly, <code>&lt;user.home&gt;</code> is expanded to the user's home directory, and <code>&lt;user.dir&gt;</code> is expanded to the current working directory.</p> <p>Names with special characters like spaces and parentheses must be quoted with single or double quotes. Each file name in a list of names has to be quoted individually. Note that the quotes themselves may need to be escaped when used on the command line, to avoid them being gobbled by the shell.</p> <p>For example, on the command line, you could use an option like <code>'-injars \"my program.jar\":\"/your directory/your program.jar\"'</code>.</p>"},{"location":"usage.html#filefilters","title":"File Filters","text":"<p>Like general filters, a file filter is a comma-separated list of file names that can contain wildcards. Only files with matching file names are read (in the case of input jars), or written (in the case of output jars). The following wildcards are supported:</p> Wildcard Meaning <code>?</code> matches any single character in a file name. <code>*</code> matches any part of a filename not containing the directory separator. <code>**</code> matches any part of a filename, possibly containing any number of directory separators. <p>For example, \"<code>java/**.class,javax/**.class</code>\" matches all class files in the <code>java</code> and <code>javax</code>.</p> <p>Furthermore, a file name can be preceded by an exclamation mark '!' to exclude the file name from further attempts to match with subsequent file names.</p> <p>For example, \"<code>!**.gif,images/**</code>\" matches all files in the <code>images</code> directory, except gif files.</p> <p>The Examples section provides a few more examples for filtering input and output.</p>"},{"location":"usage.html#filters","title":"Filters","text":"<p>DexGuard offers options with filters for many different aspects of the configuration: names of files, directories, classes, packages, attributes, optimizations, etc.</p> <p>A filter is a list of comma-separated names that can contain wildcards. Only names that match an item on the list pass the filter. The supported wildcards depend on the type of names for which the filter is being used, but the following wildcards are typical:</p> Wildcard Meaning <code>?</code> matches any single character in a name. <code>*</code> matches any part of a name not containing the package separator or directory separator. <code>**</code> matches any part of a name, possibly containing any number of package separators or directory separators. <p>For example, \"<code>foo,*bar</code>\" matches the name <code>foo</code> and all names ending with <code>bar</code>.</p> <p>Furthermore, a name can be preceded by a negating exclamation mark '!' to exclude the name from further attempts to match with subsequent names. So, if a name matches an item in the filter, it is accepted or rejected right away, depending on whether the item has a negator. If the name doesn't match the item, it is tested against the next item, and so on. It if doesn't match any items, it is accepted or rejected, depending on the whether the last item has a negator or not.</p> <p>For example, \"<code>!foobar,*bar</code>\" matches all names ending with <code>bar</code>, except <code>foobar</code>.</p>"},{"location":"usage.html#namingschemes","title":"Naming schemes","text":"<p>DexGuard currently offers three naming schemes, which serve as an alternative to providing file-based dictionaries for renaming class and member names.</p> Naming Scheme Description Example <code>&lt;keptnames&gt;</code> Recycle class and member names that were explicitly kept. <code>-obfuscationdictionary &lt;keptnames&gt;</code> <code>&lt;alphabetic&gt;</code> Shortcut for a simple alphabetic naming scheme (like ProGuard). <code>-obfuscationdictionary &lt;alphabetic&gt;</code> <code>&lt;utf8&gt;</code> Use UTF-8 characters. (deprecated: may cause issues on certain devices) <code>-obfuscationdictionary &lt;utf8&gt;</code>"},{"location":"usage.html#keepoverview","title":"Overview of <code>Keep</code> Options","text":"<p>The various <code>-keep</code> options for shrinking and obfuscation may seem a bit confusing at first, but there's actually a pattern behind them. The following table summarizes how they are related:</p> Keep From being removed or renamed From being renamed Classes and class members <code>-keep</code> <code>-keepnames</code> Class members only <code>-keepclassmembers</code> <code>-keepclassmembernames</code> Classes and class members, if class members present <code>-keepclasseswithmembers</code> <code>-keepclasseswithmembernames</code> <p>Each of these <code>-keep</code> options is of course followed by a specification of the classes and class members (fields and methods) to which it should be applied.</p> <p>If you're not sure which option you need, you should probably simply use <code>-keep</code>. It will make sure the specified classes and class members are not removed in the shrinking step, and not renamed in the obfuscation step.</p> <ul> <li>If you specify a class, without class members, DexGuard only preserves the class and its parameterless constructor as entry points. It may still remove, optimize, or obfuscate its other class members.</li> <li>If you specify a method, DexGuard only preserves the method as an entry point. Its code may still be optimized and adapted.</li> </ul>"},{"location":"usage.html#keepoptionmodifiers","title":"Keep Option Modifiers","text":"<code>includedescriptorclasses</code> Specifies that any classes in the type descriptors of the methods and   fields that the -keep option keeps should be kept as well. This is   typically useful when keeping native method names, to   make sure that the parameter types of native methods aren't renamed either.   Their signatures then remain completely unchanged and compatible with the   native libraries. <code>includecode</code> Specifies that code attributes of the methods that the -keep   option keeps should be kept as well, i.e. may not be optimized or obfuscated.   This is typically useful for already optimized or obfuscated classes,   to make sure that their code is not modified during optimization. <code>allowshrinking</code> Specifies that the entry points specified in the -keep option may   be shrunk, even if they have to be preserved otherwise. That is, the entry   points may be removed in the shrinking step, but if they are necessary after   all, they may not be optimized or obfuscated. <code>allowoptimization</code> Specifies that the entry points specified in the -keep option may   be optimized, even if they have to be preserved otherwise. That is, the   entry points may be altered in the optimization step, but they may not be   removed or obfuscated. This modifier is only useful for achieving unusual   requirements. <code>allowobfuscation</code> Specifies that the entry points specified in the -keep option may   be obfuscated, even if they have to be preserved otherwise. That is, the   entry points may be renamed in the obfuscation step, but they may not be   removed or optimized. This modifier is only useful for achieving unusual   requirements. <code>allowmultidexing</code> Deprecated: This modifier is now the default behavior of keep rules. To   specify classes that need to end up in the primary dex, see <code>inmaindex</code>.   Specifies that the entry points specified in the -keep option may   be placed in any secondary dex files, even if they have to be preserved   otherwise. That is, the entry points may be present in a secondary dex file,   but they may not be removed, optimized or renamed. This option is only useful   when you have multiple dex files. <code>inmaindex</code> Specifies that the entry points specified in the -keep option need to   end up in the primary dex file. This option is only useful when you have multiple   dex files. DexGuard already checks which classes need to be in the primary dex    due to constraints of Android API 19 and below, so this option should rarely be    necessary. <code>asapi</code> This option is only applicable to library projects. Use this to indicate the  public API of your library. When the option is used, it will make sure that all -keep rules without the <code>asapi</code> modifier are added to the consumer rules of the library project. The consumer rules are applied to a consuming app of the library when that app is using a shrinker to prevent them from being modified. For any other purpose, API keep rules are processed exactly the same way as other keep rules."},{"location":"usage.html#keepresourcesoptionmodifiers","title":"Keep Resources Option Modifiers","text":"<code>allowobfuscation</code> Specifies that the resources specified in the    <code>-keepresources</code> option may   be obfuscated, even if they have to be preserved otherwise. That is, the   resources may be renamed in the obfuscation step, but they may not be   removed. This modifier is only useful for achieving unusual requirements. <code>allowencryption</code> Specifies that the resource specified in the    <code>-keepresources</code> option can be encrypted even if its name    should be kept as-is.    This modifier is only useful in combination with    <code>-encryptresource</code>."},{"location":"usage.html#strengthmodifiers","title":"Strength Modifiers","text":"<code>low</code> Specifies that the code of methods specified in the   -obfuscatecode option should be obfuscated with low   strength. The code size of obfuscated methods will slightly increase, while   their runtime performance might decrease slightly. <code>medium</code> Specifies that the code of methods specified in the   -obfuscatecode option should be obfuscated with moderate   strength. The code size of obfuscated methods will increase moderately,   while their runtime performance might decrease. <code>high</code> Specifies that the code of methods specified in the   -obfuscatecode option should be obfuscated with high   strength. The code size of obfuscated methods will increase moderately,   while their runtime performance might decrease considerably. This modifier   should not be used for performance critical methods."},{"location":"usage.html#printconfigurationoptionmodifier","title":"Print Configuration Modifiers","text":"<code>includesensitive</code> Specify that the printed configuration should also include keystore information such as: <ul> <li>keystore location</li> <li>keystore password</li> <li>key alias</li> <li>key password</li> </ul>"},{"location":"usage.html#archivedebugfilesmodifier","title":"Archive Debug Files Modifiers","text":"<code>includeinput</code> Specify that the debug archive should include the unprotected application and its dependencies. <code>includeprotected</code> Specify that the debug archive should include the protected application."},{"location":"usage.html#classspecification","title":"Class Specifications","text":"<p>A class specification is a template of classes and class members (fields and methods). It is used in the various <code>-keep</code> options and in the <code>-assumenosideeffects</code> option. The corresponding option is only applied to classes and class members that match the template.</p> <p>The template was designed to look very Java-like, with some extensions for wildcards. To get a feel for the syntax, you should probably look at the examples, but this is an attempt at a complete formal definition:</p> <pre><code>[@annotationtype] [[!]public|final|abstract|@ ...] [!]interface|class|enum classname\n    [extends|implements [@annotationtype] classname]\n[{\n    [@annotationtype]\n    [[!]public|private|protected|static|volatile|transient ...]\n    &lt;fields&gt; | (fieldtype fieldname);\n\n    [@annotationtype]\n    [[!]public|private|protected|static|synchronized|native|abstract|strictfp ...]\n    &lt;methods&gt; | &lt;init&gt;(argumenttype,...) | classname(argumenttype,...) | (returntype methodname(argumenttype,...));\n\n    [@annotationtype] [[!]public|private|protected|static ... ] *;\n    ...\n}]\n</code></pre> <p>Square brackets \"[]\" mean that their contents are optional. Ellipsis dots \"...\" mean that any number of the preceding items may be specified. A vertical bar \"|\" delimits two alternatives. Non-bold parentheses \"()\" just group parts of the specification that belong together. The indentation tries to clarify the intended meaning, but white-space is irrelevant in actual configuration files.</p> <ul> <li> <p>The <code>class</code> keyword refers to any interface or class. The   <code>interface</code> keyword restricts matches to interface classes. The   <code>enum</code> keyword restricts matches to enumeration classes. Preceding   the <code>interface</code> or <code>enum</code> keywords by a <code>!</code> restricts matches to   classes that are not interfaces or enumerations, respectively.</p> </li> <li> <p>Every classname must be fully qualified, e.g. <code>java.lang.String</code>.   Inner classes are separated by a dollar sign \"<code>$</code>\", e.g.   <code>java.lang.Thread$State</code>. Class names may be specified as regular   expressions containing the following wildcards:</p> Wildcard Meaning <code>?</code> matches any single character in a class name, but not the package separator. For example, \"<code>com.example.Test?</code>\" matches \"<code>com.example.Test1</code>\" and \"<code>com.example.Test2</code>\", but not \"<code>com.example.Test12</code>\". <code>*</code> matches any part of a class name not containing the package separator. For example, \"<code>com.example.*Test*</code>\" matches \"<code>com.example.Test</code>\" and \"<code>com.example.YourTestApplication</code>\", but not \"<code>com.example.mysubpackage.MyTest</code>\". Or, more generally, \"<code>com.example.*</code>\" matches all classes in \"<code>com.example</code>\", but not in its subpackages. <code>**</code> matches any part of a class name, possibly containing any number of package separators. For example, \"<code>**.Test</code>\" matches all <code>Test</code> classes in all packages except the root package. Or, \"<code>com.example.**</code>\" matches all classes in \"<code>com.example</code>\" and in its subpackages. <code>&lt;n&gt;</code> matches the n'th matched wildcard in the same option. For example, \"<code>com.example.*Foo&lt;1&gt;</code>\" matches \"<code>com.example.BarFooBar</code>\". <p>For additional flexibility, class names can actually be comma-separated lists of class names, with optional <code>!</code> negators, just like file name filters. This notation doesn't look very Java-like, so it should be used with moderation. For convenience and for backward compatibility, the class name <code>*</code> refers to any class, irrespective of its package, when used on its own (e.g. <code>-keep class *</code>).</p> </li> <li> <p>The <code>extends</code> and <code>implements</code> specifications are typically used to   restrict classes with wildcards. They are currently equivalent,   specifying that only classes extending or implementing the given   class (directly or indirectly) qualify. The given class itself is not   included in this set. If required, it should be specified in a separate   option.</p> </li> <li> <p>The <code>@</code> specifications can be used to restrict classes and class   members to the ones that are annotated with the specified   annotation types. An annotationtype is specified just like a   classname.</p> </li> <li> <p>Fields and methods are specified much like in Java, except that   method argument lists don't contain argument names (just like in   other tools like <code>javadoc</code> and <code>javap</code>). The specifications can also   contain the following catch-all wildcards:</p> Wildcard Meaning <code>&lt;init&gt;</code> matches any constructor. <code>&lt;fields&gt;</code> matches any field. <code>&lt;methods&gt;</code> matches any method. <code>*</code> matches any field or method. <p>Note that the above wildcards don't have return types. Only the <code>&lt;init&gt;</code> wildcard has an argument list.</p> <p>Fields and methods may also be specified using regular expressions. Names can contain the following wildcards:</p> Wildcard Meaning <code>?</code> matches any single character in a method name. <code>*</code> matches any part of a method name. <code>&lt;n&gt;</code> matches the n'th matched wildcard in the same option. <p>Types in descriptors can contain the following wildcards:</p> Wildcard Meaning <code>%</code> matches any primitive type (\"<code>boolean</code>\", \"<code>int</code>\", etc) or \"<code>void</code>\" type. <code>?</code> matches any single character in a class name. <code>*</code> matches any part of a class name not containing the package separator. <code>**</code> matches any part of a class name, possibly containing any number of package separators. <code>***</code> matches any type (primitive or non-primitive, array or non-array). <code>...</code> matches any number of arguments of any type. <code>&lt;n&gt;</code> matches the n'th matched wildcard in the same option. <p>Note that the <code>?</code>, <code>*</code>, and <code>**</code> wildcards will never match primitive types. Furthermore, only the <code>***</code> wildcards will match array types of any dimension. For example, \"<code>** get*()</code>\" matches \"<code>java.lang.Object getObject()</code>\", but not \"<code>float getFloat()</code>\", nor \"<code>java.lang.Object[] getObjects()</code>\".</p> </li> <li> <p>Constructors can also be specified using their short class names   (without package) or using their full class names. As in the Java   language, the constructor specification has an argument list, but no   return type.</p> </li> <li> <p>The class access modifiers and class member access modifiers are   typically used to restrict wildcarded classes and class members.   They specify that the corresponding access flags have to be set for   the member to match. A preceding <code>!</code> specifies that the   corresponding access flag should be unset.</p> <p>Combining multiple flags is allowed (e.g. <code>public static</code>). It means that both access flags have to be set (e.g. <code>public</code> and <code>static</code>), except when they are conflicting, in which case at least one of them has to be set (e.g. at least <code>public</code> or <code>protected</code>).</p> <p>DexGuard supports the additional modifiers <code>synthetic</code>, <code>bridge</code>, and <code>varargs</code>, which may be set by compilers.</p> </li> </ul>"},{"location":"about/license.html","title":"License","text":"<p>License, services and maintenance  Agreement</p> <p>Version July 2020</p> <p>This agreement (the \u201cAgreement\u201d) is concluded on the date of last signature of the Order in which it is included by reference (the \u201cEffective Date\u201d) by and between the GuardSquare group contracting entity specified in the relevant Order (\u201cGuardsquare\u201d), and the client contracting entity specified in the relevant Order (the \u201cClient\u201d). </p> <p>Guardsquare and the Client may individually be referred to as a \u201cParty\u201d and jointly as \u201cthe Parties\u201d.</p>"},{"location":"about/license.html#preamble","title":"PREAMBLE","text":"<p>Whereas Guardsquare has developed and owns certain software and is in the business of licensing such software and providing support, maintenance and other professional services in connection with such software; Whereas the Client wishes to obtain from Guardsquare the right to use such software and to be provided with support and other services in connection with such software;  Whereas Guardsquare is willing to license such software to the Client and to provide the Client with maintenance and support services and other professional services in connection with such software as set forth in this Agreement.</p> <p>NOW THEREFORE, the Parties hereby agree as follows:</p>"},{"location":"about/license.html#1-definitions","title":"1. Definitions","text":"<p>1.1 When used in this Agreement, the following terms shall have the meaning ascribed to them below: - \u201cAcceptance Date\u201d means the date on which the Licensed Products or Deliverables (as applicable) are agreed by the Client to conform to the relevant Specifications;  - \u201cApplications\u201d means the (number of) applications as specified in an Order. An Application, published by the Client, may be used by several Client end users in which case the code, assets and libraries of the Application will be identical for each end user;  - \u201cConfidential Information\u201d of a Party means the information of such Party, whether in written, oral, electronic or other form, which (i) is explicitly marked as confidential or proprietary, or (ii) should reasonably be considered confidential given its nature or the circumstances surrounding its disclosure, regardless of whether or not it is expressly marked as confidential, including (without being limitative) information and facts concerning a Party\u2019s and its affiliates\u2019 business plans, clients, prospects, personnel, suppliers, licensors, licensees, partners, investors, affiliates or others, training methods and materials, financial information, marketing plans, sales prospects, client lists, inventions, program devices, discoveries, ideas, concepts, know-how, techniques, formulas, blueprints, software (in object and source code form), documentation, designs, prototypes, methods, processes, procedures, codes, and any technical or trade secrets, including all copies of any of the foregoing and any analyses, studies or reports that contain, are based on, or reflect any of the foregoing. The Confidential Information of Guardsquare shall include, without being limitative, the Software and the Documentation;  - \u201cCustomisations Support Fee\u201d means the fees for the Support Services in respect of software Deliverables to the extent expressly agreed (in an Order) to be included under the Support Services; - \u201cDeliverable\u201d means a deliverable to be provided by Guardsquare pursuant to, and designated as such in, an Order; - \u201cDelivery Date\u201d means the agreed date on which the Licensed Products are made available to the Client by Guardsquare (which may include making available for download from a secure FTP site); - \u201cDocumentation\u201d means the operating manual, including a description of the functions performed by the Software, user instructions, and all other related materials (excluding marketing material and any information posted on a (Guardsquare) website), as ordinarily supplied by Guardsquare to its customers to facilitate the use of the Software;   - \u201cEmployee\u201d means an individual who is hired pursuant to an employment contract in exchange for a wage. Agents, distributors, advisors, consultants, freelancers, (self-employed) (sub)contractors or any other third party shall not be considered Employees for the purposes of this Agreement; - \u201cFeedback\u201d means any suggestions or recommendations for improvement or modifications to the Software made by or on behalf of the Client;  - \u201cFees\u201d means the License Fees, Professional Services Fees, Support Fees, and fees in respect of General Support, and any other amounts payable by the Client to Guardsquare pursuant to this Agreement, as set out in an Order or as otherwise agreed in writing between duly authorized representatives of the Parties; - \u201cGeneral Support\u201d means any support and maintenance services requested by the Client that are not in scope of the Support Services contracted by the Client (namely Basic Support or Gold Support, as specified in the relevant Order); - \u201cIntellectual Property Rights\u201d means patents, trade marks, service marks, trade secrets, copyrights, design rights, know how, Confidential Information, trade and business names, domain names, database rights, sui generis rights (including in software), rental rights and any other intellectual or industrial property or similar right throughout the world (whether registered or unregistered), including applications for registration, renewals, extensions, continuations, divisions, reissues or improvements relating to any of these rights and the right to apply for, maintain and enforce any of the preceding items;  - \u201cInternal Business Purposes\u201d means use of the Software for the purpose for which it is licensed (as per the terms of the Documentation, Specifications and the license terms set out in this Agreement) with respect to the licensed (number of) Applications and SDKs only, excluding (without being limitative) sublicensing, reselling, redistribution, or otherwise commercializing or making the Software available to third parties (whether or not at a charge), and use of the Software with respect to applications or libraries other than the Applications and SDKs or with respect to Applications or SDKs that are not published by the Client; - \u201cLicense Fees\u201d means the annually recurring fees payable by the Client in respect of the user rights in respect of the Licensed Products granted hereunder, which License Fees also include \u2018Basic Support\u2019 Support Services; - \u201cLicense Parameters\u201d means the parameters defining and restricting the scope of the Software user rights granted pursuant to Section 2 of this Agreement, as specified in an Order and/or invoices issued by Guardsquare. License Parameters may include (non-exhaustive list) the (number of) Applications and SDKs, App Package names, Application names, SDK/library names, territorial restrictions, industry sector restrictions, number of Client end users and developers; - \u201cLicensed Products\u201d means the Software and the Documentation; - \u201cObject Code\u201d (or Bytecode) means software assembled or compiled in magnetic or electronic binary form on software media that is readable and usable by machines but not generally readable by humans without reverse assembly, reverse compiling or reverse engineering; - \u201cOrder\u201d means an order entered into between the Parties pursuant to this Agreement, for the purchasing of Software licenses by the Client and the delivery of Support Services and/or Professional Services by Guardsquare to the Client; - \u201cApp Package Name\u201d means the unique identifier of an Application (e.g. as per the app/build.gradle file), which is also unique in the Google Play store; - \u201cProfessional Services\u201d means Software development, implementation and integration services, training, reviewing and testing services, or such other services in relation to the Software as may be agreed between the Parties from time to time, in an Order (but excluding Support Services); - \u201cProfessional Services Fees\u201d means the Fees payable by the Client in respect of the Professional Services and Deliverables, as set out in the relevant Order; - \u201cSchedule\u201d means a schedule to this Agreement, if any; - \u201cSDK\u201d means the (number of) libraries as specified in an Order. An SDK, published by the Client, may be used by several Client end users in which case the code, assets and libraries of the SDK will be identical for each end user; - \u201cSoftware\u201d means the software listed in an Order, licensed to the Client by Guardsquare in accordance with the terms of this Agreement; - \u201cSource Code\u201d means the Software written in programming languages including all comments and procedural code such as job control language statements, in a form intelligible to programmers trained in and knowledgeable of the Software, and capable of being translated into the Object Code form of the Software for operation on computer equipment through assembly or compiling; - \u201cSpecifications\u201d means the specifications for the Software or Deliverables, as applicable, as expressly agreed in writing between the Parties;  - \u201cSupport Fees\u201d means the fees for the Support Services in respect of the Software. Support Fees payable in respect of the \u2018Basic Support\u2019 Support Services are included in the License Fees. \u2018Gold Support\u2019 Support Services shall be charged at an additional fee, as per the terms of the relevant Order; - \u201cSupport Services\u201d means \u2018Basic Support\u2019 or \u2018Gold Support\u2019, as specified in Section 4 of this Agreement; - \u201cWorking Day\u201d means any day except Saturday, Sunday or an official holiday in Guardsquare\u2019s or the Client\u2019s country of incorporation, as applicable.</p> <p>1.2    In this Agreement (unless the context requires otherwise):     a) Words importing the singular include the plural, words importing a particular gender include the other gender and words importing persons include bodies corporate and incorporate; and each case vice versa;     b) The headings and captions contained in this Agreement are for convenience only and shall not affect the meaning, construction or interpretation of this Agreement or of any of its terms or provisions;     c) Whenever the word \u201cinclude(s)\u201d or \u201cincluding\u201d is used in this Agreement, the enumeration that follows shall be deemed to be non-exhaustive.</p> <p>1.3    In the event of a conflict between the terms of the Agreement and a Schedule, the latter shall prevail (unless expressly stipulated otherwise in the relevant Schedule).</p>"},{"location":"about/license.html#2-license","title":"2. License","text":"<p>2.1    Subject to the terms and conditions of this Agreement and timely payment of the License Fees by the Client, Guardsquare hereby grants to the Client a personal, restricted, non-exclusive, non-transferable, non-assignable license, without the right to sublicense, for the term specified in the relevant Order, to use the Licensed Products in accordance with the Documentation, in Object Code form only, exclusively in combination with the licensed (number of) Applications and SDKs and in accordance with the License Parameters, for the Client\u2019s Internal Business Purposes. The license shall commence on the Delivery Date of the Licensed Products, and shall continue unless and until terminated in accordance with the terms of this Agreement and the relevant Order.</p> <p>2.2    The extent of the license granted under Section 2.1 is restricted to the scope expressly set forth herein, and there are no implied licenses under this Agreement. Guardsquare reserves any right in or to the Licensed Products not expressly granted to the Client hereunder. The Client acknowledges and agrees that any use of the Licensed Products outside the scope of the license granted under Section 2.1., unless such use has been expressly approved in writing by a Guardsquare duly authorized representative, will entitle Guardsquare to immediately terminate (or alternatively, at Guardsquare\u2019s option, suspend) the license granted hereunder and/or the Agreement for material breach by Client, without any formalities being required and without prejudice to any other right or remedy available to Guardsquare pursuant to this Agreement or under applicable law.  </p> <p>2.3     The Client may not provide access to the Software or the Documentation to any third party other than its Employees who need such access in connection with the performance of their responsibilities to the Client, subject always to the license terms set forth in this Agreement, and who have committed in writing to confidentiality provisions at least as stringent as those set forth herein. Guardsquare shall provide the Client with one copy of the Documentation (in a format and through such means as reasonably determined by Guardsquare), which copy shall not be distributed to third parties and otherwise shall be subject to the restrictions contained in this Section 2. Additional copies of the Documentation can be made available at a charge, at the Client\u2019s reasonable request.</p> <p>2.4    The Client agrees that it shall not itself, or through any affiliate, agent, (sub)contractor or other third party:  (i) use the Software or Documentation other than for the Client\u2019s Internal Business Purposes and in connection with the Applications and SDKs;  (ii) sell, lease, commercialize, rent, display, license, sublicense, transfer, provide, disclose, or otherwise make available to, or permit the use of or access to, the Software or the Documentation, in whole or in part, to any third party, whether or not related to the Client, except as expressly permitted in this Agreement;  (iii) modify the Software or Documentation or develop any derivative works based on the Software, Documentation or any Confidential Information of Guardsquare;  (iv) use the Software except as expressly authorized herein;  (v) decompile, disassemble, reverse engineer or attempt to reconstruct, identify or discover any Source Code, underlying ideas, underlying user interface techniques or algorithms of the Software by any means whatsoever (except to the extent such restriction is prohibited under applicable law), or disclose any of the foregoing;  (vi) encumber or suffer to exist any lien or security interest on the Licensed Products;  (vii) take any action that would cause the Software, the Source Code or the Documentation to be placed in the public domain;  (viii) use the Software in an environment not expressly permitted under this Agreement;  (ix) remove or alter any copyright or other proprietary notice on any of the Licensed Products; or   (x) make any Software functionality in any way visible or accessible, or otherwise disclose it, to any third party (including Client\u2019s end users), whether on a standalone basis or embedded in the Client\u2019s products (e.g. in Client\u2019s Applications or SDKs); the Client shall take all such (technical and organizational) (security) measures, including in respect of its own products (including the Applications and SDKs) as is necessary to protect the Software against such unauthorized access or other disclosure. </p> <p>Upon Guardsquare\u2019s request, the Client shall provide Guardsquare with such information, certifications and access to its systems as may reasonably be requested by Guardsquare to verify compliance with the license terms and restrictions on the use of the Licensed Products as set forth herein.</p> <p>2.5     The Client acknowledges and agrees that any modification or attempted modification of the Licensed Products by any party other than Guardsquare will void Guardsquare\u2019s warranties with respect to the Licensed Products and will be deemed to represent a material breach of this Agreement by the Client.</p> <p>2.6    The Client shall maintain up-to-date electronic records of the number of copies of the Licensed Products in its possession and/or under its control at any given point in time and their locations and, upon Guardsquare\u2019s first request, shall forthwith provide Guardsquare with such records.</p> <p>2.7    The Client shall comply with all applicable laws relating to the use of the Licensed Products. The Client acknowledges and agrees that the Licensed Products may include encryption and may, accordingly, be subject to additional export or other restrictions which the Client agrees to comply with.</p>"},{"location":"about/license.html#3delivery-and-acceptance","title":"3.Delivery and acceptance","text":"<p>3.1     Guardsquare shall deliver the Licensed Products and Deliverables to the Client on the Delivery Date. The Delivery Date shall be the Licensed Products and Deliverables (as applicable) Acceptance Date, on which the Licensed Products and Deliverables (as applicable) shall be deemed accepted by the Client for their use as permitted under this Agreement, and as of which the Software (and the software Deliverables to the extent expressly agreed to be in scope of the Support Services) shall be supported by Guardsquare as set out in Section 4 of this Agreement, subject to timely payment of the Support Fees (and Customisations Support Fees, as applicable). From the time of delivery, all risk relating to loss of or damage to the Licensed Products and Deliverables shall pass to the Client.</p> <p>3.2    Upon Guardsquare\u2019s first request, the Client shall without undue delay provide Guardsquare with a duly signed Software and software Deliverable delivery acknowledgement and/or acceptance form, in a Guardsquare approved format.</p>"},{"location":"about/license.html#4-support-services","title":"4. Support Services","text":"<p>4.1    Guardsquare shall provide the Client with the Support Services and/or General Support in accordance with this Section 4 and the relevant Order, provided the Client pays the applicable Support Fees (and Customisations Support Fees where applicable) and Fees for General Support as set forth in the relevant Order.</p> <p>The Support Services may consist of \u2018Basic Support\u2019 or \u2018Gold Support\u2019. Whether \u2018Basic Support\u2019 or \u2018Gold Support\u2019 applies shall be specified in the relevant Order.</p> <ul> <li>\u2018Basic Support\u2019 consists of the following*:Software updates and basic support for installing the Software in build processes (with Gradle, Maven, Ant, Eclipse) and support for resolving Software issues, such as bugs. The Basic Support response time is 3 Working Days from receipt of a duly reported support request (as per the process set out below). Support is provided by email only.</li> <li>\u2018Gold Support\u2019 consists of the following*:Basic Support, provided that the response time is 1 Working Day from receipt of a duly reported support request (as per the process set out below), and full, step by step project assistance for configuring and troubleshooting Software settings. Support may be provided by email or phone. </li> </ul> <p>In summary*:</p> <p>\u27a2 Basic Support: bug fixes, setup assistance, response within 3 business days, support by e-mail.  \u27a2 Gold Support: bug fixes, setup assistance, project-specific support, configuration optimization, priority handling within 1 business day, support by e-mail and phone.</p> <p>*as may be updated by Guardsquare from time to time</p> <p>Support Services cover the current version of the Software (as per Guardsquare\u2019s software versioning scheme). Bug fixing covered by the Support Services only covers defects attributable to the Software or to Guardsquare. Any onsite support is not in scope of the Support Services and, if requested by the Client, shall be additionally charged to the Client as General Support.</p> <p>The Client acknowledges and agrees that Guardsquare does not wish to receive any personal or other sensitive data (whether related to the Client, the Client\u2019s customers or otherwise) in providing the Support Services or General Support (unless expressly otherwise requested by Guardsquare for the purposes of fulfilling its obligations hereunder), and the Client undertakes to sanitise (including through anonymisation) any (personal) data submitted to Guardsquare for the purposes of the Support Services or General Support. If the Client fails to meet this obligation (save where Guardsquare expressly requested to receive such data), Guardsquare cannot be held to be in breach of any data protection, information security or confidentiality obligations under the Agreement by processing such data in performing the Support Services or General Support and cannot incur any liability, liquidated damages or penalties in this respect.</p> <p>4.2    Support process:</p> <p>The Client shall appoint one or more representatives that are authorised to request Support Services and General Support. The Client may replace its authorized representatives from time to time by prior written notice to Guardsquare (including by email to the designated email address). Whenever the Client requires Guardsquare to perform either Support Services or General Support pursuant to this Section 4, the Client shall submit a request by means of its authorised representatives.</p> <p>The service desk may be contacted directly by email in case of Basic Support, and by email or telephone if Gold Support. Guardsquare shall provide contact details for the service desk to the Client and shall inform the Client of any changes to those contact details. When reporting issues to the service desk, the Client will provide the necessary diagnostic information to enable Guardsquare to reproduce any reported defect and adequately address the Client support request. </p> <p>The service desk contact details are as follows (as may be updated from time to time by Guardsquare):</p> <p>\u27a2 Email: support@Guardsquare.com \u27a2 Telephone Guardsquare: +32 16 920 646 \u27a2 Download site: https://www.Guardsquare.com</p>"},{"location":"about/license.html#5-intellectual-property-rights","title":"5. Intellectual Property Rights","text":"<p>5.1    Licensed Products. The Software (in Object Code and Source Code form) and Documentation, and all copies thereof, including any rights, title and interest (including any Intellectual Property Rights) therein, shall at all times remain the sole and exclusive property of Guardsquare and/or its licensors, and the Client shall not obtain any rights, title or interest (including any Intellectual Property Rights) therein except for the restricted user rights expressly granted hereunder. The Client hereby acknowledges that Guardsquare and its licensors shall retain all right, title and interest (including any Intellectual Property Rights) to any derivative works (in Object Code and Source Code form) of the Software and Documentation (including to any customization, enhancement, modification, improvement, update, upgrade or new release of the Software and the Documentation). In the event that, notwithstanding any prohibition thereto, the Client (or any third party acting on its behalf or under its control) modifies or creates derivative works from the Software or Documentation (collectively \u201cImprovements\u201d), Guardsquare shall automatically and irrevocably own all right, title and interest, including any Intellectual Property Rights, in and to such Improvements and the Client hereby assigns any rights (including Intellectual Property Rights) in such Improvements to Guardsquare and agrees to secure any additional confirmations, assignments and other instruments and documents as may be necessary to vest title to any such Improvements in Guardsquare as contemplated by this Section 5.1. No amount shall be payable by Guardsquare to the Client for the assignment of such rights in the Improvements as set forth herein.</p> <p>5.2     Deliverables. Guardsquare shall own all rights, title and interest, including any Intellectual Property Rights, in Deliverables developed by Guardsquare pursuant to the Agreement, and subject to timely payment of the corresponding Professional Services Fees, Guardsquare shall grant the Client the right to use such Deliverables on terms identical to those contained in Section 2 of the Agreement.</p> <p>Subject to Guardsquare\u2019s obligation of confidentiality as set forth in the Agreement, nothing in the Agreement, its Schedules or an Order shall prevent Guardsquare from acquiring, developing, marketing, using for itself or providing to third parties deliverables that are similar or identical to the Deliverables. Notwithstanding anything to the contrary in this Agreement, its Schedules or an Order,  (i) Guardsquare shall be free to use the ideas, concepts, methodologies, processes and know-how developed or learned by Guardsquare in the course of performing the Professional Services, and  (ii) Guardsquare shall in any event retain all rights, title and interest (including any Intellectual Property Rights) in its Pre-existing Intellectual Property and derivative works thereof. For the purposes of this clause 5.2, Guardsquare\u2019s Pre-existing Intellectual Property includes the proprietary tools, methodologies, materials, know-how, processes, technologies, modules, components, programs, analyses, and frameworks developed or used by Guardsquare prior to the Effective Date or developed independently from this Agreement.</p> <p>5.3    The Client agrees not to remove, obscure or modify in any way any Guardsquare proprietary marking, including any trademark or copyright notice, on or in the Licensed Products and Deliverables or on any Licensed Product or Deliverables media. The Client shall reproduce and incorporate such proprietary markings in any Licensed Product and Deliverable back-up and other copies.</p> <p>5.4     All rights, title and interest, including any Intellectual Property Rights, in any databases created by Guardsquare in connection with the data collected hereunder shall, as between the Parties, at all times remain the sole and exclusive property of Guardsquare, and the Client shall not obtain any rights, title or interest (including any Intellectual Property Rights) therein.  Data collected hereunder shall however remain owned by their respective owners.</p> <p>5.5    The Client agrees to promptly notify Guardsquare if the Client becomes aware that any third party is violating or infringing Guardsquare\u2019s rights of whatever nature in any of the Licensed Products or Deliverables. Guardsquare shall have the right (at its discretion), to prosecute such violator or infringer at its expense and to retain the full amount of any sums recovered as damages. The Client agrees to provide, at Guardsquare\u2019s request and expense, all necessary cooperation to Guardsquare in the event of the commencement of any such proceedings by Guardsquare.</p> <p>5.6    The Client acknowledges and agrees that in order to use the Software and/or the Deliverables, the Client may need to obtain, at the Client\u2019s expense, the right to use any third party software as communicated by Guardsquare from time to time. </p>"},{"location":"about/license.html#6-confidentiality","title":"6. Confidentiality","text":"<p>6.1    Each of the Parties agrees that it shall, both during the term of this Agreement and following termination or expiration of this Agreement  (i) not disclose any Confidential Information of the other Party, except to those of its Employees, officers, directors, contractors and affiliates that have a demonstrable legitimate need to know such information in light of the Parties\u2019 rights and obligations hereunder, subject to each of them committing in writing to confidentiality obligations at least as stringent as those set forth herein prior to being granted access to such Confidential Information and subject to any other conditions and restrictions set out in this Agreement, and  (ii) use any Confidential Information of the other Party only for the purpose of the performance of the Agreement, excluding any use for its own benefit or that of any third party, except as expressly permitted under this Agreement.</p> <p>6.2    Each of the Parties shall ensure that each person to whom it provides/who otherwise receives (directly or indirectly) Confidential Information pursuant to this Agreement is made aware of and complies with the confidentiality obligations under this Agreement as if they were a party to this Agreement. Each of the Parties shall be responsible and liable towards the other Party for a breach of these confidentiality obligations by any party acting under their control or on their behalf or to whom they otherwise provided Confidential Information.</p> <p>6.3    The confidentiality obligations set forth herein shall not apply in respect of information which: (i) is in the public domain at the time of disclosure or subsequently falls into the public domain through no breach of this Section 6 by the receiving Party, provided that the Client acknowledges and agrees that Confidential Information of Guardsquare shall not be deemed to be in the public domain merely because any part of said information is embodied in general disclosures or because individual features, components, or combinations thereof are now, or become, known to the public, through whatever means, including through means of the supply or commercialization of products or services based on or related to such Confidential Information; (ii) was rightfully in the receiving Party\u2019s possession, without any confidentiality restrictions attached to it, prior to receipt of such information from the disclosing Party hereunder; (iii) is rightfully and lawfully obtained from a third party which is not under an obligation of confidentiality with respect to such information; (iv) was independently developed by the receiving Party, without access or reference to, or use of, the disclosing Party\u2019s Confidential Information;</p> <p>each as can be demonstrated and substantiated by the receiving Party in reasonable detail.</p> <p>6.4    The Parties\u2019 confidentiality obligations as set forth herein shall survive termination of the Agreement. Upon termination of the Agreement or a disclosing Party\u2019s earlier written request, the receiving Party shall promptly return to the disclosing Party or destroy (at the disclosing Party\u2019s option) all Confidential Information of the disclosing Party in its possession or under its control.</p>"},{"location":"about/license.html#7-fees","title":"7. Fees","text":"<p>7.1    As consideration for the Software licenses granted pursuant to an Order and for the Support Services/General Support and Professional Services, the Client agrees to pay to Guardsquare the Fees, in accordance with the invoicing schedule set forth in the relevant Order or other written agreement between the Parties. Expenses (including travel (incl. local transport and flights), accommodation and out-of-pocket expenses) incurred by Guardsquare in furtherance of this Agreement shall be charged to the Client at Guardsquare\u2019s cost, in addition to the Fees. Where reasonably possible, such expenses shall be subject to the Client\u2019s prior consent (such consent not to be unreasonably delayed or withheld) and shall be evidenced by receipts.</p> <p>7.2    Undisputed invoices are due and payable by the Client within thirty (30) days from the invoice date. All payments made by the Client to Guardsquare under this Agreement shall be final and non refundable. The amount of any invoice which has not been paid within thirty (30) days from the invoice date shall automatically be subject to a late payment interest equal to 1.5% per month, which interest shall be compounded daily as of the due date until receipt of full payment by Guardsquare. In addition, the Client shall pay all costs incurred by Guardsquare as a result of the (extra)judicial enforcement of the Client\u2019s payment obligations hereunder. If the Client fails to pay any outstanding amounts by the due date, Guardsquare may also suspend its obligations and the Client\u2019s (user) rights hereunder until receipt of payment of such outstanding amounts.</p> <p>7.3     All Fees payable to Guardsquare under this Agreement shall be paid without the right to set off or counterclaim.</p> <p>7.4    If the Client disputes any portion of an invoice, the Client shall notify Guardsquare without undue delay and in any event within the payment term of the nature of any such dispute, the basis for the Client\u2019s dispute and the amount involved, together with any appropriate information supporting Client\u2019s position, failure of which shall result in the invoice being deemed accepted by the Client. The undisputed portion of the invoice shall be paid as set forth herein. </p> <p>7.5    Sums stated to be payable under this Agreement do not include any applicable taxes, which shall be additionally charged to and paid by the Client. All fees payable to Guardsquare under this Agreement shall be paid free and clear of all deductions and withholdings whatsoever unless the same are required by law, in which case the Client undertakes to pay Guardsquare such additional amounts as is necessary in order that the net amounts received by Guardsquare after all deductions and withholdings shall not be less than such payments would have been in the absence of such deductions or withholding.</p> <p>7.6    Guardsquare may annually (starting 1 January following the Effective Date) increase the Professional Services Fees (including any agreed rate card), the License Fees and the (Customisations) Support Fees (as well as any other recurring Fee component as may exist from time to time) on the basis of the Belgian consumer price index, without any formalities being required.</p> <p>7.7    The Client shall keep accurate business records of its use of the Licensed Products for as long as it is entitled to use the Licensed Products as per the terms of this Agreement. Such business records must include details of the License Parameters. The Client shall retain those records for at least three years (3) after any termination of its right to use the relevant Licensed Products. Guardsquare and/or its agents may inspect and review such business records, the Client\u2019s premises and any other information relevant to verify the Client\u2019s compliance with this Agreement upon reasonable notice (except where such notice would defeat the purpose of the audit), during normal business hours during the term of the Client\u2019s user rights hereunder and for a period of three (3) years thereafter, provided that such inspection right may not be exercised more than twice during any calendar year period, except where Guardsquare has reasonable grounds to believe the Client is acting in breach of this Agreement. If such inspection shows that the Client has underpaid the amount of Fees due to Guardsquare (without limitation, as a result of the Client using the Software in excess of the licensed License Parameters), without prejudice to any other rights and remedies available to Guardsquare hereunder, the Client shall promptly pay the amount of any such underpayment to Guardsquare together with any applicable late payment interest (as per clause 7.2 hereof). The Client and Guardsquare shall each bear their own cost related to any such review and inspection, provided that in the event of an underpayment by the Client or any other contractual breach as determined by such review and inspection, all costs related to such review and inspection shall be borne by the Client, without prejudice to any other rights and remedies available to Guardsquare hereunder. </p>"},{"location":"about/license.html#8-warranties","title":"8. Warranties","text":"<p>8.1     Guardsquare warrants to the Client as follows: (a)    Guardsquare is a corporation duly organized and validly existing under the laws of its incorporation and has all requisite power and authority to execute and deliver this Agreement and to perform its obligations hereunder. The execution, delivery and performance of this Agreement have been duly authorized by all requisite action on the part of Guardsquare and this Agreement constitutes the legal, valid and binding obligation on Guardsquare, enforceable in accordance with its terms. (b)    Guardsquare shall perform the Agreement in a professional manner, using reasonable skill and care. (c)    Except as expressly set forth in this Section 8, the Licensed Products, Deliverables, Professional Services and Support Services/General Support are provided \u201cas is.\u201d The express warranties set forth in this section 8 are the only warranties made by Guardsquare with respect to this Agreement. Guardsquare makes no other warranties, express or implied, including warranties of merchantability and fitness for a particular purpose. The Client shall have the sole responsibility to adequately protect and backup its data and equipment used in connection with the Software.</p> <p>8.2    The Client warrants to Guardsquare as follows: (a) the Client is duly organized, validly existing and in good standing under the laws of its incorporation and has all requisite power and authority to execute and deliver this Agreement and to perform its obligations hereunder, and the execution, delivery and performance of this Agreement have been duly authorized by all requisite action on the part of the Client and this Agreement constitutes the legal, valid and binding obligation of the Client, enforceable in accordance with its terms. (b) the information provided by the Client for Guardsquare to be able to determine the License Parameters (without limitation, the (number of) Applications and SDKs, number of Client end users and developers, (number of) App Package names) and thus also the License Fees, is correct. (c) the Applications and SDKs will be published by the Client. If at any time during this Agreement, the Client notices or suspects that wrong assumptions have been made or any of these warranties prove incorrect, it shall promptly notify Guardsquare thereof in writing.</p>"},{"location":"about/license.html#9-indemnification","title":"9. Indemnification","text":"<p>9.1    Guardsquare shall defend and indemnify the Client as specified herein against any claims brought by third parties to the extent such claim is based on an infringement of the Intellectual Property Rights of such third party by the Licensed Products and excluding any claims resulting from (i) the unauthorized use of the Licensed Products, (ii) the modification of any of the Licensed Products other than by Guardsquare, (iii) failure to use the most recent version of the Licensed Products made available to the Client, or failure to integrate or install any corrections to such Licensed Products issued by Guardsquare, if Guardsquare indicated that such update or correction was required to prevent a(n) (potential) infringement, (iv) use of the Licensed Products in combination with any non-Guardsquare products or services, or (v) the Software having been developed to the Client\u2019s design or incorporating documents, materials, ideas, data or other information, provided by or on behalf of the Client. Such indemnity obligation shall be conditional upon the following: (i) Guardsquare is given prompt written notice of any such claim; (ii) Guardsquare is granted sole control of the defense and settlement of such a claim; (iii) upon Guardsquare\u2019s request, the Client fully cooperates with Guardsquare in the defense and settlement of such a claim, at Guardsquare\u2019s expense; and (iv) the Client makes no admission as to Guardsquare\u2019s liability in respect of such a claim, nor does the Client agree to any settlement in respect of such a claim without Guardsquare\u2019s prior written consent. Provided these conditions are met, Guardsquare shall indemnify the Client for the damages and costs incurred by the Client as a result of such a claim, as awarded by a competent court of final instance or as agreed to by Guardsquare pursuant to a settlement agreement.</p> <p>9.2    In the event the Licensed Products, in Guardsquare\u2019s reasonable opinion, are likely to become or become the subject of a third-party infringement claim (as per clause 9.1), Guardsquare shall have the right, at its sole option and expense, to: (i) modify the ((allegedly) infringing part of the Licensed Products so that they become non-infringing while preserving equivalent functionality; (ii) obtain for the Client a license to continue using the Licensed Products in accordance with this Agreement; or (iii) terminate the relevant license and pay to the Client an amount equal to a pro rata portion of the License Fee paid to Guardsquare hereunder for that portion of the Licensed Products which is the subject of such infringement, such portion equaling any pre-paid Fees covering the period after actual termination. </p> <p>9.3    The foregoing states the entire liability and obligation of Guardsquare and the sole remedy of the Client with respect to any infringement or alleged infringement of any Intellectual Property Rights caused by the Licensed Products or any part thereof. </p>"},{"location":"about/license.html#10-limitations-on-liability","title":"10. Limitations on Liability","text":"<p>10.1    To the maximum extent permitted by applicable law, Guardsquare excludes its liability (whether in contract, warranty, tort (including as a result of negligence, product liability or other theory) or otherwise) to the Client or any other person for recovery or recoupment of any investment made by the Client, its affiliates or any third parties acting on their behalf or under their control, in connection with this Agreement, and for any indirect, punitive, special or consequential damages, or damages for loss of profit, revenue, business, contracts or clients, loss or corruption of data, loss of goodwill, reputational harm, opportunity loss, loss of anticipated savings, and the cost of procuring replacement goods or services, arising out of or relating to this Agreement, even if Guardsquare has been advised of the possibility of such costs or damages arising.  </p> <p>10.2    Without prejudice to and without limiting Section 10.1 of this Agreement, to the maximum extent permitted under applicable law, Guardsquare\u2019s liability arising out of or in connection: a)    with this Agreement (other than as covered under (b), (c) and (d) below), whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed the total License Fees (excl. taxes) paid to Guardsquare by the Client under this Agreement during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare\u2019s aggregate liability in this respect shall not exceed the total License Fees (excl. taxes) paid under the Agreement; b)    with the Support Services provided by Guardsquare to Client under this Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed fifty (50) percent of the total License Fees (excl. taxes and expenses) paid to Guardsquare by the Client under this Agreement during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare\u2019s aggregate liability in this respect shall not, per contract year, exceed the total License Fees (excl. taxes and expenses) paid under the Agreement in respect of the relevant contract year; c)    with General Support provided by Guardsquare to Client under this Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed the Fees for General Support (excl. taxes and expenses) paid to Guardsquare by the Client under this Agreement in respect of the General Support to which the applicable liability claim relates during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare\u2019s aggregate liability in this respect shall not exceed the total Fees for General Support (excl. taxes and expenses) paid under the relevant Order in respect of such General Support; d)    with the Professional Services provided by Guardsquare to the Client under the Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory) or otherwise, shall not exceed the total Professional Services Fees (excl. taxes and expenses) paid by the Client to Guardsquare in respect of such Professional Services under the Order to which the liability claim relates during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare\u2019s aggregate liability in this respect shall not exceed the total Professional Services Fees (excl. taxes and expenses) paid under such Order.</p> <p>10.3    The Client agrees that Guardsquare can only be held liable as per the terms of this Section 10 to the extent damages suffered by the Client are directly and solely attributable to Guardsquare. The exclusions and limitations of liability under this Section shall operate to the benefit of Guardsquare\u2019s affiliates and subcontractors under this Agreement to the same extent such provisions operate to the benefit of Guardsquare.</p> <p>10.4    The Client\u2019s exclusive remedy for any claim arising out of or in connection with this Agreement shall be for Guardsquare, upon receipt of written notice, to use reasonable efforts to cure the breach or default at its expense, and failing that, Guardsquare\u2019s liability shall be limited as set forth in this Agreement. The Client shall have a duty to mitigate damages for which Guardsquare is responsible.</p>"},{"location":"about/license.html#11-term-and-termination","title":"11. Term and Termination","text":"<p>11.1    This Agreement shall commence on the Effective Date and shall continue for the term of the Order to which it relates. As a default (unless deviated from in the relevant Order), Orders (including any Software licenses and Support Services contracted pursuant to such an Order) are entered into for an initial one (1) year term (the \u201cInitial Term\u201d). Upon expiry of this Initial Term, the Orders shall automatically renew for successive one (1) year periods (each a \u201cRenewal Term\u201d), unless terminated by either Party on giving at least three (3) months\u2019 written notice prior to the expiry of the Initial Term or then current Renewal Term. Neither Party shall be entitled to terminate the Agreement or an Order in whole or in part for convenience save as expressly permitted herein.</p> <p>11.2    Termination of the Agreement shall not automatically result in termination of any Orders, which must be separately terminated as set forth herein. Time and Material Professional Services (portions of) Orders may be terminated by the Client for convenience only if expressly so stipulated in the relevant Order, on giving such notice as specified in such Order. Fixed price Professional Services (portions of) Orders may not be terminated for convenience, failure of which shall result in the full fixed price becoming payable by the Client upon termination.  </p> <p>11.3    Either Party may terminate this Agreement, the Support Services (if the default relates to the Support Services) or the portion of the Order that is the subject of the default, by written notice to the other Party, if the other Party materially breaches this Agreement, the Support Services related provisions or a specific portion of such Order (as applicable) and fails to (i) cure such breach within thirty (30) days from the date of receipt of a default notice by the defaulting Party, and (ii) make substantial progress to cure such breach and implement a remedial plan that results in a cure of such breach within sixty (60) days from receipt of such default notice, provided that Guardsquare shall be entitled to terminate this Agreement (in whole or in part) (or alternatively suspend its obligations and/or the Client\u2019s user rights granted hereunder) on giving written notice in the event the Client breaches the license terms hereunder or infringes Guardsquare\u2019s Intellectual Property Rights.</p> <p>11.4    Either Party may terminate this Agreement or an Order by written notice to the other Party, effective as of the date of delivery of such notice, if the other Party becomes the subject of a voluntary or involuntary bankruptcy, insolvency or similar proceeding or otherwise liquidates or ceases to do business. Consequences of termination.</p> <p>11.5    Upon termination of an Order for whatever reason, the licenses granted to the Client pursuant to such Order in accordance with Section 2 of this Agreement shall automatically terminate and the Client shall return to Guardsquare all copies (in whatever form or medium) of the Licensed Products.</p> <p>11.6    Upon termination for convenience by the Client of an Order or any of the Licensed Product licenses other than as expressly permitted in Section 11.1, the full License Fees for the Initial Term and then current Renewal Term (as applicable) shall remain payable by the Client. In the event the Client terminates an Order or the Support Services for convenience other than as expressly permitted in Section 11.1, the Support Fees shall remain payable by the Client for the full then current term (Initial Term or then current Renewal Term, as applicable). In the event the Client terminates the Agreement or an Order for convenience other than as expressly permitted in Section 11.2, the full Professional Services Fees and reimbursable expenses payable in respect of such Order shall remain payable by the Client.</p> <p>11.7    In the event Guardsquare terminates the Agreement, Licensed Product licenses, Support Services or an Order pursuant to Sections 11.3 or 11.4, the Client\u2019s payment obligations shall be as per Section 11.6 above.</p> <p>11.8    In the event the Client terminates the Agreement, Support Services or an Order pursuant to Sections 11.3 or 11.4, the Client must pay Guardsquare the Fees and reimbursable expenses payable in respect of any of the aforelisted up to the actual termination date.</p> <p>11.9    The provisions of this Agreement that are expressly or implicitly intended to survive termination, including Sections 5, 6, 7, 8, 10, 11 (consequences of termination) and 12 (as applicable) of this Agreement, shall survive any expiration or termination of this Agreement.</p>"},{"location":"about/license.html#12-miscellaneous","title":"12. Miscellaneous","text":"<p>12.1     All notices hereunder shall be in writing, addressed to the receiving Party's address as set forth below or to such other address as a Party may designate by notice hereunder, and either (i) delivered by hand, (ii) sent by overnight courier, or (iii) sent by registered mail, return receipt requested, postage prepaid:</p> <p>If to Guardsquare to:</p> <p>Depending on the Order contracting entity:</p> <p>\u27a2 GuardSquare NV, Tervuursevest 362 bus 1, 3000 Leuven, Belgium; or \u27a2 GuardSquare Inc., 711 Atlantic Ave Floor 6, Boston, MA 02111, USA.</p> <p>Contact as per the relevant Order.</p> <p>If to the Client to:</p> <p>As per the relevant Order.</p> <p>All notices shall be deemed to have been given either (i) if by hand, at the time of actual delivery thereof to the receiving Party at such Party\u2019s address as provided above, as reasonably demonstrated by the Party serving notice, (ii) if sent by overnight courier, on the day such notice is delivered to the receiving Party at such Party\u2019s address as provided above, as reasonably demonstrated by the Party serving notice, or (iii) if sent by registered mail, three (3) days following the day such mailing is made.</p> <p>12.2    The Client acknowledges that Guardsquare\u2019s performance of this Agreement is dependent on the Client\u2019s cooperation and the Client agrees to cooperate with Guardsquare to enable the latter to adequately perform its obligations under this Agreement. Such cooperation shall include (i) timely making available management decisions, information, approvals and acceptances; and (ii) at no cost to Guardsquare, providing timely and appropriate access to Client facilities, personnel, equipment, resources and systems, including its owned and licensed software, tools, data, databases and methodologies, and any relevant information and documentation (such information and documentation to be accurate and complete) as necessary to facilitate performance of the Agreement.</p> <p>12.3    The Client agrees that it shall not, during the term of this Agreement and for a period of one year after the expiration or termination of this Agreement, without Guardsquare\u2019s prior written consent, directly or indirectly (including through its affiliates or recruitment agencies), hire or otherwise engage, in whatever capacity (including as an employee or consultant), or solicit the services of, any personnel member of Guardsquare or its affiliates, while such person is employed or engaged by Guardsquare or its affiliates and during six months after such employment or engagement ends. For the purpose of this section, \u201chire\u201d means to employ an individual as an employee or engage such individual as an independent contractor, whether on a full-time, part-time or temporary basis.  The Client agrees that it shall not encourage third parties to act in a manner that would constitute a breach of this section, if such action had been performed by the Client.  In case the above non-solicitation/non-hire obligations are not complied with and give rise to actual employment/engagement of Guardsquare\u2019s or its affiliates\u2019 personnel, the Client shall compensate Guardsquare by paying, upon a first request, a lump-sum amount corresponding to twelve times the gross salary/compensation each such person so hired/engaged earned with Guardsquare or its affiliates (as applicable) during the last full month such person worked for Guardsquare or its affiliates.</p> <p>12.4    Any timeframe for performance specified in this Agreement or an Order shall be indicative target dates only, unless expressly stipulated to be binding milestones. </p> <p>12.5    The terms and conditions of this Agreement may be modified or amended only by written agreement executed by a duly authorized representative of both Parties. The terms and conditions of this Agreement may be waived only by a written document signed by the Party entitled to the benefit of such terms or conditions. No such waiver or consent shall be deemed to be or shall constitute a waiver or consent with respect to any other terms or conditions of this Agreement, whether or not similar. Each such waiver or consent shall be effective only in the specific instance and for the purpose for which it was given, and shall not constitute a continuing waiver or consent.</p> <p>12.6    The Client may not assign or transfer this Agreement (whether in whole or in part) to any third party (including without limitation its affiliates) without the prior written consent of Guardsquare. Guardsquare shall be free to transfer or assign the Agreement (whether in whole or in part). Guardsquare shall also be free to subcontract performance of this Agreement to its affiliates, to contractors and to third party service providers without having to obtain the Client\u2019s prior consent, provided that Guardsquare shall remain responsible towards the Client in respect of such subcontracted services.</p> <p>12.7    In the event that any Party is prevented from performing or is unable to perform any of its non-monetary obligations under this Agreement due to any Act of God, fire, casualty, flood, earthquake, war, strike, lockout, epidemic, destruction of production facilities, riot, insurrection, material unavailability, or any other cause beyond the reasonable control of the Party invoking this section, such Party shall give prompt written notice to the other Party, its performance shall be excused, and the time for the performance shall be extended for the period of delay or inability to perform due to such occurrences (or such longer period as is reasonably required as reasonably demonstrated and substantiated by the affected Party).  </p> <p>12.8    The Client acknowledges that, in using the Software pursuant to the Agreement, the Software may collect and process (telemetry) data, which data allows Guardsquare to monitor the Client\u2019s use of the Software and which data may be used by Guardsquare for (among others) marketing, trend analysis, benchmarking purposes, or to further develop the Software.  To the extent such consent is legally required, the Client hereby expressly consents to such data collection and processing. Such data may include (without being limitative) anonymized (namely without sensitive data regarding strings and classes related to Application source code being captured, however such data may still be linked to the Client\u2019s account) configuration data (providing (among others) information regarding the Software features used by the Client), and environmental data (including information regarding the build systems and program languages used by the Client). The actual types of data captured will be detailed in the Documentation (as it may change over time).  The Client may at any time decide to disable these data capturing functionalities, by changing the Software configuration settings to this effect. In such event, no more data capturing as per the terms of this clause will take place once these functionalities have been disabled. The Client will also be able to configure the Software such that the Client obtains a copy of the telemetry data uploaded to Guardsquare, allowing the Client to keep visibility on the data so captured. As at the Effective Date, no personal data is envisaged to be collected or otherwise processed by Guardsquare pursuant to this clause 12.8 (\u201cprocess\u201d and \u201cpersonal data\u201d each as defined in the General Data Protection Regulation (Regulation (EU) 2016/679) (\u201cGDPR\u201d)). If and to the extent Guardsquare is considered \u2013 under applicable law \u2013 to process personal data in capturing and processing data pursuant to this clause, (i) the Client hereby consents to such data processing to the maximum extent permitted under applicable law and subject to the disabling option set out above, and (ii) Guardsquare shall be the data controller (as defined in the GDPR) in respect of such processing and shall comply with its obligations under applicable data protection laws in this respect. In the event such personal data processing were to take place:  - Guardsquare shall inform (posting such information on a designated Guardsquare webpage accessible by the Client shall suffice for such purpose) the Client of the details of such processing as may be required under applicable law; - upon the Client\u2019s reasonable written request and no more than once per Agreement contract year (unless required under applicable law), Guardsquare shall make available to the Client such information as reasonably deemed necessary by Guardsquare to demonstrate its compliance with its personal data processing obligations hereunder (posting such information on a designated Guardsquare webpage accessible by the Client shall suffice for such purpose). To this end, Guardsquare may allow a reputable third-party auditor chosen by Guardsquare to perform audits on the Client\u2019s behalf (to the extent such audit right is available to the Client under applicable law) and the Client hereby authorizes Guardsquare to issue such mandate to the third-party auditor;  - upon the Client\u2019s written request, Guardsquare shall destroy the personal data, subject to Guardsquare retaining any copies as may be required by applicable law.     The Client acknowledges and agrees that Guardsquare may retain and use data collected hereunder for the purposes set out herein during the term of the Agreement as well as after its termination, subject always to any applicable legal limitations in this respect.</p> <p>12.9    Guardsquare may freely use Feedback without attribution or the need for Guardsquare (or any third party) to pay the Client or any third party any royalties or other fees of any kind.</p> <p>12.10    This Agreement and the rights and obligations of the Parties hereunder shall be governed by and construed in accordance with the laws of Guardsquare\u2019s country/state of incorporation without giving effect to the conflict of law principles thereof. The United Nations Convention for the International Sale of Goods shall not apply to this Agreement. In case of any dispute arising in respect of this Agreement, whether during or after its term, the Parties shall first attempt to amicably settle such dispute. Where no such amicable settlement can be reached within a reasonable period from the dispute having arisen, the dispute shall be submitted to the exclusive jurisdiction of the courts of the city/state of incorporation of Guardsquare. </p> <p>12.11    If a court of competent jurisdiction determines any provision, or any portion thereof, of this Agreement to be unenforceable or invalid, then such provision shall be deemed limited to the extent that such court deems it valid or enforceable and the remaining provisions of this Agreement shall nevertheless remain in full force and effect.</p> <p>12.12    The Parties hereto acknowledge and agree that they have participated jointly in the negotiation and drafting of this Agreement and that in the event an ambiguity or question of intent or interpretation arises, this Agreement shall be construed as if drafted jointly by the Parties and no presumption or burden of proof shall arise favoring or disfavoring any Party by virtue of the authorship of any of the provisions of this Agreement.</p> <p>12.13    This Agreement does not constitute a partnership agreement nor does it create a joint venture or agency relationship between Guardsquare and the Client. Neither Party shall take any action or make any representation to any third party that would be inconsistent with the foregoing sentence. Neither Party shall be liable for the representations, acts, or omissions of the other Party unless expressly provided otherwise under the terms of this Agreement.</p> <p>12.14    No failure or delay by a Party hereto in exercising any right, power or remedy under this Agreement, and no course of dealing between the Parties hereto, shall operate as a waiver of any such right, power or remedy of the Party. No single or partial exercise of any right, power or remedy under this Agreement by a Party hereto, nor any abandonment or discontinuance of steps to enforce any such right, power or remedy, shall preclude such Party from any other or further exercise thereof or the exercise of any other right, power or remedy hereunder. The election of any remedy by a Party hereto shall not constitute a waiver of the right of such Party to pursue other available remedies, save as expressly stipulated otherwise in the Agreement.  </p> <p>12.15    As of the Effective Date, Guardsquare shall be entitled to reference the Client as a Guardsquare Client, in accordance with the Client\u2019s reasonable instructions (e.g. as regards use of Client logo) notified to Guardsquare in this respect.  </p> <p>12.16    This Agreement (including its Schedules and Orders) constitutes the entire agreement and understanding between the Parties with respect to the subject matter hereof and supersedes all prior oral or written agreements, representations or understandings between the Parties relating to the subject matter hereof. All such Schedules, as the same may be amended from time to time in accordance with the terms of this Agreement, are incorporated herein by reference and made a part hereof. The terms of this Agreement shall be deemed included in the Orders by reference. No statement, representation, warranty, covenant or agreement of any kind not expressly set forth in this Agreement or an Order shall affect, or be used to interpret, change or restrict, the express terms and conditions of this Agreement or an Order. Additional or deviating terms and conditions (such as, for example, purchase orders or other documents of the Client or third parties) are hereby expressly refused and rejected, even if Guardsquare does not refuse or reject such terms and conditions on a case by case basis.   </p>"},{"location":"about/license.html#additional-notices","title":"Additional notices","text":"<p>A DexGuard runtime library is distributed with the following libraries, to which the following license applies.</p> Library Version License Bionic library N/A Android open source license Chromium Crazy Linker library N/A Android open source license Cordova 3.7 + 5.1 (2 versions) Apache License 2.0 crosswalk 18.48.477.13 BSD License (3-clause) Bouncy Castle 1.69 MIT license"},{"location":"about/releasenotes.html","title":"Changelog","text":"<p>Warning</p> <p>Usage of the DexGuard runtime library is planned for deprecation.</p> <p>Please follow the migration guide to replace usages of the DexGuard runtime library with automatic RASP checks.</p> <p>RASP injection for public APIs of SDK projects</p> <p>When protecting SDKs, DexGuard now injects configured RASP checks for entrypoint injection to methods that match <code>-keep</code> and <code>-keep,asapi</code> configuration options in addition to apps' life-cycle methods like <code>onCreate(...)</code>, and <code>onResume(...)</code>.</p>"},{"location":"about/releasenotes.html#version-9105-20-05-2025","title":"Version 9.10.5 (20-05-2025)","text":""},{"location":"about/releasenotes.html#improved","title":"Improved","text":"<ul> <li>DexGuard will now intentionally crash when processing an APK and when enabling certificate tamper checks, but no <code>-raspcertificatehash</code> rules are present (see the RASP check limitations section) and DexGuard has not been set up to sign the APK (see the signing configuration section). Such a scenario would always lead to false positives, so you must change your configuration to do either one of these. Note that the DexGuard Gradle plugin already automatically uses the signing configuration for the variant you are building to sign your APK. (<code>T35876</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime","title":"Application runtime","text":"<ul> <li>Prevent potential <code>StackOverflowError</code> that can occur when a user-defined Application class overrides <code>getResources</code>, <code>getContentResolver</code> or <code>getSystemService</code>. This regression was introduced in DexGuard 9.10.3. (<code>T35880</code>)</li> <li>Prevent potential <code>StackOverflowError</code> when a RASP callback calls a method that has a RASP check injected. (<code>T35266</code>)</li> <li>Prevent potential <code>OutOfMemoryError</code> when the <code>-addprofiling</code> option is provided. (<code>T35871</code>)</li> </ul>"},{"location":"about/releasenotes.html#other","title":"Other","text":"<ul> <li>Prevent potential <code>NullPointerException</code> in Kotlin applications when enabling the <code>method/removal/parameter</code> optimization. (<code>T35335</code>)</li> <li>Ensure that all segments of assets are fully encrypted. If you are using the asset encryption feature of DexGuard 9.10.4 and prior, we recommend upgrading to DexGuard 9.10.5. If you prefer to continue to use DexGuard 9.10.4 and prior, we recommend adding option <code>-assetencryptionpluginids a,c,d</code> to prevent small segments of assets from being randomly not encrypted. (<code>T35902</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9104-06-05-2025","title":"Version 9.10.4 (06-05-2025)","text":""},{"location":"about/releasenotes.html#bugfixes_1","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_1","title":"Application runtime","text":"<ul> <li>Prevent potential segmentation fault in the root detector if <code>-raspflags root 4194304</code> is set and the application is hooked with Frida. This was introduced in DexGuard 9.8.12. (<code>T34993</code>)</li> <li>Prevent potential <code>VerifyError</code> when a static interface method calls a method that is targeted for code obfuscation. This regression was introduced in DexGuard 9.10.3. (<code>T35849</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9103-05-05-2025","title":"Version 9.10.3 (05-05-2025)","text":""},{"location":"about/releasenotes.html#added","title":"Added","text":"<ul> <li>Support for Flutter 3.29. (<code>T34700</code>)</li> <li>Add native Windows support for Flutter obfuscation. (<code>T34700</code>)</li> <li>Add seatbelt to prevent processing apps with an outdated version of the DexGuard attestation client library. (<code>T35105</code>)</li> <li>Make the resource file encryption feature compatible with Android 16 platform stability releases. We recommend upgrading to DexGuard 9.10.3 to ensure full support for devices running an Android 16 platform stability release. (<code>T28718</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_1","title":"Improved","text":"<ul> <li>Improve code obfuscation resilience against decompilers. (<code>T33531</code>)</li> <li>Improve OS integrity check configuration options. The detector can now be referred to with the <code>osintegrity</code> alias, matching the description in the manual.   Additionally, the flags for fine-tuning the detector can now be passed by name with the <code>osintegrityallow</code> option.   Although this change is backwards compatible, we recommend to migrate to the new format for better readability and maintainability.   See the OS integrity feature page for more information. (<code>T34523</code>)</li> <li>Update the certificate revocation list for the OS Integrity check.</li> <li>Improve class encryption performance on Android 10 by removing redundant operations. (<code>T35370</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_2","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_2","title":"Application runtime","text":"<ul> <li>Prevent potential crash on the <code>Motorola Razr 50</code> device that could occur when hook detection and ThreatCast are enabled or when <code>-raspflags hook 16384</code> is set. (<code>T35409</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9102-16-04-2025","title":"Version 9.10.2 (16-04-2025)","text":""},{"location":"about/releasenotes.html#added_1","title":"Added","text":"<ul> <li>Add the <code>allowdescriptivenames</code> suboption (<code>-raspchecks ... checkpoint,allowdescriptivenames ...</code>) to allow unobfuscated RASP checkpoints with descriptive names in third-party code, which is no longer allowed since DexGuard 9.10.0 and will terminate the build when detected by default. (<code>T35229</code>)</li> <li>During DexGuard's backporting, automatically keep all lambda classes generated from a class that is configured to be kept. (<code>T35317</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_2","title":"Improved","text":"<ul> <li>Improve emulator detection capabilities. No additional configuration is required to enable this. (<code>T35167</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_3","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#other_1","title":"Other","text":"<ul> <li>Prevent SDK RASP entrypoint injections from accidentally targeting non-kept public methods in library projects. (<code>T35269</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9101-10-04-2025","title":"Version 9.10.1 (10-04-2025)","text":""},{"location":"about/releasenotes.html#bugfixes_4","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_3","title":"Application runtime","text":"<ul> <li>Write PGO profiling progress to logcat. (<code>T34417</code>)</li> <li>Prevent potential <code>VerifyError</code> in Fragment classes targeted by the <code>-malwareprotect a11y</code> option when optimization is disabled. (<code>T35107</code>)</li> <li>Prevent potential <code>UnsupportedOperationException</code> when enabling resource file encryption on Android 15. (<code>T34745</code>)</li> <li>Prevent excessive thread spawning during application profiling.</li> <li>Prevent potential <code>StackOverflowException</code> when injecting RASP checks into methods called by the ThreatCast App User ID getter. (<code>T35209</code>)</li> <li>Prevent false positive when combining hook checks with the <code>-intunecompatibility</code> option in applications using Microsoft Intune's Mobile Application Management SDK. This false positive would occur since DexGuard version 9.6.0. (<code>T35126</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_2","title":"Other","text":"<ul> <li>Fix DexGuard not detecting the <code>QUERY_ALL_PACKAGES</code> permission declared in an Android library when enabling the <code>a11y</code> malware detection, resulting in a build failure requesting to add the permission. (<code>T35273</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9100-31-03-2025","title":"Version 9.10.0 (31-03-2025)","text":""},{"location":"about/releasenotes.html#descriptive-names-upgrade-consideration","title":"Upgrade considerations","text":"<p>This version of DexGuard is more strict when it comes to the names of RASP and malware callback methods and their classes, as well as those of RASP checkpoints and the ThreatCast app user ID getter method and its class. Practically, this means DexGuard will now throw an error if it encounters words in the configured method and class names that could indicate their purpose, but only if they end up not being obfuscated.</p>"},{"location":"about/releasenotes.html#malware-protection-of-fragments-for-all-detectors","title":"Malware protection of fragments for all detectors","text":"<p>Building on 9.9.0, which already added the ability to protect fragments against malicious accessibility services and screen spying, this version now also supports protecting fragments against the remaining categories of malware we offer protections for: overlays and activity injections.</p> <p>To make use of this new capability, just specify the fragments in your application you want to protect with either the <code>overlays</code> or <code>activityinjection</code> detector, or both.</p> Target fragments with overlays or activityinjection<pre><code># If your configuration already targets malware protection like this:\n-malwareprotect overlays,activityinjection class SensitiveActivity\n\n# It can simply be extended to sensitive fragments.\n# Of course, the activity can also be removed if no longer required.\n-malwareprotect overlays,activityinjection class SensitiveActivity,SensitiveFragment\n</code></pre> <p>More information regarding the configuration and capabilities can be found on the Malware Protection page. This page will also indicate any limitations the detectors have, like the fact that nested fragments will not be automatically protected when protecting only the parent fragment.</p>"},{"location":"about/releasenotes.html#added_2","title":"Added","text":"<ul> <li>Add support for Kotlin 2.1. (<code>T32988</code>)</li> <li>Support encryption of resource strings used in <code>Resources.getString</code> or <code>Context.getString</code> with extra arguments. (<code>T6941</code>)</li> <li>Automatically encrypt the Hermes bytecode for all React Native versions. This behavior was previously limited to React Native versions &gt;= 0.68. (<code>T18502</code>)</li> <li> <p>Ensure Android Studio plugin compatibility up to the Android Studio Narwhal release.</p> </li> <li> <p>Automatically inject all RASP detectors as part of app attestation, without impacting performance or user experience. (<code>T33460</code>)</p> </li> <li> <p>Guarantee all RASP results are present in all app attestation token requests. (<code>T33460</code>)</p> </li> <li> <p>Embed consumer rules as an asset file of protected SDKs (AAR) to improve compatibility with consumer apps protected using the Guardsquare Guided Workflow. (<code>T34117</code>)</p> </li> </ul>"},{"location":"about/releasenotes.html#improved_3","title":"Improved","text":"<ul> <li>Improve hook detection capabilities. No additional configuration is required to enable this. (<code>T34902</code>)</li> <li>Update the certificate revocation list for the OS Integrity check.</li> </ul>"},{"location":"about/releasenotes.html#version-995-25-03-2025","title":"Version 9.9.5 (25-03-2025)","text":""},{"location":"about/releasenotes.html#improved_4","title":"Improved","text":"<ul> <li>Update the certificate revocation list for the OS Integrity check.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_5","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#other_3","title":"Other","text":"<ul> <li>Ensure Dart entities specified in the Flutter configuration are interpreted correctly when ThreatCast is enabled. This is a regression introduced in DexGuard 9.8.13. (<code>T34953</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-994-20-03-2025","title":"Version 9.9.4 (20-03-2025)","text":""},{"location":"about/releasenotes.html#bugfixes_6","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_4","title":"Application runtime","text":"<ul> <li>Resolve activity injection malware detection false positive when the device is locked while on a screen that has the protection enabled. (<code>T34311</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_4","title":"Other","text":"<ul> <li>Allow encrypting classes referenced in the parameters of a lambda expression in library projects with minSdk &lt; 26. This relaxes a constraint disallowing class encryption introduced in 9.8.12. (<code>T34623</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_5","title":"Improved","text":"<ul> <li>Improve hook detection capabilities. No additional configuration is required to enable this. (<code>T34901</code>, <code>T34906</code>)</li> <li>Improve <code>certificatetamper</code> resilience. No additional configuration is required to enable this. (<code>T34903</code>)</li> </ul>"},{"location":"about/releasenotes.html#added_3","title":"Added","text":"<ul> <li>Add seatbelt to prevent React Native apps from being processed when the React Native bundle cannot be found. Please add <code>-reactnativebundlename &lt;name&gt;</code> option to specify the custom bundle name. (<code>T34959</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-993-05-03-2025","title":"Version 9.9.3 (05-03-2025)","text":""},{"location":"about/releasenotes.html#bugfixes_7","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_5","title":"Application runtime","text":"<ul> <li>Prevent potential slowdown in protected React Native applications.</li> </ul>"},{"location":"about/releasenotes.html#version-992-03-03-2025","title":"Version 9.9.2 (03-03-2025)","text":""},{"location":"about/releasenotes.html#improved_6","title":"Improved","text":"<ul> <li>Update the certificate revocation list for the OS Integrity check.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_8","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_6","title":"Application runtime","text":"<ul> <li>Prevent potential <code>ClassNotFoundException</code> when the app contains method descriptors referencing system classes that are not available on all API levels. (<code>T34383</code>)</li> <li>Fix potential <code>stack corruption</code> errors that could have triggered since 9.8.17 when the debug blocker or root detector are enabled. (<code>T34446</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_5","title":"Other","text":"<ul> <li>Reinstate periodic printing of <code>adb pull &lt;path&gt;</code> message during the PGO profiling step. (<code>T34519</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-991-25-02-2025","title":"Version 9.9.1 (25-02-2025)","text":""},{"location":"about/releasenotes.html#improved_7","title":"Improved","text":"<ul> <li>Add OS integrity check to EnvironmentCheck sample.</li> <li>Update the certificate revocation list for the OS Integrity check.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_9","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_7","title":"Application runtime","text":"<ul> <li>Prevent potential <code>UnsatisfiedLinkError</code> in React Native applications when native library obfuscation is enabled. (<code>T33581</code>)</li> <li>Prevent potential <code>NoClassDefFoundError</code> when <code>-libraryjars</code> classes are shadowed in the input application. (<code>T34135</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-990-06-02-2025","title":"Version 9.9.0 (06-02-2025)","text":""},{"location":"about/releasenotes.html#profile-guided-obfuscation","title":"Profile-Guided Obfuscation","text":"<p>Introduced in 9.5.0, our PGO feature has become an integral part of configuring performant RASP checks. In this release, we introduce a new frame-based profiling implementation to smooth out the impact on the UI while still protecting security sensitive code. This new approach will give your apps better visual responsiveness and will be the default PGO implementation starting from this release. You can revert to the legacy implementation using <code>-uselegacyprofiling</code> if needed.</p>"},{"location":"about/releasenotes.html#upgrade-considerations","title":"Upgrade considerations","text":"<p>If you are currently using the PGO feature, you will need to re-profile your application to benefit from the new implementation. See the PGO manual page for more details.</p>"},{"location":"about/releasenotes.html#malware-protection-in-fragments","title":"Malware protection in Fragments","text":"<p>Malware detection has taken a prominent role in the protection of users\u2019 sensitive data, and we have been improving DexGuard\u2019s detection capabilities and integration in this regard. It was already possible to protect activities from screen spying apps and malicious accessibility services through the <code>-malwareprotect</code> option. Now, DexGuard 9.9.0 further extends the support for detecting these threats to Android Fragments as well. In order to start using this, you will have to update your <code>-malwareprotect</code> class filter to target Fragments (see example below). Only the <code>a11y</code> and <code>screenrecording</code> detectors are supported for now. More details can be found in the Malware Protection page.</p> Target fragments<pre><code># If your configuration already targets malware protection like this:\n-malwareprotect a11y,screenrecording class SensitiveActivity\n\n# It can simply be extended to sensitive Fragments.\n# Of course, the activity can also be removed if no longer required.\n-malwareprotect a11y,screenrecording class SensitiveActivity,SensitiveFragment\n\n# If you are enabling additional malware detectors like this:\n-malwareprotect a11y,screenrecording,activityinjection class SensitiveActivity\n\n# You have to split up the option like this to cover Fragments,\n# as they are currently only supported for screenrecording and a11y detectors:\n-malwareprotect a11y,screenrecording class SensitiveActivity,SensitiveFragment\n-malwareprotect activityinjection class SensitiveActivity\n</code></pre>"},{"location":"about/releasenotes.html#sdk-rasp-entrypoints","title":"SDK RASP entrypoints","text":"<p>While DexGuard previously relied on injecting user-configured RASP checkpoints to protect SDKs, it can now also protect the SDK entrypoints. You can find a detailed overview of what constitutes an SDK entrypoint on the RASP manual page. This injection strategy provides a good basic coverage by triggering as early as possible when your SDK's code is called, while also self-regulating to not impede performance. To enable this behavior, make sure to have RASP entrypoint injection active. The following configuration examples show how to achieve that:</p> <p>Enabling or disabling entrypoint injection<pre><code># If you do not specify a strategy, spray and entrypoint will be used by default:\n# Enable spray and entrypoint injection for the emulator and apptamper checks.\n-raspchecks emulator,apptamper\n\n# Following configuration is explicit, but has exactly the same effect as above.\n-raspchecks emulator,apptamper spray\n-raspchecks emulator,apptamper entrypoint\n\n# Instead, this configuration explicitly enables entrypoint only and as a result, disables spray injection:\n-raspchecks emulator,apptamper entrypoint\n</code></pre> It is still recommended to configure security sensitive locations manually through checkpoints.</p>"},{"location":"about/releasenotes.html#increased-resilience-against-encrypted-class-dumping","title":"Increased resilience against encrypted class dumping","text":"<p>Undoing protection of encrypted classes is an important aspect of reverse engineering tools aiming to reveal sensitive application code. In this release, we further protect against memory scanning attacks that rely on the Android file structure to extract decrypted classes at runtime. This resilience improvement is integrated into class encryption and needs no additional configuration.</p>"},{"location":"about/releasenotes.html#other-improvements-and-bugfixes","title":"Other improvements and bugfixes","text":"<ul> <li>Reduce processing time by reading input using multiple threads. To revert to the previous behavior, you can set the <code>-Dparallel.threads.ir=1</code> system property. (<code>T32952</code>)</li> <li>Support bundle names other than <code>index.android.bundle</code> in React Native projects. (<code>T32625</code>)</li> </ul>"},{"location":"about/releasenotes.html#application-runtime_8","title":"Application runtime","text":"<ul> <li>Fix <code>ClassNotFoundException</code> when using the Malware overlay protection in a library project with no Fragments. (<code>T33410</code>)</li> <li><code>IllegalAccessException</code> when a callback calls a method in user code can no longer occur. This could happen if the <code>method/marking/private</code> optimization is enabled. This fixes a regression introduced in version 9.8.2. (<code>T33519</code>)</li> <li>Prevent <code>java.lang.NoSuchMethodError</code> when using <code>-addconfigurationdebugging</code> with a Java target version greater than 1.7. (<code>T33183</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9817-03-02-2025","title":"Version 9.8.17 (03-02-2025)","text":""},{"location":"about/releasenotes.html#improved_8","title":"Improved","text":"<ul> <li>Improve root detection capabilities. (<code>T32254</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_10","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_9","title":"Application runtime","text":"<ul> <li>Prevent potential false positives in malware overlay detection on API levels 29 and 30. (<code>T33276</code>)</li> <li>Prevent false positive during root detection on specific Samsung Galaxy A14 devices running Android 13. This false positive was introduced in DexGuard 9.8.12. (<code>T33806</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_6","title":"Other","text":"<ul> <li>Do not print unnecessary warnings related to class encryption.</li> <li>Prevent potential <code>OutOfMemoryError</code> at processing time when <code>useuniqueclassmembernames</code> is enabled and RASP checks are configured. This fixes a regression introduced in version 9.8.8 of DexGuard. (<code>T33159</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9816-09-01-2025","title":"Version 9.8.16 (09-01-2025)","text":""},{"location":"about/releasenotes.html#added_4","title":"Added","text":"<ul> <li>Update the Ionic sample using the Capacitor runtime. (<code>T32261</code>)</li> <li>Support Flutter 3.27. (<code>T30707</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_9","title":"Improved","text":"<ul> <li>Add flag to prevent triggering the OS integrity check if the user's device fails to fetch the package name while generating the attestation data. (<code>T33025</code>)</li> <li>Reduce build time when protecting code in early lifecycle methods. This performance regression could occur since DexGuard version 9.8.2. (<code>T32949</code>)</li> <li>Allow targeting native library and asset file names for String encryption. (<code>T33041</code>)</li> <li>Improve hook, root, and emulator detection performance when ThreatCast is enabled. (<code>T32853</code>, <code>T33139</code>)</li> <li>Expand the scope of flag 4 to prevent triggering the OS integrity check for corrupted attestation data in the certificate chain. (<code>T32976</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_11","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_10","title":"Application runtime","text":"<ul> <li>Support running protected Flutter apps on 16KB devices. This would previously result in a native crash on start-up. (<code>T32824</code>)</li> <li>Ensure Hermes-enabled React Native 0.77 and newer projects work on 16KB devices. This would previously result in a <code>UnsatisfiedLinkError</code> on start-up. (<code>T28833</code>)</li> <li>Preserve gradient information when displaying vector drawables. (<code>T33108</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_7","title":"Other","text":"<ul> <li>Do not print unnecessary warnings related to class encryption.</li> </ul>"},{"location":"about/releasenotes.html#version-9815-27-12-2024","title":"Version 9.8.15 (27-12-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_12","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#other_8","title":"Other","text":"<ul> <li>Prevent \"Bad CPU type in executable\" error when processing Flutter or React Native applications on Intel MacOS devices. This bug was introduced in DexGuard version 9.8.14.</li> </ul>"},{"location":"about/releasenotes.html#version-9814-26-12-2024","title":"Version 9.8.14 (26-12-2024)","text":""},{"location":"about/releasenotes.html#improved_10","title":"Improved","text":"<ul> <li>Improve class encryption resilience against automated tools. (<code>T32859</code>)</li> <li>Automatically adapt Service Provider Interface configuration files located in <code>assets/services</code>. (<code>T32554</code>)</li> <li>Increase the true positive rate of the OS integrity check.</li> <li>Disambiguate flag value 32 (empty certificate chain) in the OS integrity check, such that it only suppresses the check for the intended failure cause. (<code>T32960</code>, <code>T32977</code>)</li> <li>Disambiguate flag values 1 and 2 in the OS integrity check, such that either one of them covers a device that claims StrongBox support and a device that doesn't, respectively. (<code>T32964</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_13","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_11","title":"Application runtime","text":"<ul> <li>Prevent rare occurrence of bus error when hook detection runs on certain devices. (<code>T32594</code>)</li> <li>Fix potential <code>IllegalStateException</code> in custom <code>Application</code> classes when app attestation is enabled on Android 11 and below. (<code>T32903</code>)</li> <li>Prevent potential <code>NullPointerException</code> when using the Google Play services SDK and specifying the <code>-malwareprotect overlays</code> configuration option on devices without Google Mobile Services (GMS), e.g. newer Huawei devices. This issue was introduced in DexGuard version 9.8.12. (<code>T33007</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_9","title":"Other","text":"<ul> <li>Prevent \"Unexpected error while evaluating instruction\" error when \"Marking entities called by reflection\". This issue was introduced in DexGuard version 9.8.12. (<code>T32817</code>)</li> <li>Prevent <code>Malformed inner-class attribute</code> warnings introduced in version 9.8.12 of DexGuard when using [<code>-addconfigurationdebugging</code>]. (<code>T32700</code>)</li> <li>Prevent potential <code>NoClassDefFoundError</code> in Espresso tests when running <code>assembleRelease</code> and <code>assembleAndroidTest</code> in the same Gradle invocation.</li> </ul>"},{"location":"about/releasenotes.html#version-9813-12-12-2024","title":"Version 9.8.13 (12-12-2024)","text":""},{"location":"about/releasenotes.html#added_5","title":"Added","text":"<ul> <li>Environment integrity threats detected in the Dart part of Flutter apps are automatically reported if ThreatCast is enabled for DexGuard. (<code>T32739</code>)</li> <li>Ensure Android Studio plugin compatibility up to the Android Studio Meerkat release.</li> </ul>"},{"location":"about/releasenotes.html#improved_11","title":"Improved","text":"<ul> <li>Improve hook detection performance in case ThreatCast is enabled. (<code>T32774</code>)</li> <li>Improve performance of <code>apptamper</code> RASP checks on large APK files. (<code>T32242</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_14","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_12","title":"Application runtime","text":"<ul> <li>RASP injection into the constructor of a class extending <code>ContextWrapper</code> can no longer cause a <code>VerifyError</code>. (<code>T31779</code>)</li> <li>If a user callback contains a <code>Class.forName</code> call, this will no longer result in a <code>ClassNotFoundException</code>. This issue was introduced in version 9.8.2 of DexGuard. (<code>T32571</code>)</li> <li>Harden the malware protection default warnings to prevent potential runtime exceptions when a malware check triggers. (<code>T31862</code>), (<code>T32777</code>)</li> <li>Prevent <code>AbstractMethodError</code> when encrypting classes referenced by abstract methods of functional interfaces. (<code>T32195</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_10","title":"Other","text":"<ul> <li>Prevent <code>IllegalArgumentException</code> when strings longer than 65535 bytes are present in the application. (<code>T26560</code>)</li> <li>Update the license check to be locale-aware. This could previously result in a \"license expired\" error while the license is still valid. (<code>T32681</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9812-26-11-2024","title":"Version 9.8.12 (26-11-2024)","text":""},{"location":"about/releasenotes.html#added_6","title":"Added","text":"<ul> <li>The list of trusted App Stores for the <code>ally</code> malware protection can be configured using the <code>-malwareallowstores</code> option, see the malware protection documentation. (<code>T31718</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_12","title":"Improved","text":"<ul> <li> <p>Malware protections will automatically apply to all fragments displayed in an activity that has been configured for protection. (<code>T31310</code>)</p> </li> <li> <p>Improve startup time when using <code>-addconfigurationdebugging</code>.</p> </li> <li> <p><code>-addconfigurationdebugging</code> recovers and logs keep rules for classes whose names are derived from another class with a suffix appended. (<code>T30926</code>)</p> </li> <li> <p>Improve root detection capabilities. (<code>T31918</code>)</p> </li> <li>The hardware check is now more strict by default and may flag devices that don't fully meet the criteria required for the check. As the default strictness level may not be ideal for all applications, we recommend adjusting the check's configuration to better suit your specific requirements. Please refer to the OS Integrity page for more information.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_15","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_13","title":"Application runtime","text":"<ul> <li>Prevent <code>SoLoaderCorruptedLibFileError</code> in Hermes-enabled React Native 0.76 and newer projects with minSdk &gt;= 24 and useLegacyPackaging set to false. (<code>T30941</code>)</li> <li>Further harden against segmentation faults when hook detection is run in parallel with JIT compilation. (<code>T30111</code>)</li> <li>Fix <code>AbstractMethodError</code> when an SDK protected by DexGuard is consumed by an application that itself is obfuscated by DexGuard or R8. (<code>T32011</code>)</li> <li>Fix <code>NoSuchMethodException</code> when the <code>-encryptassetfiles</code> option is specified together with the <code>-malwareprotect a11y</code> option. This issue was introduced in DexGuard version 9.8.9. (<code>T32329</code>)</li> <li>Fix <code>ClassNotFoundException</code> when a RASP or malware callback uses <code>Class.forName</code> and at least one <code>-accessthroughreflection</code> rule is present in the configuration. This issue was introduced in DexGuard version 9.8.11. (<code>T32450</code>)</li> <li>Prevent <code>VerifyError</code> if an encrypted asset is read inside a constructor that calls another constructor in the same class. (<code>T32562</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_11","title":"Other","text":"<ul> <li>DexGuard no longer removes <code>-dontwarn</code> rules from manually specified consumer rules when protecting an Android library. This issue was introduced in DexGuard version 9.8.6. (<code>T32233</code>)</li> <li>The <code>-adaptresourcefilecontents</code> consumer rule is no longer generated without any filter when protecting an Android library. This issue was introduced in DexGuard version 9.8.1. (<code>T32270</code>)</li> <li>Ensure protected app bundles can be installed on devices that are configured to use a page size of 16 KB (16 KB devices). (<code>T29270</code>)</li> <li>Prevent \"Value in slot N is empty\" exception during code optimization. (<code>T31077</code>)</li> <li>The DexGuard Gradle plugin will no longer crash when <code>systemProp</code> properties are passed through the command line. (<code>T32400</code>)</li> <li>Improve memory usage when processing apps with large amounts of resource file data. (<code>T3935</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9811-13-11-2024","title":"Version 9.8.11 (13-11-2024)","text":""},{"location":"about/releasenotes.html#improved_13","title":"Improved","text":"<ul> <li>Improve hook detection capabilities. (<code>T31908</code>)</li> <li>Improve obfuscation of ThreatCast related strings. (<code>T31841</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_16","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_14","title":"Application runtime","text":"<ul> <li>Fix <code>NoSuchMethodException</code> at runtime when an SDK protected by DexGuard is consumed by an application that is itself obfuscated by DexGuard or R8. This issue was introduced in version 9.8.2. (<code>T30904</code>)</li> <li>Prevent <code>ClassNotFoundException</code>/<code>IllegalAccessException</code>, introduced in DexGuard version 9.8.6, when encrypting strings in encrypted interfaces for applications with <code>minSdk</code> set below 24. (<code>T31763</code>)</li> <li>Prevent false positive in the debugger check on Fujitsu devices. (<code>T30993</code>)</li> <li>Fix potential <code>GCDaemon</code> or <code>HeapTaskDaemon</code> native crash introduced in DexGuard 9.8.10 on devices running Android 5.x   when both ThreatCast and the root detector are enabled. (<code>T31689</code>)</li> <li>Prevent potential crash at runtime when using 32-bit Flutter protection in a mixed Flutter / non-Flutter app. (<code>T31816</code>)</li> <li>Prevent potential <code>InvocationTargetException</code> in Hermes-enabled React Native 0.72 and newer projects when <code>extractNativeLibs</code> is set to false. (<code>T32074</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_12","title":"Other","text":"<ul> <li>Prevent potential <code>ConcurrentModificationException</code> when <code>-addconfigurationdebugging</code> is used. (<code>T31846</code>)</li> <li>Prevent <code>UnsupportedOperationException</code> when RASP is enabled and the input contains classes that have a static initializer with a signature attribute. (<code>T31996</code>)</li> <li>Fix \"GmsCore module dependency metadata declared in the AndroidManifest.xml file is invalid\" when shrinking or encrypting metadata. (<code>T31104</code>)</li> <li>Prevent <code>NullPointerException</code> in Kotlin applications when <code>-dontshrink</code> is enabled and RASP checks are configured. (<code>T31175</code>).</li> <li>Improve memory usage when encrypting strings. (<code>T31720</code>)</li> <li>Fix JSON error printed in the build logs while performing the latest version check.</li> <li>Ensure no ThreatCast mapping information is leaked when enabling ThreatCast in the NDK Add-on and the contents of the native libraries were specified to not be adapted using the <code>-adaptresourcefilecontents</code> option, for example when using the <code>dexguard-release-conservative.pro</code> default DexGuard configuration. This is a regression introduced in version 4.4.0 of the NDK Add-on. (<code>T31872</code>)</li> <li>Fix regression introduced in DexGuard version 9.8.3 that causes profile-guided obfuscation (PGO) data not to be taken into account during RASP spray injection. Only the manual configuration workflow is affected. The guided configuration workflow is not affected. (<code>T32079</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9810-23-10-2024","title":"Version 9.8.10 (23-10-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_17","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_15","title":"Application runtime","text":"<ul> <li>Don't re-encrypt asset files corresponding to encrypted DEX files. This could lead to runtime crashes when integrating   a protected SDK with encrypted classes and specifying to encrypt asset files since DexGuard version 9.8.1. (<code>T30819</code>)</li> <li>Prevent potential <code>BadParcelableException</code> introduced in DexGuard version 9.8.7 when both ThreatCast and the root detector are enabled. (<code>T31603</code>)</li> <li>Prevent potential <code>TransactionTooLargeException</code> introduced in DexGuard version 9.8.7 on devices running Android 5.x   when both ThreatCast and the root detector are enabled. (<code>T31159</code>)</li> <li>Fix sending of ThreatCast events in early lifecycle methods of Application classes when crashing on detection is enabled. (<code>T30968</code>)</li> <li>Prevent <code>UnsatisfiedLinkError: dlopen failed: missing PT_DYNAMIC</code> error, introduced in DexGuard 9.8.6, when configuring ThreatCast in a Flutter application. (<code>T31608</code>)</li> <li>Prevent PGO profiling progress resetting during progress updates. (<code>T30996</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_13","title":"Other","text":"<ul> <li>Prevent <code>Dart binary not found</code> error introduced in DexGuard version 9.8.9 when processing debug Flutter apps. (<code>T31664</code>)</li> <li>Prevent potential <code>ArrayIndexOutOfBoundsException</code> when the input application contains native libraries with corrupted section headers. (<code>T29377</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-989-10-10-2024","title":"Version 9.8.9 (10-10-2024)","text":""},{"location":"about/releasenotes.html#improved_14","title":"Improved","text":"<ul> <li>Harden asset decryption. (<code>T27607</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_18","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_16","title":"Application runtime","text":"<ul> <li>Prevent incompatibility with SoLoader in React Native 0.72 and newer which caused a <code>UnsatisfiedLinkError</code>. (<code>T18445</code>)</li> <li>Prevent potential <code>AbstractMethodError</code> when using the <code>androidx.window:window</code> dependency. (<code>T30937</code>)</li> <li>Fix issue in SDK projects when targeting Java 7 which caused a <code>NoSuchFieldError</code>. (<code>T30950</code>)</li> <li>Prevent potential <code>ClassNotFoundException</code> referencing a nonsensical class when enabling class encryption. (<code>T30244</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_14","title":"Other","text":"<ul> <li>Allow JavaScript module features like <code>import</code> and <code>export</code> in <code>.js</code> files when JavaScript obfuscation is enabled. (<code>T24185</code>)</li> <li>Prevent D8 error when <code>-addconfigurationdebugging</code> and <code>-accessthroughreflection</code> are both enabled. (<code>T30614</code>)</li> <li>Fix issue reported as \"Interface methods must not be protected or package private\" when encrypting Strings in interfaces. (<code>T30851</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-988-16-09-2024","title":"Version 9.8.8 (16-09-2024)","text":"<p>App Attestation Early Adoption</p> <p>App Attestation is available in a closed early adoption stage. Interested in trying it out in your application? Click here to contact us.</p>"},{"location":"about/releasenotes.html#added_7","title":"Added","text":"<ul> <li>Warning messages for the <code>ally</code> malware protection can be disabled using the option <code>-malwarewarnon !ally</code>. (<code>T30332</code>)</li> <li>Encrypt Flutter native libraries (<code>libapp.so</code> and <code>libflutter.so</code>) that are not obfuscated by default. (<code>T25276</code>)</li> <li>Add Xiaomi Picks (<code>com.xiaomi.mipicks</code>) as an allowed market for malware accessibility service installers.</li> </ul>"},{"location":"about/releasenotes.html#improved_15","title":"Improved","text":"<ul> <li>Reduce build time when protecting code running in early lifecycle methods. (<code>T30110</code>)</li> <li>Allow implementing visual callbacks for malware protection, see Malware protection documentation. (<code>T30332</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_19","title":"Bugfixes","text":""},{"location":"about/releasenotes.html#application-runtime_17","title":"Application runtime","text":"<ul> <li>Prevent false positive during certificate checking when the same package name with different suffixes is loaded in memory. (<code>T30324</code>)</li> <li>Avoid exceptions in Hermes-enabled React Native 0.76 projects when encrypting the <code>index.android.bundle</code> asset file. (<code>T30320</code>)</li> </ul>"},{"location":"about/releasenotes.html#other_15","title":"Other","text":"<ul> <li>Prevent potential <code>IOException</code> caused by ELF string section lengths exceeding the original. (<code>T30254</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-987-03-09-2024","title":"Version 9.8.7 (03-09-2024)","text":""},{"location":"about/releasenotes.html#added_8","title":"Added","text":"<ul> <li>Support Flutter 3.24. (<code>T29085</code>)</li> <li>Ensure Android Studio plugin compatibility up to the Android Studio Ladybug release.</li> </ul>"},{"location":"about/releasenotes.html#improved_16","title":"Improved","text":"<ul> <li>Update <code>samples/advanced/AmazonIAP</code> to the latest version of Amazon IAP Kotlin Example. (<code>T30072</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_20","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>NullPointerException</code> at build time when encrypting strings in interfaces on applications with <code>minSdk</code> set below 24. (<code>T30333</code>)</li> <li>Restore change in license checking behavior introduced in 9.8.6.</li> <li>Prevent encrypted metadata possibly becoming <code>null</code> at runtime when RASP is enabled. (<code>T30323</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-986-26-08-2024","title":"Version 9.8.6 (26-08-2024)","text":""},{"location":"about/releasenotes.html#upgrade-considerations_1","title":"Upgrade considerations","text":"<ul> <li>DexGuard will no longer terminate on errors of the form \"can't find any super classes of '...' (not even immediate super class '...')\" and \"can't find common super class of '...' and '...'\". Specifying the <code>allow.incomplete.class.hierarchy</code> system property to suppress this error is no longer required.</li> </ul>"},{"location":"about/releasenotes.html#improved_17","title":"Improved","text":"<ul> <li>Reduce the size of the DexGuard native runtime library when not all RASP features are configured. This change applies both to applications and SDKs. Size improvements may amount up to 500 kB per architecture when a limited number of RASP features are configured. (<code>T30028</code>)</li> <li>Strengthen malicious overlay malware protection on API levels &lt; 31 by blocking clicks on the decor view when overlays are detected. (<code>T29042</code>)</li> <li>Make malware detection more resilient by replacing the notification warning with a hardened dialog message. (<code>T27388</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_21","title":"Bugfixes","text":"<ul> <li>Prevent potential issues at runtime in consuming applications when protecting an SDK that embeds another DexGuard-protected SDK. (<code>T30163</code>)</li> <li>Prevent potential \"Error: Static interface methods are only supported starting with Android N (--min-api 24)\" when using <code>-accessthroughreflection,encryptstrings</code> on applications with <code>minSdk</code> set below 24. (<code>T29842</code>)</li> <li>Prevent potential <code>R8</code> missing classes error for consuming applications of a DexGuard-protected SDK. (<code>T29889</code>)</li> <li>Prevent potential infinite loop at build time during name obfuscation of previously obfuscated libraries with native code, introduced in DexGuard version 9.6.0. (<code>T29830</code>)</li> <li>Fix layout issues for Flutter 3.22 applications when enabling RASP checks in your Flutter configuration. (<code>T29231</code>)</li> <li>Never encrypt baseline profile assets such that they are read and applied correctly. (<code>T30252</code>)</li> <li>Prevent potential <code>FileNotFoundException</code> at runtime when injecting RASP checks. (<code>T30153</code>)</li> <li>Prevent potential <code>ConcurrentModificationException</code> at runtime when using <code>-addconfigurationdebugging</code>. (<code>T30250</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-985-15-08-2024","title":"Version 9.8.5 (15-08-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_22","title":"Bugfixes","text":"<ul> <li>Prevent potential Dex file conversion error during input reading. (<code>T30122</code>)</li> <li>Prevent potential segmentation fault when hook detection is run in parallel with JIT compilation. (<code>T30111</code>)</li> <li>Prevent potential <code>NoClassDefFoundError</code> when injecting hook checks. (<code>T30180</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-984-06-08-2024","title":"Version 9.8.4 (06-08-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_23","title":"Bugfixes","text":"<ul> <li>Prevent potential false positives in root detection on Xiaomi Redmi 13C and Xiaomi Redmi 12 4G devices. (<code>T30013</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_18","title":"Improved","text":"<ul> <li>Improve virtual environment detection capabilities. (<code>T29896</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-983-01-08-2024","title":"Version 9.8.3 (01-08-2024)","text":"<p>Warning</p> <p>Deprecated <code>filetamper</code> RASP detector</p> <p>A recent unannounced change on the Google Play Store changed the way applications are signed, which introduced an incompatibility with DexGuard's File Checker feature. As continued use of the File Checker would result in app crashes when deployed to end-user devices, the File Checker is formally deprecated as of DexGuard 9.8.3. Note that this issue only affects new uploads of your application; existing released versions of your application are not affected.</p> <p>In order to continue to ensure the integrity of files within your application (APK or AAB):</p> <ul> <li>Enable the <code>certificatetamper</code> detector.</li> <li>Optionally enable the <code>apptamper</code> detector as an additional layer of security.</li> </ul> <p>Keep in mind the limitations when configuring those detectors.</p> <p>In order to ensure the integrity of asset files with your SDK (AAR):</p> <ul> <li>Encrypt the assets that require protection using the <code>-encryptassetfiles</code> configuration option.</li> </ul>"},{"location":"about/releasenotes.html#added_9","title":"Added","text":"<ul> <li>Support Flutter 3.19 &amp; Flutter 3.22. (<code>T25232</code>, <code>T27000</code>)</li> <li>Support annotations in the <code>-raspdenylist</code> option. (<code>T27762</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_19","title":"Improved","text":"<ul> <li>Improve hook detection coverage when only injecting entry point hook checks. (<code>T27032</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_24","title":"Bugfixes","text":"<ul> <li>Reduce false positives for activity injection malware checks when protecting multiple activities. (<code>T29869</code>)</li> <li>Resolve an issue where libraries loaded through the nativeloader would receive incomplete information from the <code>dl_iterate_phdr</code> API. (<code>T29780</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-982-18-07-2024","title":"Version 9.8.2 (18-07-2024)","text":""},{"location":"about/releasenotes.html#android-15-support","title":"Android 15 support","text":"<p>Google has announced that application compatibility with 16KB memory page sizes will be enforced on the Play Store next year, although a specific date has not been provided. Upgrading to DexGuard 9.8.2 will be required when Google enforces the new policy, even if the input is composed entirely of Java or Kotlin.</p>"},{"location":"about/releasenotes.html#improved_20","title":"Improved","text":"<ul> <li>Optimize the existing hook detector to achieve up to 40% faster performance on first invocation. (<code>T22437</code>)</li> <li>Increase the amount of injected RASP detector copies within the already existing size requirements to improve resilience. (<code>T27674</code>)</li> <li>Support customers to implement visual callbacks in a secure way, see RASP documentation. (<code>T20538</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_25","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>NullPointerException</code> at runtime when protecting code running in early lifecycle methods. (<code>T28955</code>)</li> <li>Resolve \"sun.reflect.Reflection.getCallerClass\" warning in build log. (<code>T22323</code>)</li> <li>Prevent potential <code>NullPointerException</code> during Gson optimization.</li> <li>Prevent potential <code>IOException</code> when using SDKs containing encrypted classes built without <code>-repackageclasses</code>. (<code>T29079</code>)</li> <li>Avoid false negative detection of Android 15 emulators. (<code>T28593</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-981-01-07-2024","title":"Version 9.8.1 (01-07-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_26","title":"Bugfixes","text":"<ul> <li>Prevent unexpected code optimization during output writing that could result in runtime crashes. (<code>T28727</code>)</li> <li>Fix potential unexpected comma-token error in obfuscated JavaScript files. (<code>T28961</code>)</li> <li>Fix potential virtual environment detector crash in isolated processes. (<code>T29171</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_21","title":"Improved","text":"<ul> <li>Store files related to class encryption in the <code>assets/</code> directory for SDK builds, to avoid issues when integrating protected SDKs into non-standard build processes. (<code>T28800</code>)</li> <li>Harden integrity checking of encrypted classes during class decryption. (<code>T28726</code>)</li> <li>Improve class encryption performance at runtime. (<code>T28871</code>)</li> <li>Increase range of supported API levels for activity injection malware detection from 29-33 to 21-35.</li> <li>Resolve several false positive cases for activity injection malware detection.</li> <li>Make DexGuard Gradle Plugin accessible with id <code>com.guardsquare.dexguard</code>. (<code>T14942</code>)</li> <li>Improve emulator detection capabilities. (<code>T28593</code>)</li> </ul>"},{"location":"about/releasenotes.html#upgrade-considerations_2","title":"Upgrade considerations","text":"<ul> <li>As the default location of class encryption related files has changed, any custom scripts verifying the integrity of a protected aar should look for these files in the <code>assets/</code> directory instead of inside the <code>classes.jar</code> file.</li> </ul>"},{"location":"about/releasenotes.html#version-980-11-06-2024","title":"Version 9.8.0 (11-06-2024)","text":""},{"location":"about/releasenotes.html#malware-protection","title":"Malware Protection","text":"<p>This version of DexGuard adds the new malware protection feature. The malware protection feature is designed to defend your users against the attack techniques used by malware - suspicious accessibility services, overlays, activity injection, and screen recording.</p> <p>Note that Android based malware commonly takes advantage of legitimate techniques that are also available to benign applications. Preventing these techniques has an impact on the user experience of your application and requires careful consideration. For example, preventing screen recording has an impact on the ability of your users to take screenshots of your application.</p> <p>DexGuard's malware protection feature adds defense techniques that achieve a balance between security and usability. Learn more in the malware protection feature manual section.</p>"},{"location":"about/releasenotes.html#bugfixes_27","title":"Bugfixes","text":"<ul> <li>Prevent potential false positive in certificate tamper detection. (<code>T28479</code>)</li> <li>Prevent build failure when using <code>-printusage</code> without a file name. (<code>T28731</code>)</li> <li>Prevent <code>unknown enum value for KmVersionRequirementVersionKind</code> exception when processing code compiled with an outdated Kotlin version. (<code>T28757</code>)</li> <li>Prevent <code>IOException</code> caused by obfuscated ELF string section lengths exceeding the original ones.</li> <li>Prevent potential false positive in hook detection. (<code>T28720</code>)</li> <li>Address crash in Flutter apps, on certain x86-64 devices and emulators, with improved handling of CPU registers around injected code. (<code>T27078</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_22","title":"Improved","text":"<ul> <li>Improve virtual environment detection capabilities. (<code>T28576</code>)</li> <li>Prevent name obfuscation from breaking semantics if a class name is used as an argument for <code>equals</code> or <code>equalsIgnoreCase</code>. (<code>T28628</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-970-29-05-2024","title":"Version 9.7.0 (29-05-2024)","text":""},{"location":"about/releasenotes.html#kotlin-20-compatibility","title":"Kotlin 2.0 Compatibility","text":"<p>This version of DexGuard adds full compatibility with the new Kotlin 2.0 release. There are no configuration changes or upgrade considerations tied to this upgrade in compatibility. Please refer to the Kotlin page for more information about Kotlin.</p>"},{"location":"about/releasenotes.html#emulator-and-root-rasp-resilience","title":"Emulator and Root RASP Resilience","text":"<p>In this release, we further hardened emulator and root checks by significantly increasing the amount of injected copies of these checks.</p> <ul> <li>Does not result in significantly bigger applications due to size optimisations within the individual checks.</li> <li>Existing configurations benefit without changes.</li> <li>No effect on the performance of the app.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_28","title":"Bugfixes","text":"<ul> <li>Prevent potential class or method not found exceptions when injecting RASP checks. (<code>T28388</code>)</li> <li>Improve logic while injecting RASP checks to prevent \"Invalid input code with a call to &lt;clinit&gt;\" exceptions. (<code>T28270</code>)</li> <li>Avoid false negative in emulator detection. (<code>T28533</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_23","title":"Improved","text":"<ul> <li>Reduce build time when injecting RASP checks. (<code>T27643</code>)</li> <li>Improve compatibility with the fat AAR functionality of the aaraar plugin. (<code>T28682</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-961-03-05-2024","title":"Version 9.6.1 (03-05-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_29","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>NullPointerException</code> at build time when injecting RASP checks. (<code>T27763</code>)</li> <li>Prevent potential <code>UnsupportedOperationException</code> at build time when injecting RASP checks with a <code>-raspdenylist</code> rule.</li> <li>Prevent potential <code>DirectoryNotEmptyException</code> when packaging debug archive inputs. (<code>T27799</code>)</li> <li>Prevent potential \"glibc does not appear to be installed\" exception even though the library is already installed. (<code>T27872</code>)</li> <li>Prevent potential <code>ClassNotFoundException</code> when injecting RASP checks. (<code>T27585</code>)</li> <li>Fix potential \"cannot constrain type\" error at build time when using <code>-addconfigurationdebugging</code> with serializable classes. (<code>T28287</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_24","title":"Improved","text":"<ul> <li>Improve logging removal optimizations when processing Kotlin libraries targeting Java 9+. (<code>T14614</code>)</li> <li>Improve emulator detection capabilities. (<code>T27630</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-960-15-04-2024","title":"Version 9.6.0 (15-04-2024)","text":""},{"location":"about/releasenotes.html#performance-enhanced-rasp-with-strengthened-resilience","title":"Performance Enhanced RASP with Strengthened Resilience","text":"<p>Root and hook detection are important cornerstones in the RASP layers. To be able to make even better use of these checks, this version of DexGuard will make it easier to apply them in the various code paths of your application by reducing their performance impact.</p> <ul> <li>Root checks are now consistently faster.</li> <li>Hook checks are significantly faster in scenarios where they are called repeatedly.</li> <li>Increase redundancy on root checks to improve resilience.</li> <li>A revised entry point injection strategy results in increased performance after the initial startup of the application.</li> </ul> <p>All RASP efficiency gains come with no security degradation and require no changes to existing configurations.</p>"},{"location":"about/releasenotes.html#new","title":"New","text":"<ul> <li>It is important to regularly update DexGuard to stay protected against the latest threats. The protection report therefore includes a new KPI which represents the recency of your DexGuard version.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_30","title":"Bugfixes","text":"<ul> <li>Prevent infinite loop when using the deprecated <code>-overloadaggressively</code> option.</li> <li>Prevent potential build time increase when injecting RASP checks. (<code>T27084</code>)</li> <li>Correctly strip configuration annotations in library projects. (<code>T27447</code>)</li> <li>Prevent potential error when processing Flutter applications that contain a large amount of Dart classes. (<code>T27583</code>)</li> <li>Prevent potential <code>UnsatisfiedLinkError</code> when configuring RASP injection and native library encryption. (<code>T27011</code>)</li> <li>Prevent potential <code>OutOfMemoryError</code> at build time for consumers of SDKs where RASP checks are injected. (<code>T27489</code>)</li> <li>Prevent potential \"Failed to convert method\" exception when processing certain dex files. (<code>T27741</code>)</li> <li>Prevent potential <code>ArrayIndexOutOfBoundsException</code> at build time while reading the application. (<code>T27192</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_25","title":"Improved","text":"<ul> <li>Improve consistency of warnings being written to <code>stdout</code> and <code>stderr</code>. (<code>T25878</code>)</li> <li>Write build log to DexGuard debugging folder in Gradle build directory, and copy to debug archive when using <code>-archivedebugfiles</code>. (<code>T25878</code>)</li> <li>Apps processed with <code>-addconfigurationdebugging</code> will now report native crashes via runtime telemetry.</li> <li>Upgrade the warning when specifying non-existing files in <code>-raspfiletamperlist</code> to an error. (<code>T18475</code>)</li> <li>Improve compatibility with the fat AAR functionality of the aaraar plugin.</li> </ul> <p>Update considerations</p> <p>The minimum version of Android Studio supported by the DexGuard Android Studio plugin is now Arctic Fox.</p>"},{"location":"about/releasenotes.html#version-955-03-04-2024","title":"Version 9.5.5 (03-04-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_31","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>ClassNotFoundException</code> when encrypting asset files. (<code>T26595</code>)</li> <li>Prevent potential build failures when using <code>-addconfigurationdebugging</code> with app bundles. (<code>T27024</code>)</li> <li>Prevent <code>ParseException</code> when consumer rules contain <code>-maximumremovedandroidloglevel</code> rules. (<code>T27070</code>)</li> <li>Prevent potential <code>ClassNotFoundException</code> when name-obfuscating a class belonging to an unnamed package. (<code>T23115</code>)</li> <li>Allow resources with multiple locales when using Fat AAR functionality. Note that the Fat AAR implementation is still deprecated and scheduled for removal. (<code>T16202</code>)</li> <li>Prevent potential <code>UnsatisfiedLinkError</code> when injecting RASP checks. (<code>T27476</code>)</li> <li>Prevent potential runtime crashes in Hermes-enabled React Native projects. (<code>T26299</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_26","title":"Improved","text":"<ul> <li>Don't print incorrect warnings in the build log when reflecting methods with array types.</li> <li>Fail the build whenever the size of a method overflows, which could result in runtime crashes.</li> <li>Improve virtual environment detection capabilities. (<code>T27008</code>)</li> <li>Improve root detection capabilities. (<code>T26405</code>)</li> <li>Improve the Quick Start page to better guide both new and experienced users.</li> </ul>"},{"location":"about/releasenotes.html#version-954-29-02-2024","title":"Version 9.5.4 (29-02-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_32","title":"Bugfixes","text":"<ul> <li>Prevent potential verifier errors on API 19 devices when using code virtualization and method merging. (<code>T26278</code>)</li> <li>Fix corrupt ELF section header table when processing an AAB with native ThreatCast. (<code>T26433</code>)</li> <li>Prevent potential false positive when enabling RASP hook detection. (<code>T26258</code>)</li> <li>Prevent potential <code>ClassNotFoundException</code> when injecting RASP checks. (<code>T26426</code>)</li> <li>Prevent potential <code>NullPointerException</code> when processing a Kotlin application with MultiFileFacade metadata. (<code>T26379</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_27","title":"Improved","text":"<ul> <li>Improve class encryption resilience against automated tools.</li> <li>Improve hook detection capabilities. (<code>T26162</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-953-13-02-2024","title":"Version 9.5.3 (13-02-2024)","text":""},{"location":"about/releasenotes.html#added_10","title":"Added","text":"<ul> <li>Ensure Android Studio plugin compatibility up to the Android Studio Jellyfish release. (<code>T26390</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_33","title":"Bugfixes","text":"<ul> <li>Prevent build time exception when using the secure keyboard add-on with RASP checks enabled. (<code>T26158</code>)</li> <li>Prevent unwanted name collision leading to missing methods in Kotlin <code>DefaultImpls</code> classes. (<code>T24202</code>)</li> <li>Ensure all configured RASP entry point checks are injected. (<code>T26387</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-952-06-02-2024","title":"Version 9.5.2 (06-02-2024)","text":""},{"location":"about/releasenotes.html#added_11","title":"Added","text":"<ul> <li>DexGuard will now throw an exception whenever no RASP checks are injected for an enabled detector. (<code>T25929</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_34","title":"Bugfixes","text":"<ul> <li>Ensure all RASP deny listed entry points are excluded from RASP injection. (<code>T25929</code>)</li> <li>Improve performance of the RASP hook check in applications using the IBM Trusteer library. (<code>T25490</code>)</li> <li>Prevent potential stack corruption when enabling emulator RASP checks. (<code>T26024</code>)</li> <li>Resolve incompatibility between the DexGuard and Hilt Gradle plugins when unit tests are present. (<code>T25879</code>)</li> <li>Prevent potential <code>NoSuchFileException</code> when using <code>-archivedebugfiles</code>. (<code>T26070</code>)</li> <li>Prevent generation of invalid manifest files in app bundles that would lead to an <code>InvalidBundleException</code> in bundletool. (<code>T26272</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_28","title":"Improved","text":"<ul> <li>Improve root detection capabilities.</li> <li>Improve logging removal in Flutter apps. (<code>T26088</code>)</li> <li>Hook spraying benefits greatly from Profile Guided Obfuscation (PGO) as to avoid performance-sensitive methods which can lead to ANRs. Because of this, hook detection checks will no longer automatically be sprayed by default when specifying <code>-raspchecks hook</code>. To re-enable spraying, first go through the PGO steps, pass the profiling data to DexGuard and afterwards explicitly specify <code>-raspchecks hook spray</code>. (<code>T25373</code>)</li> <li><code>Parcelable</code>s can now be name obfuscated. (<code>T26186</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-951-23-01-2024","title":"Version 9.5.1 (23-01-2024)","text":""},{"location":"about/releasenotes.html#bugfixes_35","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>CompilationError: Could not parse code</code> error when applying Gson optimization. (<code>T25165</code>)</li> <li>Improve consumer rule generation for SDKs. (<code>T25099</code>)</li> <li>Prevent potential <code>ClassNotFoundException</code> when encrypting native libraries using the native loader. (<code>T24977</code>)</li> <li>Prevent potential <code>UnsatisfiedLinkError</code> when enabling emulator RASP checks. (<code>T25434</code>)</li> <li>Ensure all configured RASP entry point checks are injected. (<code>T25859</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_29","title":"Improved","text":"<ul> <li>Improve root detection capabilities. (<code>T25027</code>, <code>T25482</code>, <code>T25480</code>)</li> <li>Flutter obfuscation debug output is stored by default in the mapping debug folder. (<code>T25677</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-950-09-01-2024","title":"Version 9.5.0 (09-01-2024)","text":"<p>DexGuard 9.5.0 might require minor changes of your configuration and/or Gradle integration. These are detailed in the upgrading guide.</p>"},{"location":"about/releasenotes.html#profile-guided-obfuscation_1","title":"Profile-Guided Obfuscation","text":"<p>Fine-tuning the balance between performance impact and security for DexGuard protection requires app profiling, combined with product understanding, to achieve optimal results. DexGuard already provided the <code>-addconfigurationdebugging</code> feature to assist in resolving crashes in your application. Now, DexGuard gains the ability to also assist in balancing performance for RASP injection.</p> <ul> <li>Add the <code>-addprofiling</code> option to enable performance profiling.</li> <li>Automatic selection of suitable injection locations based on profiling data provided through the <code>-profilingdata</code> option.</li> <li>Prevent applications with profiling instrumentation from being released on the Play Store.</li> </ul> <p>Read more about how to use the feature on our PGO manual page.</p>"},{"location":"about/releasenotes.html#improved-rasp-resilience","title":"Improved RASP resilience","text":"<p>A cornerstone in our philosophy with regards to RASP is that the checks must be mixed in to the application code to make sure they cannot be patched in a scalable way. In this release we increase the surface of the injection locations in user code and improve the interweaving logic.</p> <ul> <li>Improved resilience against static and dynamic patching for all detectors that don't have <code>-raspcontinueon</code> set by interleaving RASP checks more with user code.</li> <li>RASP checks are injected in more diverse locations.</li> <li>Improved protection of data crossing the JNI bridge for native runtime checks.</li> </ul>"},{"location":"about/releasenotes.html#strengthened-code-obfuscation","title":"Strengthened code obfuscation","text":"<p>Code obfuscation is an important and versatile tool to hamper both static and dynamic analysis of sensitive methods. Advancements in popular reverse engineering tools allow to undo the effects of certain code obfuscation techniques. We have increased the resilience of code obfuscation by adding new techniques that resist analysis by the most recent deobfuscators.</p> <ul> <li>Introduce new secure primitives and obfuscation techniques to strengthen existing security features against automatic deobfuscation.</li> </ul>"},{"location":"about/releasenotes.html#other-improvements","title":"Other improvements","text":"<ul> <li>Add support for Flutter 3.16.</li> <li><code>-addconfigurationdebugging</code> has been updated to find keep rules in situations that were previously unsupported. Among other improvements, the feature now covers reflective accesses from native libraries to Java code.</li> <li>Allow partial encryption of native libraries (see <code>-encryptnativelibraries</code> in the reference guide). (<code>T15982</code>)</li> <li>Add <code>memoryscanning</code> RASP feature to detect memory scanning tools. (<code>T18838</code>)</li> <li>Prevent potential <code>StackGeneralizationException</code> during optimization when processing methods with many arguments. (<code>T25279</code>)</li> <li>In the past, the Windows Subsystem for Linux (WSL) was required on Windows for certain protection features using native libraries.   These protection features are now supported natively on Windows.   However, the WSL is still required for Flutter applications.</li> <li>Apps processed with <code>-addconfigurationdebugging</code> will send telemetry to the Guardsquare servers at application runtime.   More information can be found here.</li> <li>Prevent injection of RASP checks in methods targeted by <code>-keep,includecode</code>. (<code>T6937</code>)</li> </ul> <p>Update considerations</p> <ul> <li>The <code>apktamper</code> RASP detector is removed in favour of the <code>apptamper</code> detector. See the update considerations for DexGuard 9.4.0 for more information.</li> <li>The deprecated packer feature (<code>-pack</code>) has been removed.</li> <li>The DEX file splitting feature (<code>-splitdexfile</code>) has been removed.</li> <li>The custom encryption plugin feature (<code>-pluginjars</code>) has been removed.</li> <li>RASP diversification ensures that no two instances of a protected application have fully identical copies of the RASP checks. This important security feature is now enforced through the removal of the <code>-dontdiversify</code> option.</li> <li>Building fat AARs using the DexGuard Gradle plugin has been deprecated. We refer to the open-source community for fat AAR implementations. DexGuard can still obfuscate fat AARs that are provided to it as an input.</li> <li>The DexGuard Gradle plugin no longer supports versions of the Android Gradle Plugin older than 4.0.0.</li> <li>DexGuard no longers backports Java 8+ APIs as these APIs are already backported by AGP before DexGuard processes an app/library. For more information, please consult the relevant Android developer documentation.</li> <li>Previous versions of DexGuard required to use a workaround that enabled R8 (the default Android Shrinker) with <code>-dont*</code> keep rules if you relied on configuration rules that use runtime-invisible annotations. DexGuard now automatically handles this case when using AGP 7.2 or higher and you should now disable R8, by setting <code>minifyEnabled false</code> for the build variants that you apply DexGuard to. If you are using AGP &lt; 7.2 you will still need to apply the workaround documented here.</li> <li>It is now no longer required to fat-pack the DexGuard runtime into an SDK when preparing a releasable artifact. Instead, you can specify the DexGuard runtime as a <code>releaseCompileOnly</code> dependency. DexGuard will then inject the necessary artifacts into your SDK during processing. Since the necessary artifacts are added during processing, the unprotected version of your SDK will not be functional. If this is an issue, you can instead make the DexGuard runtime an <code>implementation</code> dependency. When using the maven publish plugin, this will add the DexGuard runtime as a dependency in your SDK's pom file, which then has to be filtered out. For more information, please visit the following known issues page.</li> <li>With the automatic injection of the ThreatCast client, it is no longer necessary to explicitly declare dependencies on the ThreatCast libraries in your <code>build.gradle</code> files. This has the advantage that the library classes will no longer end up in your unprotected application, and you no longer have to worry about keeping the ThreatCast version in sync with the DexGuard version. The old workflow is no longer supported, which means you should remove the dependency from your project.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_36","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>ClassNotFoundException</code> when injecting RASP checks in Flutter apps. (<code>T25105</code>)</li> <li>Prevent potential <code>IllegalArgumentException</code> during Gson optimization. (<code>T25355</code>)</li> <li>Prevent potential <code>StringIndexOutOfBoundsException</code> in Kotlin code when using the default <code>&lt;keptnames&gt;</code> obfuscation dictionary. (<code>T25370</code>)</li> <li>Prevent potential <code>IllegalArgumentException</code> at build time when configuring a RASP callback. (<code>T25273</code>)</li> <li>Resolve invalid symbol redefinition error when processing Flutter apps with code-integrity. (<code>T17268</code>)</li> <li>Prevent potential <code>IOException</code> at build time when enabling RASP or String encryption. (<code>T24844</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9424-20-12-2023","title":"Version 9.4.24 (20-12-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_37","title":"Bugfixes","text":"<ul> <li>Prevent potential failure to collect Crashlytics build ID at build time when <code>uploadCrashlyticsMappingFile = true</code>. (<code>T24973</code>)</li> <li>Fix <code>ClassNotFoundException</code> at runtime when encrypting record classes in library projects. (<code>T24775</code>)</li> <li>Prevent potential <code>SEGV_MAPERR</code> in the hook detector. (<code>T25044</code>)</li> <li>Prevent potential <code>UnsatisfiedLinkError</code> when encrypting native libraries. (<code>T24986</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_30","title":"Improved","text":"<ul> <li>Don't introduce public fields, visible to consumers of protected libraries, in non-interface classes as part of obfuscation. (<code>T24988</code>)</li> <li>Reduce the required glibc version to 2.17. Users of older Linux distributions like RHEL 7 who have added the <code>-dontnatify</code> and/or <code>-dontdiversify</code> flag are highly recommended to remove these again.</li> <li>Prevent undesired warnings at build time when injecting RASP checks. (<code>T24794</code>)</li> <li>Add an <code>-intunecompatibility</code> option to resolve incompatibilities between the hook detector and Microsoft Intune's Mobile Application Management SDK. (<code>T24327</code>)</li> <li>Improve root detection capabilities. (<code>T24953</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9423-04-12-2023","title":"Version 9.4.23 (04-12-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_38","title":"Bugfixes","text":"<ul> <li>Restore compatibility with Java 8. (<code>T24898</code>)</li> <li>Improve processing of Kotlin metadata flags to prevent unnecessary null checks for consumers of protected library artifacts. (<code>T24745</code>)</li> <li>Fix service provider configuration parsing which could cause unexpected classes to not be name obfuscated. (<code>T22068</code>)</li> <li>Fix potential <code>ClassNotFoundException</code> when non-inner classes are renamed to classes including a '$' sign. (<code>T24561</code>)</li> <li>Prevent potential <code>NullPointerException</code> during native library obfuscation. (<code>T24704</code>)</li> <li>Prevent potential R8 exception during processing when trying to encrypt reflection strings in interfaces for a minimum SDK version &lt; 24. (<code>T24817</code>)</li> <li>Prevent consumer rules unexpectedly being generated for classes kept <code>asapi</code> when injecting RASP checks. (<code>T24767</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_31","title":"Improved","text":"<ul> <li>Service providers and their configurations in <code>META-INF/services/</code> are now automatically renamed if their corresponding classes are. (<code>T22068</code>)</li> <li>Improve error message when Flutter obfuscation fails due to no supported architecture being present in the input application. (<code>T24768</code>)</li> <li>By default, <code>-archivedebugfiles</code> will no longer include the unprotected/protected application and its dependencies. This must now be enabled using the <code>includeinputs</code> and <code>includeprotected</code> modifiers. (<code>T24442</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9422-22-11-2023","title":"Version 9.4.22 (22-11-2023)","text":""},{"location":"about/releasenotes.html#added_12","title":"Added","text":"<ul> <li>Support parsing of <code>&lt;clinit&gt;</code> methods without specifying the return type in class specifications. (<code>T24469</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_39","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>Resources$NotFoundException</code> when applying string encryption to projects with dynamic feature modules. (<code>T24470</code>)</li> <li>Don't print unnecessary <code>ExcessiveComplexityException</code> messages in the build log. (<code>T24409</code>)</li> <li>Fix potential <code>StackOverflowError</code> in AARs when enabling String encryption. (<code>T24377</code>)</li> <li>Fix potentially missing consumer rules in a library project. (<code>T24338</code>, <code>T24427</code>)</li> <li>Fix <code>CompilationError: Unexpected attempt to get register for a value without a register</code> during output writing. (<code>T23891</code>)</li> <li>Fix <code>Unsupported class file major version 61 (Java 17)</code> during class encryption in library projects. (<code>T24468</code>).</li> <li>Fix potential <code>AbstractMethodError</code> or unexpected behavior related to overriding package-private methods in an encrypted class. (<code>T24326</code>)</li> <li>Prevent potential <code>UnsatisfiedLinkError</code> when enabling RASP checks in app bundles with dynamic features. (<code>T21159</code>)</li> <li>Prevent potential <code>ClassCastException</code> when optimizing Kotlin code. (<code>T23625</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9421-10-11-2023","title":"Version 9.4.21 (10-11-2023)","text":""},{"location":"about/releasenotes.html#added_13","title":"Added","text":"<ul> <li>Add a new configuration option <code>-abifilter</code> to control the ABIs for generated native libraries. (<code>T23942</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_40","title":"Bugfixes","text":"<ul> <li>Fix potential <code>DEXOPT</code> issue when installing apps on Android 5.0 when RASP is enabled. (<code>T24260</code>)</li> <li>Prevent potential false positives in the hook detector. (<code>T24153</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_32","title":"Improved","text":"<ul> <li>Improve root detection capabilities. (<code>T24467</code>, <code>T24500</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9420-02-11-2023","title":"Version 9.4.20 (02-11-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_41","title":"Bugfixes","text":"<ul> <li>Fix potential false positive introduced in 9.4.18 in the CertificateChecker when the check is executed in a separate process.</li> </ul>"},{"location":"about/releasenotes.html#improved_33","title":"Improved","text":"<ul> <li>Resource XML attribute value strings are now preserved for app bundles. This makes them easier to inspect during development and doesn't affect the final generated APK on the Google Play Store. (<code>T23844</code>)</li> <li>Improve root detection capabilities.</li> </ul>"},{"location":"about/releasenotes.html#version-9419-24-10-2023","title":"Version 9.4.19 (24-10-2023)","text":""},{"location":"about/releasenotes.html#added_14","title":"Added","text":"<ul> <li>Support Flutter 3.13.</li> <li>Support parsing of wildcard <code>*</code> when used as a field type or method return type in class specifications. (<code>T22914</code>)</li> <li>Support parsing, but not application of R8 rules <code>-alwaysinline</code> and <code>-identifiernamestring</code>. (<code>T23905</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_42","title":"Bugfixes","text":"<ul> <li>Prevent a potential crash during garbage collection in Flutter apps whenever <code>--split-debug-info</code> is used. (<code>T20362</code>)</li> <li>Prevent potential <code>NullPointerException</code> when configuring RASP callbacks with a <code>long</code> parameter in Kotlin code. (<code>T24033</code>)</li> <li>Prevent potential <code>ClassNotFoundException</code> and <code>MethodNotFoundException</code> in applications due to missing consumer rules in libraries with RASP checks. (<code>T23729</code>)</li> <li>Prevent rare runtime \"Segmentation violation (invalid memory reference)\" errors when enabling hook checks. (<code>T23755</code>)</li> <li>Fix task dependency error in Gradle Plugin when building Espresso test application and <code>overwriteUnprotected</code> is set to <code>true</code>. (<code>T23927</code>)</li> <li>Fix potential <code>NullPointerException</code> when processing native libraries. (<code>T23957</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_34","title":"Improved","text":"<ul> <li>Improve performance of root checks. (<code>T24019</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9418-02-10-2023","title":"Version 9.4.18 (02-10-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_43","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>Resources$NotFoundException</code> when encrypting resources retrieved by <code>Resources#getIdentifier</code>. (<code>T22738</code>)</li> <li>Fix DexGuard Gradle plugin compatibility with Java 8. (<code>T23619</code>)</li> <li>Fix DexGuard compatibility with Android Gradle plugin 8.1+. (<code>T23054</code>)</li> <li>Do not inline interface methods during optimization to avoid compilation errors during output writing due to an interface method being made package-visible. (<code>T22894</code>)</li> <li>Fix potential false positive in the RASP hook check when using IBM Trusteer library. (<code>T23538</code>)</li> <li>Automatically add missing consumer rules when protecting a library where encrypted classes implement or override unencrypted methods. (<code>T23487</code>)</li> <li>Fix potential <code>ClassNotFoundException</code> when injecting into input classes that cannot be loaded. (<code>T22881</code>)</li> <li>Fix various samples not working due to having a package name not registered in the sample license or not using the sample keystore.</li> </ul>"},{"location":"about/releasenotes.html#improved_35","title":"Improved","text":"<ul> <li>Improve performance of the certificate checker when multiple certificates hashes are provided. (<code>T23021</code>)</li> <li>If a non-existent method is configured as a RASP callback, this is now detected and reported faster. (<code>T22952</code>)</li> <li>Remove default keep rule added in 9.4.17 for the Coil library due to the underlying issue having been fixed by <code>T22894</code>.</li> </ul>"},{"location":"about/releasenotes.html#version-9417-06-09-2023","title":"Version 9.4.17 (06-09-2023)","text":""},{"location":"about/releasenotes.html#added_15","title":"Added","text":"<ul> <li>Add default keep rule to work around issues with the Coil library. (<code>T22980</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_44","title":"Bugfixes","text":"<ul> <li>Prevent classes unnecessarily not being encrypted when used in lambda expressions. (<code>T22784</code>)</li> <li>Fix potential root detector false positive. (<code>T22689</code>)</li> <li>Fix error about new string section size exceeding the original, related to reading of UTF8 characters. (<code>T22713</code>)</li> <li>Prevent classes in the <code>org.apache.http</code> package from being forcibly kept. (<code>T22735</code>)</li> <li>Fix Gradle deprecation warning for the use of <code>JavaExecSpec.main</code> in <code>DexGuardTask</code>.</li> <li>Fix potential <code>UnsupportedOperationException</code> when trying to shrink Kotlin metadata of a lambda function. (<code>T22805</code>)</li> <li>Fix potential <code>UnsupportedOperationException</code> when using RASP callbacks with a <code>long</code> parameter and annotations. (<code>T22889</code>)</li> <li>Fix potential <code>NullPointerException</code> when using a Kotlin RASP callback with a <code>long</code> parameter. (<code>T22815</code>)</li> <li>Fix <code>InvalidUserCodeException</code> when building a library project using Android Studio Giraffe and Android Gradle plugin 8+. (<code>T22725</code>)</li> <li>Fix invalid warning about <code>classes.dex</code> file in RASP file tamper list not existing when processing an app bundle. (<code>T22835</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_36","title":"Improved","text":"<ul> <li>Improve root detection capabilities. (<code>T22791</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9416-18-08-2023","title":"Version 9.4.16 (18-08-2023)","text":""},{"location":"about/releasenotes.html#added_16","title":"Added","text":"<ul> <li>Support Kotlin 1.9. (<code>T18861</code>)</li> <li>Add the <code>-archivedebugfiles</code> option to DexGuard in order to collect and archive the debug files. See the option reference in the manual (<code>-archivedebugfiles</code>) for more information on which files are collected. (<code>T2626</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_45","title":"Bugfixes","text":"<ul> <li>Fix writing of DexGuard only config options to <code>proguard.txt</code> consumer rules in SDK projects. (<code>T22337</code>)</li> <li>Fix callbacks not being found when obfuscating Flutter applications. (<code>T21794</code>)</li> <li>Fix potential <code>NoClassDefFoundError</code> when using Gson optimization in app bundles with dynamic features. (<code>T22008</code>)</li> <li>Further harden the <code>certificatetamper</code> detector against potential false positives.</li> <li>Reinstate version property of the Gradle plugin to improve BugSnag compatibility. (<code>T22303</code>)</li> <li>Prevent potential <code>ArrayIndexOutOfBoundsException</code> when decrypting classes in an isolated process. (<code>T17372</code>)</li> <li>Prevent potential <code>IllegalArgumentException</code> when adding reflection. (<code>T22208</code>)</li> <li>Fix overwriting of incorrect file path when combining <code>overwriteUnprotected</code> with <code>uploadCrashlyticsMappingFile</code>. (<code>T22432</code>, <code>T22422</code>)</li> <li>Prevent potential class or method not found exceptions when injecting RASP checks. (<code>T22209</code>, <code>T22378</code>, <code>T22491</code>, <code>T22617</code>)</li> <li>Fix potential configuration parsing issue related to incorrectly escaped quotes. (<code>T22624</code>)</li> <li>Fix potential <code>ArrayIndexOutOfBounds</code> error in code virtualization. (<code>T21227</code>)</li> <li>Fix potential <code>NoSuchMethodError</code> when injecting into the legacy http library classes. (<code>T22754</code>)</li> <li>Fix incorrectly applied obfuscation settings for Flutter applications present in 9.4.14 and 9.4.15. (<code>T22745</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_37","title":"Improved","text":"<ul> <li>Improve string encryption hardening. (<code>T22065</code>)</li> <li>Automatically include <code>dexguard-rasp.pro</code> when RASP checks are specified in the configuration. (<code>T3835</code>)</li> <li>Add names of missing classes to \"incomplete class hierarchy\" error message. (<code>T4919</code>)</li> <li>Ensure Android Studio plugin compatibility up to the latest Android Studio release (Giraffe).</li> <li>Improve emulator detection capabilities. (<code>T22244</code>, <code>T22436</code>)</li> <li>Disable code obfuscation when using <code>-addconfigurationdebugging</code>. (<code>T22651</code>)</li> <li>The <code>-overloadaggressively</code> option will no longer have any effect. (<code>T22300</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9413-12-07-2023","title":"Version 9.4.13 (12-07-2023)","text":""},{"location":"about/releasenotes.html#added_17","title":"Added","text":"<ul> <li>Support a separate callback for each type of RASP detector.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_46","title":"Bugfixes","text":"<ul> <li>Prevent inapplicable RASP warnings from being shown in the protection report for SDKs. (<code>T17911</code>)</li> <li>Fix potential runtime crashes on Android 7, 8 devices due to anonymous inner classes. (<code>T21528</code>)</li> <li>Fix potential DEX_OPT error at installation time on Android 5. (<code>T21877</code>)</li> <li>Fix incorrectly emitted warning when an AAR project has no <code>maxSdkVersion</code> defined. (<code>T22091</code>)</li> <li>Fix potential invalid ThreatCast API key error when formatting special file paths. (<code>T21763</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_38","title":"Improved","text":"<ul> <li>Automatically inject the ThreatCast client. (<code>T3311</code>)</li> <li>Improve error message when no glibc is installed.</li> <li>Allow the DexGuard runtime AAR to be specified as a <code>compileOnly</code> dependency.</li> </ul> <p> Upgrade considerations for version 9.4.13:</p> <ul> <li> <p>With the automatic injection of the ThreatCast client, it is no longer necessary to explicitly declare dependencies on   the ThreatCast libraries in your <code>build.gradle</code> files. This has the advantage that the library classes will no longer end   up in your unprotected application, and you no longer have to worry about keeping the ThreatCast version in sync with the   DexGuard version. The old workflow is still supported, but no longer documented.</p> </li> <li> <p>It is now no longer required to fat-pack the DexGuard runtime into an SDK when preparing a releasable artifact.   Instead, you can specify the DexGuard runtime as a <code>releaseCompileOnly</code> dependency. DexGuard will then inject   the necessary artifacts into your SDK during processing. Note that since the necessary artifacts are added during   processing, the unprotected version of your SDK will not be functional. If this is an issue, you can instead make   the DexGuard runtime an <code>implementation</code> dependency. However, please take into account that when using the maven   publish plugin, this will add the DexGuard runtime as a dependency in your SDK's pom file, which then has to be   filtered out. For more information, please visit the following   known issues page.</p> </li> </ul>"},{"location":"about/releasenotes.html#version-9411-12-06-2023","title":"Version 9.4.11 (12-06-2023)","text":""},{"location":"about/releasenotes.html#added_18","title":"Added","text":"<ul> <li>Support Flutter 3.10.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_47","title":"Bugfixes","text":"<ul> <li>Fix potential <code>OutOfMemoryError</code> during configuration debugging. (<code>T16670</code>)</li> <li>Further harden the <code>certificatetamper</code> and <code>apptamper</code> detectors against potential false positives. (<code>T21833</code>)</li> <li>Avoid encrypting too many strings when <code>-encryptnativelibraries</code> is used, which could cause runtime crashes. (<code>T19602</code>, <code>T21276</code>)</li> <li>Fix potential false positives in root detection introduced in DexGuard 9.4.5. (<code>T21840</code>)</li> <li>Fix potential <code>NoClassDefFoundError</code> when embedding DexGuard's runtime library in library projects. (<code>T21683</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9410-05-06-2023","title":"Version 9.4.10 (05-06-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_48","title":"Bugfixes","text":"<ul> <li>Capture consumer rules for module dependencies in the Gradle plugin when using Gradle 8. (<code>T21429</code>)</li> <li>Remove reliance on deprecated Gradle API's, which could lead to Android Studio crashes. (<code>T21657</code>)</li> <li>Fix potential <code>UnsatisfiedLinkError</code> in Hermes-enabled React Native projects. (<code>T20901</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_39","title":"Improved","text":"<ul> <li>Allow class names, member names and strings starting with dash (<code>-</code>) in configuration options. (<code>T20526</code>)</li> <li>Speed up processing of applications that contain a lot of resources.</li> <li>Improve virtual environment detection capabilities. (<code>T21515</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-949-22-05-2023","title":"Version 9.4.9 (22-05-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_49","title":"Bugfixes","text":"<ul> <li>Fix potential runtime exception introduced in rare circumstances by <code>-obfuscatecode</code>. (<code>T20792</code>)</li> <li>Fix potential <code>UnsatisfiedLinkError</code> at build time on Ubuntu 16.04. (<code>T20584</code>)</li> <li>Fix writing of APK v1 signatures when processing baseline profiles. (<code>T20994</code>)</li> <li>Fix potential <code>NullPointerException</code> when processing Kotlin annotations. (<code>T2970</code>, <code>T21053</code>)</li> <li>Fix potential false positives in the <code>certificate</code> and <code>apptamper</code> detectors. (<code>T21592</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_40","title":"Improved","text":"<ul> <li>Improve UX for instrumented tests when disabling DexGuard Gradle tasks.</li> </ul>"},{"location":"about/releasenotes.html#version-948-25-04-2023","title":"Version 9.4.8 (25-04-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_50","title":"Bugfixes","text":"<ul> <li>Fix potential size and runtime performance regressions in native code. (<code>T20678</code>, <code>T20764</code>)</li> <li>Improve robustness of the certificate checker under certain conditions. (<code>T20751</code>)</li> <li>Fix potential build time performance regression in initialization step. (<code>T20516</code>)</li> <li>Fix potential <code>NullPointerException</code> at build time when encrypting classes. (<code>T20793</code>)</li> <li>Fix potential <code>NullPointerException</code> in virtualized code. (<code>T19930</code>)</li> <li>Fix potential <code>NoSuchMethodError</code> when using the native ThreatCast client. (<code>T20870</code>)</li> <li>Fix potential false positive in root detection on certain BlackBerry devices. (<code>T20885</code>)</li> <li>Fix potential <code>ExceptionInInitializerError</code> when using ThreatCast with Firebase. (<code>T20546</code>)</li> <li>Fix potential <code>ClassNotFoundException</code> when processing a library due to classes not being written at the correct place. (<code>T20763</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_41","title":"Improved","text":"<ul> <li>Improve asset decryption performance. (<code>T20686</code>)</li> <li>Improve root detection capabilities.</li> <li>Keep a <code>Parcelable</code>'s <code>CREATOR</code> field by default when processing Kotlin metadata.</li> <li>Improve build times for applications containing a baseline profile. (<code>T20378</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-947-31-03-2023","title":"Version 9.4.7 (31-03-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_51","title":"Bugfixes","text":"<ul> <li>Fix critical issue in 9.4.6 leading to random native crashes.</li> <li>Fix an issue where updating JNI method names in native libraries could lead to native crashes at runtime. (<code>T7302</code>)</li> <li>Fix incorrect encrypted resource value in the protection report. (<code>T5673</code>)</li> <li>Fix a potential issue where classes are shrunk even though they are referenced by the AndroidManifest.xml.</li> </ul>"},{"location":"about/releasenotes.html#version-946-27-03-2023","title":"Version 9.4.6 (27-03-2023)","text":""},{"location":"about/releasenotes.html#added_19","title":"Added","text":"<ul> <li>Support Flutter 3.7.</li> <li>Support Flutter 3.3.10.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_52","title":"Bugfixes","text":"<ul> <li>Allow including the <code>dexguard-kotlin-serialization.pro</code> configuration using the <code>defaultConfiguration</code> option.</li> <li>Prevent runtime classpath configuration from being resolved too early when using the DexGuard Gradle plugin with a Gradle version greater than 7.4.1 if applying dependency substitution. (<code>T19962</code>)</li> <li>Keep system classes injected by R8 to prevent potential <code>ClassNotFoundException</code> and <code>AbstractMethodError</code> at runtime. (<code>T20121</code>)</li> <li>Fix usage of Gradle API removed in Gradle 8 in the DexGuard Gradle plugin Crashlytics support, which resulted in a <code>NoSuchMethodError</code>. (<code>T20478</code>)</li> <li>Fix potential <code>NullPointerException</code> when marking KotlinTypeAliases. (<code>T20483</code>)</li> <li>Fix the number of RASP entrypoint injections being lower than intended for some apps. (<code>T19989</code>)</li> <li>Keep attribute names of restriction XML tags to avoid a parsing error when uploading to the Google Play Store.</li> <li>Prevent potential <code>ArrayIndexOutOfBoundsException</code> when using <code>-compressencryptednativelibraries</code>. (<code>T20540</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-945-09-03-2023","title":"Version 9.4.5 (09-03-2023)","text":""},{"location":"about/releasenotes.html#added_20","title":"Added","text":"<ul> <li>Add a seatbelt for <code>-encryptresourcefiles</code> and <code>-encryptresources</code> rules for AARs. (<code>T19893</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_53","title":"Bugfixes","text":"<ul> <li>Prevent potential native crash when using <code>thread_local</code> variables. (<code>T19882</code>)</li> <li>Allow checkpoints to be injected in classes filtered by the <code>-raspclassfilter</code>. (<code>T20124</code>)</li> <li>Fix potential <code>NullPointerException</code> when optimizing Kotlin code. (<code>T20131</code>)</li> <li>Prevent a <code>ClassNotFoundException</code> at runtime related to <code>androidx</code> classes in <code>compileOnly</code> dependencies.</li> <li>Prevent a possible <code>NullPointerException</code> when specifying a RASP checkpoint in a static method of a <code>ContextWrapper</code> class.</li> <li>Fix potential false positive in the <code>certificate</code> and <code>apptamper</code> detectors when run inside a separate process. (<code>T20269</code>)</li> <li>Fix potential <code>JavascriptException</code> when applying string encryption in Hermes-enabled React Native applications. (<code>T20105</code>)</li> <li>Fix potential build time performance regression when encrypting a very large number of strings. (<code>T20021</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-944-28-02-2023","title":"Version 9.4.4 (28-02-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_54","title":"Bugfixes","text":"<ul> <li>Fix potential incompatibility with Java 8.</li> <li>Prevent potential native crash during hook detection. (<code>T20133</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-943-20-02-2023","title":"Version 9.4.3 (20-02-2023)","text":""},{"location":"about/releasenotes.html#added_21","title":"Added","text":"<ul> <li>Add <code>dexguard-kotlin-serialization.pro</code> configuration file.</li> <li>Add new app integrity checks under <code>certificatetamper</code> and <code>apptamper</code>. (<code>T19943</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_55","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>IllegalArgumentException</code> when decrypting compressed encrypted native libraries. (<code>T19846</code>)</li> <li>Fix potential <code>NullPointerException</code> when using <code>-addconfigurationdebugging</code> in combination with manual RASP checks. (<code>T19664</code>)</li> <li>Remove mention of removed constant <code>DEBUGGER_CONNECTED</code> in the <code>DebugBlocker</code> Javadoc page.</li> <li>Fix potential false negative when using the <code>apptamper</code> detector. (<code>T19940</code>)</li> <li>Fix fallback to license <code>dexguard-license2.txt</code> when <code>dexguard-license.txt</code> is invalid.</li> <li>Prevent potential broken <code>BroadcastReceiver</code> functionality when injecting entry point RASP checks. (<code>T20015</code>)</li> <li>Prevent <code>UnsatisfiedLinkError</code> caused by missing <code>DT_HASH</code>/<code>DT_GNU_HASH</code> sections in flutter apps. (<code>T19879</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_42","title":"Improved","text":"<ul> <li>Improve emulator detection capabilities. (<code>T19795</code>)</li> <li>Improve root detection capabilities. (<code>T19796</code>)</li> </ul>"},{"location":"about/releasenotes.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>DexGuard now obfuscates and keeps <code>throw</code>/<code>check</code> calls in Kotlin Intrinsics by default. (<code>T19671</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-942-02-02-2023","title":"Version 9.4.2 (02-02-2023)","text":""},{"location":"about/releasenotes.html#bugfixes_56","title":"Bugfixes","text":"<ul> <li>Fix incompatibility between JVM version 1.8 and the DexGuard Gradle plugin.</li> <li>Fix potential hanging issue due to asset encryption in Cordova/Ionic apps on devices with a recent WebView implementation. (<code>T19804</code>)</li> <li>Fix potential <code>UnsatisfiedLinkError</code> when using <code>-addconfigurationdebugging</code> with React Native and Hermes. (<code>T19426</code>)</li> <li>Fix potential <code>NullPointerException</code> when processing application with missing Kotlin metadata. (<code>T19750</code>)</li> <li>Fix potential <code>NullPointerException</code> at build time when a custom root detector callback is not configured. (<code>T18895</code>)</li> <li>Prevent potential false positive in the Hook Detector. (<code>T18652</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_43","title":"Improved","text":"<ul> <li>Allow for domain specific network configurations when using the runtime <code>SSLPinner</code>.</li> <li>Improve emulator detection capabilities. (<code>T18959</code>)</li> <li>Improve root detection performance in certain scenarios. (<code>T19071</code>)</li> <li>Merge classes only when <code>-optimizeaggressively</code> is set. (<code>T17879</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-941-19-01-2023","title":"Version 9.4.1 (19-01-2023)","text":""},{"location":"about/releasenotes.html#added_22","title":"Added","text":"<ul> <li>Add support for Kotlin 1.8. (<code>T15503</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_57","title":"Bugfixes","text":"<ul> <li>Fix potential <code>ClassNotFoundException</code> when injecting RASP checks. (<code>T18945</code>)</li> <li>Fix potential build-time error in Cordova plugin.</li> <li>Fix potential runtime error when using AGP 7.3.0+ with <code>minifyEnabled</code> set to true. (<code>T18639</code>)</li> <li>Fix missing newline in <code>-printconfiguration</code> output. (<code>T19516</code>)</li> </ul> <p>Update considerations</p>"},{"location":"about/releasenotes.html#removed-performanceprofile-option","title":"Removed <code>-performanceprofile</code> option","text":"<p>DexGuard 9.4.1 removes the <code>-performanceprofile</code> option.</p>"},{"location":"about/releasenotes.html#version-940-05-01-2023","title":"Version 9.4.0 (05-01-2023)","text":""},{"location":"about/releasenotes.html#strengthened-string-encryption","title":"Strengthened String Encryption","text":"<p>String Encryption has always been a key technique in protecting data. Advancements in popular reverse engineering tools more often use advanced techniques like emulation and symbolic execution to assist breaking decryption. In order to continuously stay ahead we greatly innovated our String Encryption arsenal with a focus on expanding the search space without noticeable performance overhead.</p> <ul> <li>String Encryption now automatically crosses technologies.</li> <li>Randomised polymorphic algorithm generation.</li> <li>Automatic selection of security sensitive traces.</li> <li>Randomised split points between technologies.</li> </ul>"},{"location":"about/releasenotes.html#improved-configuration-debugging","title":"Improved Configuration Debugging","text":"<p>The <code>-addconfigurationdebugging</code> option instruments your app to help you determine which keep rules might be missing from your configuration. The previous version of this feature could require a lot of iterations to get to a working configuration. We further improved this feature to enable you to find all rules in one run of your app.</p> <ul> <li>Find all keep rules in one iteration, no more \"crash-add rule\"-cycles.</li> <li>Retrieve all the keep rules from your device using a single command.</li> <li>Applications with debugging instrumentation are automatically protected from being released on the Play Store.</li> <li>Read more about how to use the feature on our configuration manual page.</li> </ul>"},{"location":"about/releasenotes.html#more-configurable-rasp","title":"More Configurable RASP","text":"<p>DexGuard allows you to enable RASP checks using manually added checks or automatic injection. The automatic approach is more resilient and we have now made it even more configurable than before. This will enable more use cases to be covered with the automatic injections, as you can achieve similar levels of control as with manual injection.</p> <ul> <li>Entry point and Spray injection can be enabled independently.</li> <li>Checkpoints enable you to reaffirm the security of your app in specific locations of importance.</li> <li>Read more about how to configure RASP on our RASP manual page.</li> </ul>"},{"location":"about/releasenotes.html#hermes-support-for-react-native-applications","title":"Hermes Support for React Native Applications","text":"<p>Through the use of Javascript obfuscation, DexGuard has long-standing support for React Native applications. React Native is moving to the Hermes runtime, which includes Hermes bytecode instead of Javascript in the final application. We now provide the ability to protect the Hermes bytecode.</p> <ul> <li>Protect the Hermes bytecode of your app, including the CodePush updates.</li> <li>If the React Native version for your application is at least 0.68, DexGuard will protect the Hermes bytecode by default. Otherwise, use the existing <code>-encryptassetfiles</code> option.</li> <li>Read more about how to configure your Hermes app on the Hermes manual page.</li> </ul>"},{"location":"about/releasenotes.html#miscellaneous_1","title":"Miscellaneous","text":"<ul> <li>This release adds full support for baseline profiles. No configuration options are necessary.</li> <li>Rename <code>TamperDetector</code> to <code>ApkTamperDetector</code> in the runtime library. (<code>T6415</code>)</li> <li>DexGuard now automatically removes <code>throw</code>/<code>check</code> calls from Kotlin Intrinsics.</li> </ul> <p>Update considerations</p>"},{"location":"about/releasenotes.html#important-rasp-changes","title":"Important RASP Changes","text":"<p>Starting from DexGuard 9.4.0, some changes have been made to the way the DexGuard runtime and checks are injected. These changes only affect unprotected apps or protected apps with the <code>-dontobfuscate</code> rule in the configuration. This is done to prevent accidental uploads of unprotected applications that could leak information about our RASP checks.</p> <p>Changes related to <code>-dontobfuscate</code></p> <p>Injection of the DexGuard runtime library and RASP checks is disabled if <code>-dontobfuscate</code> is set. This concretely means that <code>-dontobfuscate</code> will cancel the <code>-raspchecks</code> rule. For example, it is not possible anymore to test RASP behavior with a debug configuration.</p> <p>Changes related to the dexguard-runtime.aar artifact</p> <p>The dexguard-runtime.aar artifact becomes a shell that will always return the ok values until the app is processed by DexGuard. This also falls under the changes related to <code>-dontobfuscate</code> as the shell library won't be replaced if the rule is set. Your unprotected app can still run but it won't detect any threats. You can find more information about this in the Runtime page.</p>"},{"location":"about/releasenotes.html#removed-version-option-in-dexguard-gradle-plugin","title":"Removed version option in DexGuard Gradle plugin","text":"<p>DexGuard Gradle plugin 9.4.0 can only be used with a matching DexGuard version. The <code>version</code> option has been removed. You will need to update your <code>build.gradle</code> files when upgrading DexGuard.</p> <p>When no <code>path</code> option is specified, the DexGuard Gradle plugin will automatically download the latest DexGuard version. This requires that access to Guardsquare's secure maven repository is configured.</p>"},{"location":"about/releasenotes.html#deprecated-apktamper-rasp-detector","title":"Deprecated <code>apktamper</code> RASP detector","text":"<p>DexGuard 9.4.0 deprecates the <code>apktamper</code> detector type of RASP injection. A new detector type has been added, <code>apptamper</code>, which should be used instead. <code>apptamper</code> checks are both applicable to APKs and app bundles. However, if you build an APK that is re-signed after DexGuard processing, you should also add <code>-disableapktamper</code> to your configuration in order to skip part of the checks that are sensitive to re-signing. Furthermore, in a RASP callback, <code>DetectionReport#isApkFileTampered</code> should be replaced by <code>DetectionReport#isAppTampered</code>.</p>"},{"location":"about/releasenotes.html#determinism","title":"Determinism","text":"<p>The artifacts generated by DexGuard are no longer fully deterministically reproducible between builds. More specifically, the dex and resource files are still deterministic but the native libraries are not.</p>"},{"location":"about/releasenotes.html#windows-support","title":"Windows Support","text":"<p>The latest protection mechanisms, like strengthened string encryption, require DexGuard to run in a Unix environment. This means that for Windows, we now recommend running DexGuard inside of WSL. More information on how to do this is available on our Windows manual page.</p>"},{"location":"about/releasenotes.html#kotlin","title":"Kotlin","text":"<p>DexGuard 9.4.0 deprecates the <code>-keepkotlinmetadata</code> option and removes the <code>-adaptkotlinmetadata</code> options. Use <code>-keep class kotlin.Metadata</code> instead. Some consumer rules, from libraries such as <code>kotlin-reflect</code>, already contain this rule.</p>"},{"location":"about/releasenotes.html#version-9326-23-12-2022","title":"Version 9.3.26 (23-12-2022)","text":""},{"location":"about/releasenotes.html#improved_44","title":"Improved","text":"<ul> <li>Improve root detection capabilities. (<code>T18808</code>, <code>T18571</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_58","title":"Bugfixes","text":"<ul> <li>Prevent potential build-time <code>NullPointerException</code> when processing incomplete Kotlin metadata. (<code>T18647</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9325-14-12-2022","title":"Version 9.3.25 (14-12-2022)","text":""},{"location":"about/releasenotes.html#improved_45","title":"Improved","text":"<ul> <li>Improve root detection capabilities. (<code>T18664</code>)</li> <li>Ensure that concatenated strings in library projects can be encrypted when using Java 9+. (<code>T17943</code>)</li> <li>Generate consumer rules inside an AAR even when <code>-printlibraryconfiguration</code> is specified. (<code>T16996</code>)</li> <li>Add seatbelt for <code>Duplicate jar entry</code> error when RASP classes are present in the input. (<code>T15590</code>)</li> <li>Allow enabling ThreatCast in the NDK Add-on without enabling RASP in DexGuard. (<code>T18383</code>)</li> <li>Previously, conservative optimization could be set by setting the <code>optimize.conservatively</code> system property. This has been replaced with the <code>-optimizeaggressively</code> option, which sets optimization to aggressive. (<code>T2207</code>)</li> </ul>"},{"location":"about/releasenotes.html#added_23","title":"Added","text":"<ul> <li>Add the retrace artifact to the secure Maven repository. (<code>T16767</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_59","title":"Bugfixes","text":"<ul> <li>Fix potential <code>expected Precise Reference</code> runtime verifier error. (<code>T17142</code>)</li> <li>Fix <code>dexguard-hilt.pro</code> not being recognized as a default configuration when specified in the <code>dexguard</code> block in <code>build.gradle</code>.</li> <li>Prevent the Debug Blocker from causing ANR's or blocking other threads in some edge-cases. (<code>T18489</code>)</li> <li>Prevent potential <code>NullPointerException</code> when processing Kotlin multi-file facade classes. (<code>T3884</code>)</li> </ul> <p> Upgrade considerations for version 9.3.25:</p> <ul> <li>The addition of <code>-optimizeaggressively</code> implies that conservative optimization is now the default. Use <code>-optimizeaggressively</code> to explicitly set aggressive optimization.</li> </ul>"},{"location":"about/releasenotes.html#version-9324-18-11-2022","title":"Version 9.3.24 (18-11-2022)","text":""},{"location":"about/releasenotes.html#improved_46","title":"Improved","text":"<ul> <li>Don't report unnecessary warnings for missing Kotlin <code>$DefaultImpls</code> classes.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_60","title":"Bugfixes","text":"<ul> <li>Fix <code>-keepparameternames</code> to keep Kotlin function, constructor and property setter parameter names. (<code>T7303</code>)</li> <li>Fix <code>-keepparameternames</code> to keep Kotlin annotation constructor parameter names. (<code>T14916</code>)</li> <li>Fix potential <code>NullPointerException</code> while processing enum classes with invalid Kotlin metadata. (<code>T18432</code>)</li> <li>Fix potential <code>Instruction has invalid constant index size</code> error during Gson optimization. (<code>T14616</code>)</li> <li>Fix potential <code>Unsupported field number [6] in Plural message</code> error when processing app bundles. (<code>T18278</code>)</li> <li>Fix removal of unused decryption methods when using <code>-assumenosideeffects</code> to remove logging code. (<code>T16622</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9323-09-11-2022","title":"Version 9.3.23 (09-11-2022)","text":""},{"location":"about/releasenotes.html#improved_47","title":"Improved","text":"<ul> <li>Update RASP sample to correctly include the dependency on <code>dexguard-rasp.jar</code>.</li> <li>Move default keep rules for Hilt that can be overly broad to an optional configuration <code>dexguard-hilt.pro</code>. (<code>T17985</code>)</li> <li>Add checks for additional emulators. (<code>T18305</code>)</li> <li>Generate consumer rules when processing a library even when no <code>-keep, asapi</code> rule is present. (<code>T17324</code>)</li> <li>Update React Native sample to version 0.69.4. (<code>T16551</code>)</li> <li>Generated consumer rules will no longer contain rules for standard library classes, resulting in unnecessary warnings. (<code>T16994</code>)</li> <li>Improve root detection capabilities. (<code>T18343</code>)</li> </ul>"},{"location":"about/releasenotes.html#added_24","title":"Added","text":"<ul> <li>Support archived APKs that were introduced in AGP 7.3. (<code>T18090</code>)</li> <li>Support macro resources in app bundles. (<code>T18128</code>)</li> <li>Support Flutter 3.3.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_61","title":"Bugfixes","text":"<ul> <li>Fix potential <code>InvalidUserDataException</code> when executing Espresso tests on AGP 7.1 or higher. (<code>T17923</code>)</li> <li>Always send ThreatCast events when they contain a new App User ID. (<code>T18211</code>)</li> <li>Fix potential <code>IndexOutOfBoundsException</code> when stripping native library sections. (<code>T17035</code>)</li> <li>Fix <code>dexguard-threatcast-client-debug.aar</code> not producing any logs. (<code>T17109</code>)</li> <li>Keep nestmate attributes of a class. (<code>T17472</code>)</li> <li>Fix incomplete generation of consumer rules for highly obfuscated encrypted classes. (<code>T17322</code>)</li> <li>Prevent potential <code>ClassCastException</code> happening in RASP checks.</li> </ul>"},{"location":"about/releasenotes.html#version-9322-14-10-2022","title":"Version 9.3.22 (14-10-2022)","text":""},{"location":"about/releasenotes.html#improved_48","title":"Improved","text":"<ul> <li>Respect system properties in <code>gradle.properties</code> when uploading the DexGuard mapping file to Crashlytics. (<code>T16975</code>)</li> <li>Add additional emulator checks. (<code>T17838</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_62","title":"Bugfixes","text":"<ul> <li>Fix potential name clashes between application classes and encrypted SDK classes. (<code>T13929</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9321-29-09-2022","title":"Version 9.3.21 (29-09-2022)","text":""},{"location":"about/releasenotes.html#bugfixes_63","title":"Bugfixes","text":"<ul> <li>Avoid potential false positive in the debug blocker when running in the context of an instant app. (<code>T17271</code>)</li> <li>Prevent native crash in the certificate checker and tamper detector when app bundles with many splits are used (<code>T17933</code>).</li> <li>Ensure the correct placement of DexGuard native runtime libraries in Fat AARs. (<code>T17904</code>)</li> <li>Update <code>commons-compress</code>, <code>bcprov-jdk15on</code> and <code>gson</code> dependencies to mittigate CVE's. (<code>T15028</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_49","title":"Improved","text":"<ul> <li>Mark DexGuard Gradle plugin tasks as incompatible with configuration cache to prevent build failures (requires Gradle 7.4+).</li> <li>Remove Butterknife rules from the default configuration (see upgrade considerations). (<code>T17863</code>)</li> </ul> <p> Upgrade considerations for version 9.3.21:</p> <p>Butterknife rules were removed from the default configuration. If you still need these rules, you can re-add the following to your own configuration:</p> <pre><code>-dontwarn butterknife.internal.ButterKnifeProcessor\n-keep,allowobfuscation @interface butterknife.*\n\n-keep class **$$ViewInjector {\n    public static void inject(...);\n    public static void reset(...);\n}\n\n-keep class **$$ViewBinder {\n    public static void bind(...);\n    public static void unbind(...);\n}\n\n-keepclasseswithmembernames class * {\n    @butterknife.* &lt;fields&gt;;\n}\n\n-keepclasseswithmembernames class * {\n    @butterknife.* &lt;methods&gt;;\n}\n\n-keepclasseswithmembers class * {\n    @butterknife.On* &lt;methods&gt;;\n}\n\n-if   class **$$ViewBinder\n-keep class &lt;1&gt;\n\n-keep class **_ViewBinding {\n    &lt;init&gt;(&lt;1&gt;, android.view.View);\n}\n\n-if   class **_ViewBinding\n-keep class &lt;1&gt;\n</code></pre>"},{"location":"about/releasenotes.html#version-9320-26-09-2022","title":"Version 9.3.20 (26-09-2022)","text":""},{"location":"about/releasenotes.html#improved_50","title":"Improved","text":"<ul> <li>Improve performance of printing large ThreatCast mapping files. (<code>T17870</code>)</li> <li>Respect additional HTTP and HTTPS system properties when uploading the DexGuard mapping file to Crashlytics. (<code>T17907</code>)</li> <li>Ensure Android Studio plugin compatibility up to the latest Android Studio release (Electric Eel).</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_64","title":"Bugfixes","text":"<ul> <li>Prevent potential <code>VerifyError</code> when encrypting strings in interfaces. (<code>T17323</code>)</li> <li>Fix potential issue in the debug blocker that could lead to high battery usage. (<code>T17417</code>)</li> <li>Prevent <code>UnsatisfiedLinkError</code> in apps using RASP running on Android 4.4. (<code>T17078</code>)</li> <li>Avoid potential false positive in the hook detector when native libs are loaded from the APK. (<code>T17328</code>)</li> <li>Prevent potential \"Can't write resource\" build error when processing bundles containing empty native libraries. (<code>T17825</code>)</li> <li>Allow stacktrace deobfuscation in Crashlytics logs when using Crashlytics Gradle Plugin 2.9.0+. (<code>T16624</code>)</li> <li>Prevent incorrect renaming of the simple name for kotlin classes with names starting with <code>$</code>. (<code>T17900</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9319-12-09-2022","title":"Version 9.3.19 (12-09-2022)","text":""},{"location":"about/releasenotes.html#bugfixes_65","title":"Bugfixes","text":"<ul> <li>Prevent potential \"Library class doesn't store attributes\" exception when processing Kotlin library classes. (<code>T17727</code>)</li> <li>Disable <code>class/unboxing/enum</code> optimization by default to prevent potential \"Value \"i\" is not a reference value\" exception. (<code>T17763</code>)</li> <li>Prevent potential build time <code>NullPointerException</code> when processing Kotlin interface methods. (<code>T17803</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9318-02-09-2022","title":"Version 9.3.18 (02-09-2022)","text":""},{"location":"about/releasenotes.html#added_25","title":"Added","text":"<ul> <li>The DexGuard Gradle plugin now prints out the full configuration by default to \"build/outputs/dexguard/debugging\". (<code>T17311</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_66","title":"Bugfixes","text":"<ul> <li>Fix optimization of simple enums (optimization <code>class/unboxing/enum</code>). (<code>T17637</code>)</li> <li>Fix potential error in the native loader when using <code>dlopen</code> and <code>dlclose</code> repeatedly. (<code>T17428</code>)</li> <li>Fix critical issue with Flutter 3.0 support.</li> </ul>"},{"location":"about/releasenotes.html#version-9317-25-08-2022","title":"Version 9.3.17 (25-08-2022)","text":""},{"location":"about/releasenotes.html#improved_51","title":"Improved","text":"<ul> <li>Improve root detection capabilities. (<code>T17202</code>, <code>T17244</code>)</li> <li>Prevent potential <code>ExceptionInInitializerError</code> in androidx view classes. (<code>T7292</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9316-19-08-2022","title":"Version 9.3.16 (19-08-2022)","text":""},{"location":"about/releasenotes.html#added_26","title":"Added","text":"<ul> <li>Add support for Flutter 3.0.</li> </ul>"},{"location":"about/releasenotes.html#version-9315-12-08-2022","title":"Version 9.3.15 (12-08-2022)","text":""},{"location":"about/releasenotes.html#improved_52","title":"Improved","text":"<ul> <li>Add -excludedresourcefilenames option to prevent specified names from being used for resource file name obfuscation. (<code>T17033</code>)</li> <li>Increase stealthiness of emulator and root checks. (<code>T16301</code>)</li> <li>Implement partial support for <code>dlsym</code> on system libraries symbols with <code>RTLD_DEFAULT</code>/<code>RTLD_NEXT</code> flags when using the native loader. (<code>T17266</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_67","title":"Bugfixes","text":"<ul> <li>Prevent false positive background crashes related to debug RASP checks on Android 12+. (<code>T16970</code>)</li> <li>Fix potential issue where DexGuard changes generic types unexpectedly. (<code>T17236</code>)</li> <li>Fix potential runtime crashes when protecting Flutter applications. (<code>T16835</code>, <code>T16973</code>, <code>T16749</code>, <code>T16591</code>)</li> <li>Fix fatal error when protecting Flutter applications when using operators in Dart containing a slash (/) character. (<code>T16749</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9314-03-08-2022","title":"Version 9.3.14 (03-08-2022)","text":""},{"location":"about/releasenotes.html#improved_53","title":"Improved","text":"<ul> <li>Improve app startup times when using <code>-addconfigurationdebugging</code>. (<code>T17153</code>)</li> <li>Improve error message when trying to process a React Native app using Hermes. (<code>T17046</code>)</li> <li>Reduce application size when injecting <code>filetamper</code> checks with a <code>raspfiletamperlist</code>. (<code>T17180</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_68","title":"Bugfixes","text":"<ul> <li>Prevent merging classes with native methods that would result in UnsatisfiedLinkError. (<code>T14701</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9313-27-07-2022","title":"Version 9.3.13 (27-07-2022)","text":""},{"location":"about/releasenotes.html#improved_54","title":"Improved","text":"<ul> <li>Further harden string decryption against automated static analysis. (<code>T16826</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_69","title":"Bugfixes","text":"<ul> <li>Fix potential native crash in the hook detector on devices with Spreadtrum/Unisoc chipsets. (<code>T17029</code>)</li> <li>Allow encrypting backported lambda classes. (<code>T16903</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9312-12-07-2022","title":"Version 9.3.12 (12-07-2022)","text":""},{"location":"about/releasenotes.html#improved_55","title":"Improved","text":"<ul> <li>Improve support for Kotlin library projects. (<code>T3752</code>)</li> </ul>"},{"location":"about/releasenotes.html#added_27","title":"Added","text":"<ul> <li>Detect and use input compression methods when writing the processed artifact. (<code>T3677</code>)</li> <li>Automatically upload the ThreatCast mapping file to your ThreatCast account. (<code>T7231</code>)</li> <li>Take ABI filters into account when building a Fat AAR. (<code>T15817</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_70","title":"Bugfixes","text":"<ul> <li>Fix potential JavaScript \"Invalid or unexpected token\" syntax error when using JavaScript control flow obfuscation. (<code>T16845</code>)</li> <li>Prevent potential non-deterministic results when processing JavaScript files. (<code>T16843</code>)</li> <li>Prevent potential memory leak in native Root detector code.</li> </ul>"},{"location":"about/releasenotes.html#version-9311-30-06-2022","title":"Version 9.3.11 (30-06-2022)","text":""},{"location":"about/releasenotes.html#added_28","title":"Added","text":"<ul> <li>Add additional checks for Virtual Environment applications. (<code>T16819</code>)</li> <li>Add support for Kotlin 1.7. (<code>T14074</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_71","title":"Bugfixes","text":"<ul> <li>Prevent the Root Detector from causing ANR's or blocking other threads in some edge-cases. (<code>T16351</code>)</li> <li>Fix potential JavaScript <code>Duplicate __proto__ fields are not allowed in object literals</code> error when using JavaScript control flow obfuscation. (<code>T16846</code>)</li> <li>Prevent <code>IllegalStateException</code> occurring in some cases when enabling <code>apptamper</code> RASP check.</li> <li>Prevent potential <code>Unexpected simple entry</code> error when processing app bundles. (<code>T16475</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9310-17-06-2022","title":"Version 9.3.10 (17-06-2022)","text":"<p>Warning</p> <p>DexGuard now prevents you from placing your DexGuard distribution within your Gradle project by default. For more information, please consult the following page.</p>"},{"location":"about/releasenotes.html#added_29","title":"Added","text":"<ul> <li>Add a verification step to the Gradle plugin to prevent the DexGuard distribution from being inside your Gradle project tree. (<code>T16272</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_72","title":"Bugfixes","text":"<ul> <li>Prevent false positive with <code>apptamper</code> RASP checks when both <code>-dontoptimize</code> and <code>-dontobfuscate</code> are set. (<code>T16187</code>)</li> <li>Fix potential unsatisfied link error when using the Virtual Environment detector.</li> <li>Prevent warning \"can't find referenced method 'java.lang.Object clone()'\" being printed for several Cordova-related classes when DexGuard processes a non-Cordova app using the DexGuard runtime library. (<code>T3996</code>)</li> <li>Fix incorrect string interpolation in collapsed features toggle link in the protection report. (<code>T14894</code>)</li> <li>Prevent potential false positive in <code>apptamper</code> RASP checks. (<code>T16764</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-939-10-06-2022","title":"Version 9.3.9 (10-06-2022)","text":""},{"location":"about/releasenotes.html#bugfixes_73","title":"Bugfixes","text":"<ul> <li>Prevent potential \"Unexpected multiple mappings in resource table\" error occurring when recovering the original name after AGP resource optimization. (<code>T16423</code>)</li> <li>Fix potential segmentation fault in the HookDetector. (<code>T16299</code>)</li> <li>Fix potential syntax error on Windows when using the Cordova plugin. (<code>T15760</code>)</li> <li>Fix potential Kotlin metadata initialization issue when using the <code>-Xno-optimized-callable-references</code> compiler option. (<code>T16486</code>)</li> <li>Fix potential <code>NoClassDefFoundError</code> when encrypting all runtime library classes. (<code>T16302</code>)</li> <li>Fix removal of unused encrypted strings when using <code>-assumenosideeffects</code>. (<code>T15704</code>)</li> <li>Prevent warning \"com.guardsquare.dexguard.runtime.encryption.EncryptedCordovaWebViewClient: can't find referenced method 'java.lang.Object clone()'\" being printed when DexGuard processes a non-Cordova app using the DexGuard runtime library. (<code>T3996</code>)</li> <li>Ensure that the signing config is updated when modified using <code>androidComponents onVariants</code>. (<code>T14987</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_56","title":"Improved","text":"<ul> <li>Prevent false negative of Virtual Environment detection on Android 7.0 to 8.1.1 devices. (<code>T15597</code>)</li> <li>Extend default configuration with keep rules to prevent a bundletool error when installing apk splits from an app bundle with dependencies between dynamic feature modules. (<code>T16473</code>)</li> <li>Remove Kotlin Intrinsics strings by default, without requiring the <code>-keepkotlinmetadata</code> option. (<code>T16518</code>)</li> <li>Ensure Android Studio plugin compatibility up to the latest Android Studio release (Chipmunk). (<code>T16339</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-938-19-05-2022","title":"Version 9.3.8 (19-05-2022)","text":""},{"location":"about/releasenotes.html#added_30","title":"Added","text":"<ul> <li>Add checks for additional emulators. (<code>T15815</code>)</li> <li>Prevent potential <code>NoClassDefFoundError</code> when injecting <code>debug</code> RASP checks. (<code>T16300</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_57","title":"Improved","text":"<ul> <li>Additionally harden the RASP certificate checks. (<code>T15823</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_74","title":"Bugfixes","text":"<ul> <li>Prevent potential \"Unexpected error while writing dex file using d8\" when encrypting classes in a library. (<code>T6210</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-937-04-05-2022","title":"Version 9.3.7 (04-05-2022)","text":"<p>Warning</p> <p>Debug blocker is enabled as a part of <code>debug</code> detector</p> <p>When the <code>debug</code> detector is enabled for an application, Dexguard now injects debug blocker by default. If your application uses an SDK that contains a debug detection feature, the debug blocker may be detected as a debugger by that SDK. In case this causes issues, the injection of the debug blocker can be disabled using the<code>-dontinjectdebugblocker</code> option. For more information, please consult the following page.</p>"},{"location":"about/releasenotes.html#improved_58","title":"Improved","text":"<ul> <li>Improve speed of the Hook Detector. (<code>T15824</code>)</li> <li>Automatically inject calls to the debug blocker in applications when enabling <code>-raspchecks debug</code>. (<code>T5090</code>)</li> <li>Limit notes that are printed when including <code>dexguard-unity.pro</code>. (<code>T15743</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_75","title":"Bugfixes","text":"<ul> <li>Remove consumer rules from the DexGuard runtime library which could cause JNI bridges to be kept unnecessarily. (<code>T15612</code>)</li> <li>Prevent potential false negatives in the Hook Detector.</li> </ul>"},{"location":"about/releasenotes.html#version-936-12-04-2022","title":"Version 9.3.6 (12-04-2022)","text":"<p>Warning</p> <p>Deprecated <code>apktamper</code> RASP detector</p> <p>DexGuard 9.3.6 deprecates the <code>apktamper</code> detector type of RASP injection. A new detector type has been added, <code>apptamper</code>, which should be used instead.</p>"},{"location":"about/releasenotes.html#added_31","title":"Added","text":"<ul> <li>Add checks to detect new emulators.</li> <li>Add new tamper detection techniques for common repackaging tools that work for both APKs and app bundles. (<code>15099</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_59","title":"Improved","text":"<ul> <li>The <code>dexguard-flutter.pro</code> default configuration is now applied automatically when processing a flutter application. (<code>T14559</code>)</li> <li>Hardened the certificate tampering RASP check. (<code>T15245</code>)</li> <li>Add support for passing HTTPS proxy system properties to the DexGuard execution. (<code>T7361</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_76","title":"Bugfixes","text":"<ul> <li>Ensure that files in targeted directories which do not have an untargeted variant end up in the correct asset slice. (<code>T15301</code>)</li> <li>Improve emulator detection. (<code>T14922</code>)</li> <li>Fix rule configurations that extend annotation classes. (<code>T15024</code>)</li> <li>Fix missing ThreatCast events due to unsupported app locales. (<code>T14933</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-935-25-03-2022","title":"Version 9.3.5 (25-03-2022)","text":""},{"location":"about/releasenotes.html#improved_60","title":"Improved","text":"<ul> <li>Update default configuration for the integration of Google Tag Manager and Firebase Analytics. (<code>T14635</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_77","title":"Bugfixes","text":"<ul> <li>Fix potential \"Unexpected error while computing stack size\" error when applying <code>accessthroughreflection</code>. (<code>T15095</code>)</li> <li>Fix missing element issue during resource file merging for Fat AARs. (<code>T15214</code>)</li> <li>Avoid introducing a code pattern for string decryption which could lead to dex2oat producing invalid ahead-of-time   compiled code on devices running Android versions up to 7.1.1. (<code>T14585</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-934-17-03-2022","title":"Version 9.3.4 (17-03-2022)","text":""},{"location":"about/releasenotes.html#improved_61","title":"Improved","text":"<ul> <li>Corrected LibTomMath version in About section of the manual.</li> <li>Remove <code>throwUninitializedProperty</code> parameter strings when using <code>-keepkotlinmetadata</code>. (<code>T4696</code>)</li> <li>Improved root detection capabilities (<code>T14778</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_78","title":"Bugfixes","text":"<ul> <li>Fix handling of non-existent targeted base directories in bundles leading to InvalidBundleExceptions. (<code>T15089</code>)</li> <li>Fix <code>UnsatisfiedLinkError</code> when using <code>-accessthroughreflection</code> for <code>System.loadLibrary()</code>. (<code>T5955</code>)</li> <li>Fix non-fatal <code>NullPointerException</code> at build time when encrypting RASP classes with shrinking disabled. (<code>T14990</code>)</li> <li>Fix potential native crash when using the hook detector on Huawei EMUI 10 devices. (<code>T13971</code>)</li> <li>Fix an issue in obfuscated AAR where the Dexguard generated consumer rules did not contain keep rules to preserve classes used by an encrypted class. (<code>T13611</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-933-23-02-2022","title":"Version 9.3.3 (23-02-2022)","text":""},{"location":"about/releasenotes.html#added_32","title":"Added","text":"<ul> <li>Add check to ensure that the ThreatCast library has the same version as DexGuard. (<code>T7086</code>)</li> <li>Add option to specify multiple valid certificate hashes for RASP certificate checking. (<code>T13642</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_62","title":"Improved","text":"<ul> <li>Improve Unity default configuration.</li> <li>Ensure BitGuard-injected RASP callbacks trigger for Unity applications. (<code>T14641</code>)</li> <li>Remove gradle warnings when project is built from within the DexGuard folder. (<code>T14118</code>)</li> <li>Include original source file name in mapping file. (<code>T7342</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_79","title":"Bugfixes","text":"<ul> <li>Prevent possible <code>LinkageError</code> when repackaging classes with shadowed methods to the same package. (<code>T14726</code>)</li> <li>Prevent possible <code>ZipException</code> when compressing encrypted native libraries. (<code>T14725</code>)</li> <li>Fix crash due to accessing restricted device identifier APIs without proper permissions in emulator RASP checks. (<code>T14365</code>)</li> <li>Fix crash due to accessing restricted telephony APIs without proper permission in emulator RASP checks. (<code>T14290</code>)</li> <li>Fix false negatives in emulator check on Android Studio emulator API 32 and Tiramisu. (<code>T14677</code>)</li> <li>Fix XML parsing error during resource file merging for Fat AARs. (<code>T14724</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-932-15-02-2022","title":"Version 9.3.2 (15-02-2022)","text":""},{"location":"about/releasenotes.html#added_33","title":"Added","text":"<ul> <li>Add option to compress native libraries before encryption. (<code>T14000</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_63","title":"Improved","text":"<ul> <li>Improved hook detection when <code>extractNativeLibs</code> is set to false. (<code>T7362</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_80","title":"Bugfixes","text":"<ul> <li>Fix generation of protection report for Fat AAR projects. (<code>T14394</code>)</li> <li>Ensure that constant strings in unused fields are encrypted when specified with <code>-encryptstrings</code>. (<code>T4388</code>)</li> <li>Prevent the generation of Windows reserved names. (<code>T3937</code>)</li> <li>Fix Fat AAR resource merging conflicts. (<code>T13697</code>)</li> <li>Prevent \"Expecting type and name\" parse error when using the <code>androidx.window</code> library. (<code>T13715</code>)</li> <li>Fix shrinking of annotations during Gson optimization.</li> </ul>"},{"location":"about/releasenotes.html#version-931-03-02-2022","title":"Version 9.3.1 (03-02-2022)","text":""},{"location":"about/releasenotes.html#bugfixes_81","title":"Bugfixes","text":"<ul> <li>Fix critical bug introduced in version 9.3.0.</li> <li>Fix exception thrown in DexGuard Gradle plugin due to different location of <code>aapt2</code> on Windows. (<code>T14209</code>)</li> <li>Fix incorrect warnings being shown in the protection report when running on Windows. (<code>T14392</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-930-28-01-2022","title":"Version 9.3.0 (28-01-2022)","text":"<p>Warning</p> <p>ThreatCast API Keys</p> <p>DexGuard 9.3 requires ThreatCast API v1 keys, v0 keys will no longer be accepted. A new key can be obtained from the ThreatCast dashboard.</p>"},{"location":"about/releasenotes.html#flutter-support","title":"Flutter Support","text":""},{"location":"about/releasenotes.html#metadata-and-string-encryption","title":"Metadata and String Encryption","text":"<p>Flutter apps are written in Dart. When compiling Flutter apps in release mode, the ahead-of-time compiler is used to generate a native app. This app contains a Dart snapshot that contains metadata which holds information about objects, functions, data (eg. strings), etc. This metadata is valuable because: (1) It contains all of the strings that are used in the app, (2) the metadata can still be used to identify function boundaries and decompile them more easily and (3) it contains the debug information for Dart stack traces.</p> <ul> <li>Add encryption for Dart metadata and the Dart string literals.</li> <li>Automatically inject metadata decryption requiring no code changes.</li> </ul>"},{"location":"about/releasenotes.html#control-flow-obfuscation","title":"Control-flow Obfuscation","text":"<p>Just like any other app, written in any language, Flutter apps written in Dart code contain application logic and algorithms that are sometimes themselves important intellectual property. In other cases reversing the logic is a step towards targeted tampering with the application code.</p> <ul> <li>Add control-flow obfuscation for the application\u2019s control flow that's written   in Dart.</li> </ul>"},{"location":"about/releasenotes.html#code-integrity","title":"Code Integrity","text":"<p>When compiling Flutter apps in release mode, the ahead-of-time compiler is used to generate a native app. This app contains a Dart snapshot that contains metadata which holds information about objects, functions, data (eg. strings), etc.</p> <ul> <li>Add code-integrity support for Dart function prologues.</li> </ul>"},{"location":"about/releasenotes.html#environment-integrity","title":"Environment Integrity","text":"<p>Runtime Application Self Protection (RASP) remains vital to protect applications from reverse engineering. This is regardless of the language that your app is written in. Therefore, with flutter support, DexGuard can inject environment checks in to  Dart code to optimally help protect your flutter app. By adding this on top of the existing Guardsquare RASP checks, DexGuard adds an additional layer of protection to thwart reverse engineers.</p> <ul> <li>Automatic injection of jailbreak and debugger detection logic in Dart code.</li> <li>Advanced selection of strategic code locations based on two policies:   user-defined checkpoint functions and global code saturation.</li> <li>Optional custom responses through user-defined callbacks written in Dart.</li> <li>Performance denylist capabilities to fine tune injection.</li> </ul>"},{"location":"about/releasenotes.html#native-library-encryption-in-apk-expansion-files","title":"Native Library Encryption in APK Expansion Files","text":"<p>Version 9.3 introduces support for APK Expansion Files (OBB's). DexGuard is now able to encrypt native libraries inside of OBB files. More information can be found in the relevant in-depth page of the manual.</p>"},{"location":"about/releasenotes.html#miscellaneous_2","title":"Miscellaneous","text":"<ul> <li>Update the configuration and the manual to use inclusive language. (<code>T7139</code>)</li> <li>Add Gradle task to create artefacts for Espresso testing with Android App Bundles. (<code>T3688</code>)</li> <li>Hide warnings for runtime detection classes that are not encrypted by default. (<code>T13934</code>)</li> <li>Extend Zygisk detection. (<code>T13997</code>)</li> <li>Fix potential runtime crash when using RASP checks in Android libraries containing ELF file(s) with corrupted section headers. (<code>T7356</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9212-24-01-2022","title":"Version 9.2.12 (24-01-2022)","text":""},{"location":"about/releasenotes.html#bugfixes_82","title":"Bugfixes","text":"<ul> <li>Fix potential deadlock during initialization of classes in the DexGuard runtime. (<code>T13998</code>)</li> <li>Fix <code>NullPointerException</code> when enabling resource file encryption on Android 6 and below. (<code>T14009</code>)</li> <li>Fix error when reading in app bundles with raw XML files in <code>res/raw</code> directories with a suffix (for example <code>res/raw-night-v8</code>). (<code>T14013</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9211-19-01-2022","title":"Version 9.2.11 (19-01-2022)","text":""},{"location":"about/releasenotes.html#added_34","title":"Added","text":"<ul> <li>Add support for Kotlin 1.6. (<code>T4777</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_64","title":"Improved","text":"<ul> <li>Add support for matching Kotlin inline class type parameters when using <code>includedescriptorclasses</code> keep rule modifier (requires <code>-keepkotlinmetadata</code>). (<code>T13653</code>)</li> <li>Improve build speed when using <code>-keepkotlinmetadata</code>. (<code>T5205</code>)</li> <li>Remove Realm <code>-keep</code> rules from the default configuration. Realm provides consumer rules so no additional configuration should be required. (<code>T13678</code>)</li> <li>Add a seatbelt for using file checks without a v1 signature. (<code>DGD-2052</code>)</li> <li>Add default configuration for keeping the <code>exported</code> attribute as required by applications targeting Android 12. (<code>T13838</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_83","title":"Bugfixes","text":"<ul> <li>Fix potential false positive in DebugDetector when running on OnePlus6T devices. (<code>T7360</code>)</li> <li>Fix corrupt app bundles due to incorrect writing of <code>null</code> values in the resource table. (<code>T13777</code>)</li> <li>Prevent <code>NullPointerException</code> in the <code>FileChecker</code> when no manifest file is present. (<code>DGD-2052</code>)</li> <li>Fix breaking re-assignment of static, non-final string fields when encrypted with <code>-encryptstrings</code>. (<code>T6118</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9210-05-01-2022","title":"Version 9.2.10 (05-01-2022)","text":""},{"location":"about/releasenotes.html#improved_65","title":"Improved","text":"<ul> <li>Upgrade log4j2 dependency to 2.17.1 in response to CVE-2021-44832.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_84","title":"Bugfixes","text":"<ul> <li>Do not show warnings for default configuration rules in the protection report. (<code>T7069</code>, <code>T7306</code>)</li> <li>Fix missing file issues when building a fat AAR. (<code>T7191</code>)</li> <li>Fix invalid app bundle format due to incorrect matching of directories resembling features appearing in a true feature's root directory. (<code>T6573</code>)</li> <li>Fix a root detector issue that could lead to freezing the application in some cases. (<code>T7178</code>)</li> <li>Update sample license validity.</li> </ul>"},{"location":"about/releasenotes.html#version-929-20-12-2021","title":"Version 9.2.9 (20-12-2021)","text":""},{"location":"about/releasenotes.html#improved_66","title":"Improved","text":"<ul> <li>Upgrade log4j2 dependency to 2.17 in response to CVE-2021-45105.</li> </ul>"},{"location":"about/releasenotes.html#version-928-16-12-2021","title":"Version 9.2.8 (16-12-2021)","text":""},{"location":"about/releasenotes.html#improved_67","title":"Improved","text":"<ul> <li>Upgrade log4j2 dependency to 2.16 in response to CVE-2021-45046.</li> <li>Add default configuration for Android manifest metadata elements in apps using the AndroidX Startup and WorkManager libraries. (<code>T7074</code>,<code>T7075</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_85","title":"Bugfixes","text":"<ul> <li>Prevent possible <code>RuntimeException: Z</code> exception during input reading. (<code>T6048</code>)</li> <li>Do not print warning for 'missing whitelist' when enabling RASP checks without a <code>-raspclassfilter</code>. (<code>T6843</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-927-14-12-2021","title":"Version 9.2.7 (14-12-2021)","text":""},{"location":"about/releasenotes.html#improved_68","title":"Improved","text":"<ul> <li>Upgrade log4j2 dependency in response to CVE-2021-44228. (<code>T7315</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_86","title":"Bugfixes","text":"<ul> <li>Enhance root detection to avoid false negatives in certain cases when CF-Auto-Root is used. (<code>T7175</code>)</li> <li>Prevent possible <code>LinkageError</code> when making package-private final methods that are shadowed protected. (<code>T7056</code>)</li> <li>Prevent possible buffer overflow during hook detection. (<code>T6888</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-926-07-12-2021","title":"Version 9.2.6 (07-12-2021)","text":""},{"location":"about/releasenotes.html#improved_69","title":"Improved","text":"<ul> <li>Ensure that inlining always respects the code obfuscation configuration. (<code>T4720</code>)</li> <li>Inject the automatic RASP checks more consistently at the start of the application (<code>T6877</code>)</li> <li>Further hardening of the runtime library. (<code>T3730</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_87","title":"Bugfixes","text":"<ul> <li>Ensure that the <code>overwriteUnprotected</code> option works for all tasks. (<code>T7022</code>)</li> <li>Fix a <code>NullPointerException</code> originating from isolated processes when enabling ThreatCast. (<code>T6865</code>)</li> <li>Prevent potential non-deterministic DEX files when encrypting assets and/or native libraries. (<code>T6867</code>)</li> <li>Enable configuration updates when performing resource file encryption. (<code>T7101</code>)</li> <li>Prevent wrong appearance of resources with empty attribute values. (<code>T7053</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-925-19-11-2021","title":"Version 9.2.5 (19-11-2021)","text":""},{"location":"about/releasenotes.html#improved_70","title":"Improved","text":"<ul> <li>Add default configuration for Android manifest metadata elements in apps using the Google Play Billing library and Android TV apps using content providers. (<code>T6638</code>, <code>T6516</code>)</li> <li>Implement additional detection methods for Magisk's Zygisk feature.</li> <li>Improve automatically generated configuration by the DexGuard Gradle plugin. (<code>T6778</code>)</li> <li>Add a seatbelt to detect invalid ThreatCast API keys. (<code>T6912</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_88","title":"Bugfixes","text":"<ul> <li>Prevent references to non-existent methods from being injected during JavaScript processing. (<code>T7012</code>)</li> <li>Prevent possible <code>StringIndexOutOfBoundsException</code> when signing the application. (<code>T7004</code>)</li> <li>Prevent possible <code>StackOverflowError</code> in <code>hashCode</code> method when using RASP injection. (<code>T6826</code>)</li> <li>Prevent possible <code>OutOfMemoryError</code> when parsing <code>BundleConfig.pb</code> during input reading. (<code>T7019</code>)</li> <li>Prevent possible <code>UnsatisfiedLinkError</code> when using RASP injection combined with a generic <code>-keepresourcefiles</code> rule. (<code>T6208</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-924-05-11-2021","title":"Version 9.2.4 (05-11-2021)","text":""},{"location":"about/releasenotes.html#improved_71","title":"Improved","text":"<ul> <li>Improve obfuscation of the runtime-library by allowing <code>-encryptclasses</code> to cover sensible injected classes. (<code>T6617</code>)</li> <li>Add new ways to detect emulator x86 image. (<code>T6589</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_89","title":"Bugfixes","text":"<ul> <li>Fix Javascript syntax error after processing in for loops containing a binary in-operator. (<code>T6875</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-923-25-10-2021","title":"Version 9.2.3 (25-10-2021)","text":""},{"location":"about/releasenotes.html#bugfixes_90","title":"Bugfixes","text":"<ul> <li>Fix potential false negatives caused by a SIGBUS error in the RootDetector. (<code>T6824</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-922-22-10-2021","title":"Version 9.2.2 (22-10-2021)","text":""},{"location":"about/releasenotes.html#added_35","title":"Added","text":"<ul> <li>Additional checks to detect BlueStacks 5 emulators. (<code>T5521</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_91","title":"Bugfixes","text":"<ul> <li>Prevent possible <code>SecurityException</code> in Android 11 devices due to enabling ThreatCast. (<code>T6667</code>)</li> <li>Fix <code>UnsatisfiedLinkError</code> when generating the protection report on Windows. (<code>T6683</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-921-13-10-2021","title":"Version 9.2.1 (13-10-2021)","text":""},{"location":"about/releasenotes.html#added_36","title":"Added","text":"<ul> <li>Add support for encrypting styled resource strings. (<code>T6618</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_92","title":"Bugfixes","text":"<ul> <li>Prevent possible R8 compilation error when using enum default values in an interface definition. (<code>T6097</code>)</li> <li>Fix negative rules failing to exclude optimized resource names. (<code>T5984</code>)</li> <li>Fix potential fatal error during memory allocation on M1-based Macs when generating the protection report. (<code>T6084</code>)</li> <li>Fix potential breaking of 'Hide KPI details' link after clicking on feature impact breakdown in the protection report. (<code>T327</code>)</li> <li>Prevent the introduction of illegal method names during resource file encryption. (<code>T4478</code>)</li> <li>Prevent app from potentially crashing before detected threats are reported to ThreatCast when automatic crashing is on. (<code>T6133</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-920-01-10-2021","title":"Version 9.2.0 (01-10-2021)","text":""},{"location":"about/releasenotes.html#codepush-support","title":"CodePush Support","text":"<p>We already had support for React Native and Cordova applications, we're adding compatibility with the CodePush service for those apps. CodePush is an App Center cloud service that enables Apache Cordova and React Native developers to deploy mobile app updates directly to their users\u2019 devices. Using DexGuard, it is now possible to secure a CodePush update separately from your app. Read more about the new workflow on our in-depth page.</p> <ul> <li>Supporting both platforms: iOS &amp; Android.</li> <li>Zero changes required for existing users of our Javascript obfuscation.</li> <li>Gradle support for processing CodePush update packages.</li> </ul>"},{"location":"about/releasenotes.html#automatic-rasp-improvements","title":"Automatic RASP Improvements","text":"<p>Our automatic RASP facilities have made another step forward: we can now automatically apply RASP protection in libraries. This means that if you are a library developer, you are not required anymore to rely on manual RASP checks and can use DexGuard to insert all the RASP checks during processing time. We also improved the resilience of our checks, making them harder to identify and remove using static analysis.</p> <ul> <li>Enable the use of RASP injection in combination with libraries.</li> <li>Improve the spread of RASP checks in applications.</li> <li>Better hiding of the check within the surrounding code.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_93","title":"Bugfixes","text":"<ul> <li>Improve dex file processing to avoid <code>ArrayStoreException</code> when processing large <code>char</code> arrays. (<code>T6399</code>)</li> </ul> <p> Upgrade considerations for version 9.2.0:</p> <ul> <li>The armeabi and mips ABI's have been deprecated since August 2017. They are no longer supported for our RASP features.</li> </ul>"},{"location":"about/releasenotes.html#version-9115-22-09-2021","title":"Version 9.1.15 (22-09-2021)","text":""},{"location":"about/releasenotes.html#improved_72","title":"Improved","text":"<ul> <li>Update manual about the authentication mechanism for the secure Maven repository when using the Kotlin Gradle DSL. (<code>T6401</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_94","title":"Bugfixes","text":"<ul> <li>Fix potential unsupported field error when reading app bundles. (<code>T6306</code>)</li> <li>Fix variant resolution error in application projects including a Kotlin   multiplatform library project which includes another Kotlin multiplatform   library project as a dependency. (<code>T6388</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9114-15-09-2021","title":"Version 9.1.14 (15-09-2021)","text":""},{"location":"about/releasenotes.html#added_37","title":"Added","text":"<ul> <li>Improved support for the Android Studio plugin up to stable version 2020.3.1 and development version 2021.1.1. (<code>T5409</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_95","title":"Bugfixes","text":"<ul> <li>Fix variant resolution error in Kotlin multiplatform library projects when including another Kotlin multiplatform   library as a dependency. (<code>T6167</code>)</li> <li>Remove invalid syntax error raised on <code>*</code> symbol in the Android Studio plugin. (<code>T3976</code>)</li> <li>Prevent potential <code>IllegalStateException</code> due to retrieving configuration properties too early in the DexGuard Gradle Plugin. (<code>T6205</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9113-09-09-2021","title":"Version 9.1.13 (09-09-2021)","text":""},{"location":"about/releasenotes.html#bugfixes_96","title":"Bugfixes","text":"<ul> <li>Prevent <code>InvalidUserCodeException</code> during project evaluation of Dynamic Projects with Gradle 7.</li> <li>Prevent possible emulator detector false positives due to wrongly detected hooking attempts. (<code>T2637</code>)</li> <li>Prevent the printing of a <code>-multidex</code> deprecation warning in the build log when processing Espresso tests. (<code>T5766</code>)</li> <li>Avoid printing invalid <code>Asn1DecodingException</code> message when v4 signing is enabled (<code>T5637</code>)</li> <li>Prevent false positives in virtual environment detector. (<code>T5989</code>)</li> <li>Prevent false positive in hook detector when using Realm in a React Native app (<code>T6136</code>)</li> <li>Prevent app bundle build failures due to the introduction of non-existent language codes. (<code>T6223</code>)</li> <li>Prevent unencryptable resource strings that are referenced from XMLs inside <code>res/values</code> from being encrypted. (<code>T6200</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9112-19-08-2021","title":"Version 9.1.12 (19-08-2021)","text":""},{"location":"about/releasenotes.html#bugfixes_97","title":"Bugfixes","text":"<ul> <li>Add Crashlytics support for AGP 7.</li> <li>Fix potential runtime crashes due to invalid string decryption parameters. (<code>T6071</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-9111-16-08-2021","title":"Version 9.1.11 (16-08-2021)","text":""},{"location":"about/releasenotes.html#added_38","title":"Added","text":"<ul> <li>Add support for resource file encryption on Android 12. (<code>T5833</code>)</li> <li>The DexGuard Gradle Plugin now supports AGP 7. (<code>T5888</code>)</li> <li>Add RASP checks to detect Android 12 emulators. (<code>T6008</code>)</li> <li>Add support for detecting BlueStacks 4. (<code>T5521</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_73","title":"Improved","text":"<ul> <li>Remove restriction where APKs can't be signed with signature scheme v2 when min SDK version is set to 28 or   higher and max SDK version is set to 30 or higher. (<code>T5813</code>)</li> <li>Using the fat AAR support for local project dependencies will now match variants. This means that e.g. the debug build type of the library will embed the debug build type of the dependency.</li> <li>Update IOCipher dependency of the IOCipher sample to support running it on Android 12. (<code>T5898</code>)</li> <li>Add additional MagiskHide detection.</li> <li>Update <code>basic/AppBundle</code> sample to work with the latest version of <code>bundletool</code>. (<code>T5824</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_98","title":"Bugfixes","text":"<ul> <li>Fix incorrect <code>-raspclassfilter</code> configuration snippet in the RASP manual page. (<code>T5968</code>)</li> <li>Fix duplicate libraryjar when having the same <code>useLibrary</code> library in a dynamic feature and the main module. (<code>T5967</code>)</li> <li>Fix possible <code>Resources$NotFoundException</code> on encrypted resources inside the <code>res/xml</code> folder.</li> </ul>"},{"location":"about/releasenotes.html#version-9110-06-08-2021","title":"Version 9.1.10 (06-08-2021)","text":""},{"location":"about/releasenotes.html#improved_74","title":"Improved","text":"<ul> <li>Improve root detection checks to detect MagiskHide.</li> <li>Avoid potential false positive while checking for emulator when connected to ethernet via USB ethernet adapter. (<code>T5541</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_99","title":"Bugfixes","text":"<ul> <li>Fix potential <code>NullPointerException</code> during Kotlin metadata initialization when using <code>-keepkotlinmetadata</code>. (<code>T5899</code>)</li> <li>Fix input reading of APKs when passed as <code>-libraryjars</code> during Espresso testing. (<code>T5788</code>)</li> <li>Fix potential runtime ArrayIndexOutOfBoundsException in app bundle projects with multiple targetSdkVersions. (<code>T5535</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-919-30-07-2021","title":"Version 9.1.9 (30-07-2021)","text":""},{"location":"about/releasenotes.html#added_39","title":"Added","text":"<ul> <li>Add support for Kotlin 1.5. (<code>DGD-3467</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_75","title":"Improved","text":"<ul> <li>Improve reliability of the root detector w.r.t. various SELinux configurations. (<code>T5264</code>)</li> <li>Improve root detection checks to detect MagiskHide.</li> <li>Improved RASP manual about custom application protection. (<code>T5816</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_100","title":"Bugfixes","text":"<ul> <li>Fix threat detection potentially occurring before ThreatCast is initialized. (<code>T5769</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-918-23-07-2021","title":"Version 9.1.8 (23-07-2021)","text":""},{"location":"about/releasenotes.html#bugfixes_101","title":"Bugfixes","text":"<ul> <li>Fix initialization and obfuscation of Kotlin callable references when using Kotlin 1.4. (<code>T5631</code>)</li> <li>Fix potential hanging of DexGuard process during optimization or obfuscation.</li> <li>Avoid potential false positive in the VirtualEnvironmentDetector when running inside system apps. (<code>T4626</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-917-16-07-2021","title":"Version 9.1.7 (16-07-2021)","text":""},{"location":"about/releasenotes.html#improved_76","title":"Improved","text":"<ul> <li>Throw an error when a certificate tamper check injection is enabled for a library or app bundle without specifying a certificate hash. (<code>T4870</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_102","title":"Bugfixes","text":"<ul> <li>Fix build failure when using the Android Studio \"Generate Signed Bundle or APK\" window to generate protected bundles on AGP 4.2+. (<code>T5642</code>)</li> <li>Fix incorrect count of encrypted resource files in the protection report. (<code>T5663</code>)</li> <li>Disallow merging of nest hosts or members during class merging optimization. (<code>T4935</code>)</li> <li>Always enable v1 and v2 signing via the Gradle plugin, to prevent problems related to signing when using bundles or in combination with the FileChecker.</li> </ul>"},{"location":"about/releasenotes.html#version-916-09-07-2021","title":"Version 9.1.6 (09-07-2021)","text":""},{"location":"about/releasenotes.html#added_40","title":"Added","text":"<ul> <li>Add support for the resource optimizations introduced in AGP 4.2. (<code>T4229</code>)</li> <li>Add support for APK signature scheme v4. (<code>T4377</code>)</li> <li>Automatically pass the v3 and v4 signature scheme settings of the Android Gradle Plugin to DexGuard. (<code>T5104</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_77","title":"Improved","text":"<ul> <li>Make it possible to configure the used signature schemes on an individual basis. (<code>DGD-2784</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_103","title":"Bugfixes","text":"<ul> <li>Ensure correct processing of negative integer values in resource XML files with App Bundles, preventing possible runtime exceptions. (<code>DGD-3142</code>)</li> <li>Fix potential <code>InflateException</code> due to non-matching rules because of the resource optimizations introduced in AGP 4.2. (<code>T4859</code>)</li> <li>Fix a possible <code>NullPointerException</code> when processing large constant arrays. (<code>T5051</code>)</li> <li>Don't ignore native libraries without the <code>lib</code> prefix when applying the <code>-keepresourcefiles</code> rules. (<code>T5424</code>)</li> <li>Fail Gradle build when <code>IncompleteClassHierarchyException</code> is encountered, (<code>T5007</code>)</li> <li>Fix possible native crashes in Xamarin apps due to interference of signal handlers present in the DexGuard runtime library with other   signal handlers present in the application. (<code>T5461</code>)</li> <li>Fix variant resolution error in app bundle projects using <code>matchingFallbacks</code> in combination with dynamic features. (<code>T5518</code>)</li> </ul>"},{"location":"about/releasenotes.html#upgrade-considerations_3","title":"Upgrade considerations","text":""},{"location":"about/releasenotes.html#resource-keep-rules","title":"Resource keep rules","text":"<p>Version 9.1.6 introduces support for the resource optimizations that were introduced in AGP 4.2, which are only applicable to APKs. These optimizations change and shorten the names of resource files inside the APK in order to reduce application size.</p> <p>To keep your current rules targeting resource files applicable, DexGuard reconstructs the file names based on the information in the resource table. In rare cases, this reconstruction could be different from the names the resource folders would have in an application that was not optimized. You can look at the resource file name mapping to know how the optimized file names have been reconstructed. This is only applicable if you are targeting resources for specific configuration types, e.g. <code>res/color/*</code> or <code>res/color-vX/*</code>.</p>"},{"location":"about/releasenotes.html#signing","title":"Signing","text":"<p>The DexGuard Gradle plugin now takes the signing settings specified in the Android Gradle plugin configuration into consideration. The new default behaviour (v1, v2, v3 and v4 if applicable) is different from the original behavior (v1 and v2 enabled, v3 and v4 disabled). If you want to preserve the previous behavior you can enable v3 signing in AGP using <code>enableV3Signing true</code>.</p>"},{"location":"about/releasenotes.html#version-915-24-06-2021","title":"Version 9.1.5 (24-06-2021)","text":""},{"location":"about/releasenotes.html#bugfixes_104","title":"Bugfixes","text":"<ul> <li>Fix a possible <code>RuntimeException</code> during input reading. (<code>T5347</code>)</li> <li>Add <code>Internal</code> annotation to all DexGuardTask properties, as required by Gradle 7 (<code>T5322</code>)</li> <li>Prevent potential <code>IllegalArgumentException</code> during optimisation on single-threaded machines. (<code>T3796</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-914-18-06-2021","title":"Version 9.1.4 (18-06-2021)","text":""},{"location":"about/releasenotes.html#added_41","title":"Added","text":"<ul> <li>Add clearer error messages for incompatibility with resource optimizations introduced in AGP 4.2.</li> <li>Add new sample (<code>samples/basic/Flavors</code>) demonstrating DexGuard applied to a project using product flavors. (<code>T4556</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_78","title":"Improved","text":"<ul> <li>Split off Unity bindings from the DexGuard runtime library to avoid class collisions with these bindings. (<code>T3164</code>)</li> <li>Add support for passing HTTPS proxy system properties to the Crashlytics mapping file upload. (<code>T5253</code>)</li> <li>Separate the stripping of native library sections functionality of <code>-adaptresourcefilecontents</code> into a new <code>-stripnativelibrarysections</code> rule. (<code>DGD-2628</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_105","title":"Bugfixes","text":"<ul> <li>Reinstate compatibility with Gradle versions older than 5.6, preventing a <code>No main class specified</code> error. (<code>T4988</code>)</li> <li>Generate missing consumer keep rules for native libraries in library projects. (<code>DGD-3411</code>)</li> <li>Fix additional case of constant strings potentially becoming null during string encryption. (<code>DGD-3288</code>)</li> <li>Fix unexpected error while writing dex file using D8 when processing AARs with class encryption enabled and min-sdk 26+ (<code>T3774</code>)</li> <li>Fix potential run-time <code>StackOverflow</code> error when using wildcards in <code>-accessthroughreflection</code>. (<code>T2360</code>, <code>T4185</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-913-10-06-2021","title":"Version 9.1.3 (10-06-2021)","text":""},{"location":"about/releasenotes.html#improved_79","title":"Improved","text":"<ul> <li>Add a rule in the default configurations to prevent a potential <code>IllegalStateException</code> after a <code>LifecycleOwner</code> object has been garbage collected. (<code>T4202</code>)</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_106","title":"Bugfixes","text":"<ul> <li>Remove the dexguard-rasp version check due to possible variant resolution errors for projects containing dynamic features. (<code>T5171</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-912-09-06-2021","title":"Version 9.1.2 (09-06-2021)","text":""},{"location":"about/releasenotes.html#added_42","title":"Added","text":"<ul> <li>Add sample for WearOS applications. (<code>T4365</code>)</li> <li>Add warning to the protection report when no certificate hash is passed when certificate tampering RASP checks are enabled. (<code>T4400</code>)</li> <li>Add a version check that checks that the version of the included <code>dexguard-rasp.jar</code> in your build is the same as the version of DexGuard used. (<code>T4169</code>)</li> </ul>"},{"location":"about/releasenotes.html#improved_80","title":"Improved","text":"<ul> <li>Prevent 'raspclassfilter' rules from overriding previous declarations.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_107","title":"Bugfixes","text":"<ul> <li>Fix <code>FileNotFoundException</code> when processing test APK with the dexguard-debug configuration. (<code>T4722</code>)</li> <li>Fix <code>ClassCastException</code> when processing APKs with min-sdk 26+ containing <code>invoke-polymorphic</code> instructions. (<code>T3710</code>)</li> <li>Fix <code>RuntimeException</code> when using whitebox encryption inside large classes. (<code>T4568</code>)</li> <li>Fix potential output writing or runtime errors after incorrect backporting of interface method references. (<code>DGD-3164</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-911-31-05-2021","title":"Version 9.1.1 (31-05-2021)","text":""},{"location":"about/releasenotes.html#improved_81","title":"Improved","text":"<ul> <li>DexGuard can now automatically inject protection code needed to prevent DexGuard root detection isolated process from crashing.   This protection code is injected into all derived methods (including the constructor) of custom Application classes when <code>-raspchecks root</code> is enabled (<code>T4456</code>).</li> <li>Improved upgrading manual page with regard to removed version check plugin.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_108","title":"Bugfixes","text":"<ul> <li>Fix constant strings potentially becoming null during string encryption. (<code>DGD-3288</code>)</li> <li>Fix <code>InvalidUserCodeException</code> in Gradle 7.0 when calling <code>Project.afterEvaluate</code> after the project has already been evaluated. (<code>T4630</code>)</li> <li>Fix potentially incorrect class merging optimizations that could cause a run-time <code>NullPointerException</code>. (<code>DGD-3377</code>)</li> <li>Fix incorrect processing of obfuscated JS files in bundles. (<code>DGD-3430</code>)</li> <li>Fix conversion of primitive class constant instructions that could cause a run-time <code>ClassNotFoundException</code>. (<code>T4942</code>)</li> <li>Fix potential <code>UnsatisfiedLinkerError</code> caused by injecting native libraries for ABIs which aren't already present in the input. (<code>T4616</code>)</li> <li>Adapt obfuscated resources referenced in the R classes during fat AAR creation.</li> <li>Prevent duplicate R.txt zip entries during fat AAR creation. (<code>T4647</code>)</li> <li>Fix potential <code>NullPointerException</code> during shrinking after incorrect backporting of static interface methods. (<code>DGD-3509</code>)</li> <li>Fix potential output writing or runtime errors after incorrect backporting of interface method references. (<code>DGD-3164</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-910-21-05-2021","title":"Version 9.1.0 (21-05-2021)","text":""},{"location":"about/releasenotes.html#improved-protection-report","title":"Improved Protection Report","text":"<p>The protection report gives you insight into how well your app or SDK is protected by DexGuard and now provides you with even more detailed information.</p> <p>Compared to DexGuard 9.0, the report will now give you additional insights in the amount of entities that are matched by your rules. The report will now also warn about rules which seem out-of-place, such as when a rule matches no entities. To ensure that new warnings always stand out we now also provide the ability to suppress specific warnings when you are sure that they are not applicable to your case.</p>"},{"location":"about/releasenotes.html#improved-app-bundle-support","title":"Improved App Bundle Support","text":"<p>App bundles have been supported by DexGuard for a while, this release enhances that capability.</p> <p>This enhanced support includes enabling RASP certificate checking in conjunction with Google Play Signing. This way you can trust that nobody can tamper with your app, even when you don't upload the final apk to the Play Store. You only have to include the certificate hash from your Google Play console in your configuration using <code>-raspcertificatehash</code></p>"},{"location":"about/releasenotes.html#detailed-forensics-for-threatcast-users","title":"Detailed forensics for ThreatCast users","text":"<p>ThreatCast is a free to use product that allows real-time monitoring of protected applications. With a new DexGuard release comes new capabilities.</p> <p>You can now track which part of your application generated a particular threat event. This enables you to gain even more insight when the detection occurs. DexGuard will output a <code>threatcast_mapping.yml</code> file when ThreatCast is configured. This file should be uploaded to your ThreatCast portal.</p> <p>DexGuard can now also retrieve extra information at runtime which will be sent along with every threat that is detected. This information can be used to identify which users are trying to reverse engineer your app. You can configure DexGuard using its new option <code>-threatcastappuseridgetter</code>.</p>"},{"location":"about/releasenotes.html#minor-changes","title":"Minor Changes","text":""},{"location":"about/releasenotes.html#new_1","title":"New","text":"<ul> <li>DexGuard will now print a message when a new version is available.</li> </ul>"},{"location":"about/releasenotes.html#improved_82","title":"Improved","text":"<ul> <li>Add check to prevent multiple <code>-raspcallback</code> rules being specified (<code>T4643</code>)</li> <li>Make Gradle plugin compatibile with Crashlytics mapping file uploads when using Gradle 7.0 . (<code>T4846</code>)</li> <li>DexGuard can now automatically inject protection code needed to prevent DexGuard root detection isolated process from crashing. This protection code is injected into all derived methods of custom Application classes when <code>-raspchecks root</code> is enabled.</li> </ul>"},{"location":"about/releasenotes.html#bugfixes_109","title":"Bugfixes","text":"<ul> <li>Fix variant resolution problem when running the assemble task, or building through Android Studio, in a project with dynamic features. (<code>DGD-3337</code>)</li> <li>Fix variant resolution problem when running the test or check task in a project with dynamic features. (<code>DGD-3378</code>)</li> <li>Fix potential ConcurrentModificationException when executing multiple RASP checks in parallel. (<code>T4748</code>)</li> </ul>"},{"location":"about/releasenotes.html#version-90-august-2020","title":"Version 9.0 August 2020","text":"<p>DexGuard 9.0 integration in Android projects requires configuration changes that are detailed in the upgrading guide.</p>"},{"location":"about/releasenotes.html#new-gradle-plugin-with-agp-40-support","title":"New Gradle plugin with AGP 4.0 support","text":"<p>DexGuard 9.0 comes with a brand new companion Gradle plugin that is less sensitive to changes in the Android Gradle Plugin. The main difference is that DexGuard now  post-processes your application or library, rather than integrating itself into the build process. This means that the DexGuard input is now the unobfuscated application, app bundle or library produced by the standard Android build process.</p> <p>More details can be found here.</p>"},{"location":"about/releasenotes.html#protection-report","title":"Protection report","text":"<p>DexGuard now automatically produces a visual HTML report to help you improve the overall security of your DexGuard hardened builds. This Protection Report allows you to continuously assess and improve the protection of your application or library.</p> <p>More details can be found here.</p>"},{"location":"about/releasenotes.html#android-11-support","title":"Android 11 support","text":"<p>DexGuard 9.0 fully supports Android 11.</p>"},{"location":"about/releasenotes.html#auto-injection-of-rasp-libraries","title":"Auto-injection of RASP libraries","text":"<p>DexGuard can now inject some of the RASP dependencies that previously had to be added as project dependencies.</p> <p>More details on RASP configuration can be found here.</p> Version Issue Module Explanation 9.0.22 T4065 CORE Fix potential NPE while using native library encryption with classes that extend <code>android.app.Service</code> or <code>android.app.Activity</code>. 9.0.22 DGD-3224 CORE Update the Reflection sample to correctly showcase the access through reflection feature. 9.0.22 DGD-3238 CORE Add default -keep rules for compatibility with Android App Actions. 9.0.21 T4589 GRADLE Fix variant resolution error when an APK dependency is provided. 9.0.21 DGD-3520 CORE Add ability to escape quotes in keystore passwords with backslashes. 9.0.21 DGD-3075 CORE Add check to prevent wildcards being used in RASP callback and ThreatCast App User ID configurations. 9.0.21 DGD-3523 CORE Add a runtime API to determine if the current process corresponds to the DexGuard isolated process. 9.0.20 DGD-3421 CORE Fix missing parentheses in await expressions during JavaScript processing. 9.0.20 DGD-3470 CORE Add <code>-threatcastappuseridgetter</code> configuration option. 9.0.20 DGD-2856 GRADLE Fix Gradle plugin compatibility with Gradle 7.0. 9.0.20 DGD-3543 CORE Fix potentially incorrect transformation during conversion of dex files. 9.0.20 DGD-3397 CORE Deprecated the <code>-pack</code> option. See upgrade considerations. 9.0.20 DGD-2978 GRADLE Use the JVM set via <code>JAVA_HOME</code> when executing DexGuard through the Gradle plugin. 9.0.20 DGD-3323 RUNTIME Fix Frida library check to detect deleted entries of the library. 9.0.19 DGD-3517 CORE Fix NullPointerException which could potentially be raised while decrypting strings. 9.0.19 DGD-3338 CORE Generate the right <code>proguard.map</code> when using app bundles in conjunction with R8 for preserving runtime invisible annotations. 9.0.19 DGD-0013 CORE Improve error message when missing classes result in an incomplete class hierarchy. 9.0.19 DGD-3297 GRADLE Add support for apk splits in combination with the <code>overwriteUnprotected</code> option. 9.0.18 DGD-3397 CORE Fix NullPointerException which could potentially be raised while decrypting strings. 9.0.18 DGD-3429 CORE Additionally harden string encryption. 9.0.17 DGD-3274 RUNTIME Improve root detection checks to detect Magisk and MagiskHide versions 21.3 and higher. 9.0.17 DGD-3274 RUNTIME Provide asynchronous root detection interface. 9.0.17 DGD-3274 RUNTIME Deprecate synchronous <code>RootDetector.isDeviceRooted()</code> interface. 9.0.17 DGD-3276 CORE Adapt obfuscated classes referenced in the AndroidManifest.xml during fat AAR creation. 9.0.17 DGD-3399 CORE Fix Cordova plugin inserting incorrect relative paths to DexGuard. 9.0.16 DGD-3398 RUNTIME Fix potential crashes when calling multiple obfuscated versions of the hook detector in parallel. 9.0.15 DGD-3388 CORE Fix potentially encrypting too many string resources. 9.0.15 DGD-3139 CORE Prevent possible SecurityException when applying string encryption. 9.0.15 DGD-3262 GRADLE Prevent the addition of AGP 4.0 in the classpath when using the DexGuard Gradle Plugin. 9.0.14 DGD-3343 RUNTIME Fix a crash in DexGuard runtime checks when used on devices running Android API 25 or lower. 9.0.14 DGD-3344 GRADLE Automatically disable fat AAR generation in our gradle plugin, if another fat AAR plugin is already enabled. 9.0.14 DGD-3321 CORE Fixed encryption of constant field strings when <code>-encryptstrings</code> is specified with only the class name. 9.0.13 DGD-3313 CORE Fix missing parentheses in await subexpressions during JavaScript processing. 9.0.13 DGD-3333 CORE Fix potential <code>ClassCastException</code> while processing app bundles that contain kotlin modules. 9.0.13 DGD-3334 CORE Fix incorrect timestamps for Threatcast threats sent between 12 pm and 1 am UTC. 9.0.13 DGD-3137 RUNTIME Fixed potential ANR issue when calling DexGuard runtime checks. 9.0.13 DGD-3232 CORE Allow to encrypt string resources, but keep their name. 9.0.13 DGD-3036 CORE Fixed potential incorrect removal of exception handlers during optimization. 9.0.13 DGD-3317 CORE Fixed potential <code>NullPointerException</code> when processing Kotlin nested classes. 9.0.13 DGD-3070 GRADLE Allow the use of spaces in the path of build folders on Windows. 9.0.13 DGD-3009 CORE Fix potential <code>ArrayIndexOutOfBoundsException</code> at runtime when using -virtualizecode. 9.0.12 DGD-3002 CORE Fix potential <code>ClassCastException</code> while processing app bundles that contain Android Wear APKs. 9.0.12 DGD-3290 CORE Fix ArrayIndexOutOfBoundsException when <code>-pack</code> is used in combination with a pre-existing Application class. 9.0.12 DGD-3068 CORE Prevent verifier error on Android 4.4 when using encryption features. 9.0.12 DGD-3068 RUNTIME Prevent verifier errors on Android 4.4 in runtime checks. 9.0.11 DGD-2850 GRADLE Fix app bundle inputs not being found when using Android Gradle Plugin 3.5.x 9.0.11 DGD-2720 GRADLE Add support for variant-specific embeddings for fat AARs. 9.0.11 DGD-2834 CORE Add a version check for the runtime library. 9.0.11 DGD-2541 CORE Fix class name obfuscation with long names causing potential overflow of the string section in native libraries. 9.0.11 DGD-2512 CORE Print which configuration files were used to DexGuard's build log. 9.0.11 DGD-1582 CORE Add clear exception message when processing an application with a library config or the other way around. 9.0.11 DGD-2746 GRADLE Clarify exception message when the 'path' property of the DexGuard block does not point to the root of a DexGuard installation. 9.0.11 DGD-1933 CORE Automatically apply the <code>-multidex</code> option. 9.0.10 PGC-0006 CORE Filter out signatures that do not conform with the java specification. 9.0.10 DGD-3231 CORE Fix <code>-accessthroughreflection,encryptstrings</code> potentially introducing a call to a non-existent method. 9.0.10 JSG-74 CORE Don't activate javascript protection for non-javascript script tags in html files. 9.0.10 DGD-2808 CORE Fix invalid app bundle structure when performing automatic RASP injection. 9.0.10 DGD-2924 CORE Print protection report location to DexGuard's build log. 9.0.9 DGD-3235 CORE Create additional locations for RASP injection early in the application lifecycle. 9.0.9 DGD-3153 CORE Improved performance by deduplicating configuration rules. 9.0.9 DGD-3165 CORE Fixed code obfuscation potentially introducing infinite recursion in extensions of <code>Context.getResources()</code>. 9.0.9 DGD-3034 CORE Allow <code>-keepresources</code> flag without explicitly listing resources. 9.0.9 DGD-3109 CORE Added support for M1-based macs to the Protection Report. 9.0.8 DGD-2363 CORE Updated package structure of Dagger sample. 9.0.8 DGD-2363 CORE Updated SSLPinning and SSLPinningWebView samples. 9.0.8 DGD-2861 CORE Fix Error Code 10 when using the <code>DebugBlocker</code>. 9.0.8 DGD-2892 CORE Fixed possible runtime VerifierError caused by <code>-accessbyreflection</code>. 9.0.8 DGD-2235 CORE Added support for encrypting resource files in APKs using SDK 28+. 9.0.8 DGD-3080 GRADLE Fixed issue in the Gradle plugin where libraryjars in dynamic feature modules weren't deduplicated before passing them to DexGuard. 9.0.8 DGD-3023 CORE Fixed issue where RASP checks wouldn't crash the application when logging code was removed using '-assumenosideeffects'. 9.0.8 DGD-3060 CORE Fixed an issue in RASP file checks which could potentially lead to missing checked file. 9.0.7 DGD-2659 CORE Fixed an issue where resource files and encrypted native libraries may receive the same name after obfuscation. 9.0.7 DGD-2887 GRADLE Fixed issue in the Gradle plugin where variant resolution would fail for app bundles with dynamic features when using an Android Gradle plugin version below 4.0 and a Gradle version below 6.0. 9.0.7 DGD-2886 GRADLE Fixed issue in the Gradle plugin where variant resolution failed when a dynamic feature has a dependency on another dynamic feature. 9.0.7 PGC-0015 CORE Added support for Java 16. 9.0.7 PGD-0064 CORE Added support for Java 14 and 15. 9.0.7 PGD-0064 CORE Added support for sealed classes (permitted subclasses attributes). 9.0.7 PGD-0064 CORE Added support for record attributes. 9.0.7 DGD-2877 STUDIO Added support for Android Studio 4.1 and 4.2 to the Android Studio plugin. 9.0.7 DGD-2898 CORE Added rule to configuration to shrink <code>annotations.zip</code> in an Android library by default. 9.0.7 DGD-2884 CORE Fixed parsing of table config in resource table files, causing <code>NullPointerException</code> at processing time 9.0.6 DGD-2828 GRADLE Fixed issue in the Gradle plugin where consumer rules weren't picked up for file dependencies. 9.0.6 DGD-2987 GRADLE Fixed issue in the Gradle plugin where the mapping files are overwritten when APK splits are used. 9.0.6 DGD-2983 RUNTIME Fixed potential crashes in <code>HookDetector</code> when running on Android 10 or higher. 9.0.6 DGD-2369 RUNTIME Fixed potential false positives in RASP emulator check when running on OnePlus devices. 9.0.6 DGD-2067 RUNTIME Renamed DexGuard runtime native library to avoid possible name collisions with other native libraries. 9.0.6 DGD-2918 RUNTIME Fixed potential false positives in <code>EmulatorDetector</code> when running on devices that provide desktop experience. 9.0.6 DGD-2969 CORE Updated <code>Realm</code> sample. 9.0.6 DGD-2602 GRADLE Added Firebase Crashlytics mapping file upload integration to the DexGuard Gradle plugin. 9.0.5 DGD-2953 CORE Fixed required signature scheme check always firing, regardless of maxSdkVersion. 9.0.5 DGD-2914 CORE Moved -keep rules for Moshi to a new <code>dexguard-moshi.pro</code> configuration file. 9.0.5 DGD-2942 CORE Fixed potential infinite loop when processing Dalvik input. 9.0.5 DGD-2954 CORE Fixed parsing failure of UTF-8 BOM encoded Javascript files. 9.0.5 DGD-2919 RUNTIME Fixed potential false positives in <code>EmulatorDetector</code> when running on certain Huawei, Teclast, Myria devices. 9.0.5 DGD-2531 GRADLE Added <code>overwriteUnprotected</code> option to have DexGuard overwrite the unprotected artifact. 9.0.4 DGD-2917 CORE Updated manual entry 'Tune the obfuscation level' to describe the configuration for new gradle plugin. 9.0.4 DGD-2197 CORE Using whitelists for configuring string encryption in JavaScript now properly obfuscates the matched strings. 9.0.4 DGD-2406 CORE Added Kotlin DSL Gradle script snippets to the manual. 9.0.4 DGD-2899 GRADLE Fixed the <code>dexguardDownload</code> task possibly being created multiple times. 9.0.4 DGD-2891 CORE Fixed missing files in the META-INF folder of apks generated from processed app bundles. 9.0.4 DGD-2797 GRADLE Fixed failure to add <code>useLibrary</code> dependencies to the library jars. 9.0.3 DGD-2636 CORE Added support for the WorkManager Multiprocess Library to the default configuration. 9.0.3 DGD-2844 GRADLE Fixed failure to add <code>compileOnly</code> dependencies to the library jars when building a library. 9.0.3 DGD-2870 CORE Fixed RASP resource injection on Windows environment. 9.0.3 DGD-2783 GRADLE Fixed build failure when using the Android Studio \"Generate Signed Bundle or APK\" window to generate protected bundles. 9.0.3 DGD-2687 GRADLE Added documentation for using Crashlytics with product flavors. 9.0.2 DGD-2724 CORE Fixed <code>FileNotFoundException</code> for encrypted native libraries in an SDK with <code>extractNativeLibs=false</code>. 9.0.2 DGD-2826 RUNTIME Fixed potential false positives in <code>HookDetector</code> when handling unresolved symbols. 9.0.2 DGD-2825 RUNTIME Fixed potential false positives in <code>EmulatorDetector</code> on Samsung devices connected to Samsung DeX. 9.0.2 DGD-2835 CORE Fixed potential infinite wait during dependency analysis 9.0.2 DGD-2808 CORE Fixed potential RASP file tamper check failure. 9.0.2 DGD-2790 GRADLE Fixed incorrect parsing of the Gradle version when using a Gradle release candidate. 9.0.2 DGD-2757 CORE Updated the list of available Maven artifacts in the manual. 9.0.2 DGD-2737 CORE Fixed potential NullPointerException while detecting Gson serialization location. 9.0.2 DGD-2411 CORE Made better error messages when the -obfuscatejavaScript and -javascriptconfiguration are not provided together 9.0.2 DGD-2804 RUNTIME Fixed a file descriptor double-close bug in the <code>HookDetector</code>. 9.0.1 DGD-2768 GRADLE Changed the location of the processed apk/aab/aar to be in the same location as the unprocessed one. 9.0.1 DGD-2719 GRADLE Fixed passing of arguments to DexGuard containing characters such as <code>#</code> in keystore passwords. 9.0.1 DGD-2753 CORE Fixed NullPointerException when using -dump. 9.0.1 DGD-2751 CORE Fixed printing of hash <code>#</code> characters when using <code>-printconfiguration</code>. 9.0.1 DGD-2732 CORE Fixed invalid backporting of static and default interface methods when post-processing. 9.0.0 DGD-2070 CORE Added threatcast-client artifacts. 9.0.0 DGD-2070 RUNTIME Added RASP injection library artifact. 9.0.0 DGD-2649 CORE Fixed certain resource table entries not being printed to the resource mapping file. 9.0.0 DGD-2663 CORE Removed old <code>Cordova/CrossWalk</code> sample. 9.0.0 DGD-2683 CORE Removed <code>bin/install_gradle_plugin.{sh,bat}</code> scripts. 9.0.0 DGD-2244 CORE Added rules for Jacoco coverage reports to the default configuration. 9.0.0 DGD-2587 CORE Fixed IllegalArgumentException (Stack size becomes negative) in optimization <code>class/merging/wrapper</code>. 9.0.0 DGD-1919 CORE Added automatic injection of DexGuard runtime library when using automatic RASP injection. 9.0.0 DGD-2468 CORE Gracefully handle corrupt Signature Attributes in the input. 9.0.0 DGD-2253 CORE Added automatic generation of a Protection Report. 9.0.0 DGD-1521 GRADLE Added a new Gradle plugin that supports AGP 4.x. 9.0.0 DGD-2226 CORE Made post-processing the default mode for DexGuard. <p> Upgrade considerations for version 9.0.21:</p> <ul> <li>If your application uses a custom <code>android.app.Application</code> class, please refer   to this page to correctly setup your application for RASP root detection   (both for manual checks and automatic code injection).</li> </ul> <p> Upgrade considerations for version 9.0.20:</p> <ul> <li> <p>The <code>-pack</code> option has been deprecated and will be removed in a future DexGuard release.   Please refer to finer-grained techniques such as class encryption   (-encryptclasses) and code virtualization (-virtualizecode)   that provide more effective protection.</p> </li> <li> <p>ThreatCast App User ID: DexGuard can retrieve extra information at runtime which will be sent along with every threat that is detected.   For example, this information can be used to identify your users.   You can configure DexGuard using its new option <code>-threatcastappuseridgetter</code>.</p> </li> </ul> <p>Upgrade considerations for version 9.0.17:</p> <ul> <li> <p>In order to detect the latest versions of Magisk and Magisk Hide (21.3+):</p> <ul> <li>For manual root detection with the runtime library, use the asynchronous,   callback-based implementation of the root   detection check that was added in DexGuard version 9.0.17.</li> <li>For automatic root detection with injected RASP checks, use RASP injection   of DexGuard version 9.0.17. No configuration or code changes are required   compared to previous versions.</li> </ul> </li> <li> <p>When building an SDK, the runtime library should be packaged using the <code>embed</code> configuration to make   a fat AAR.</p> </li> </ul> <p>Upgrade considerations:</p> <ul> <li>We removed DexGuard from the build process, it is now supposed to be executed   as a command line tool.</li> <li>We added a new Gradle plugin   that will help you to collect certain inputs for DexGuard. This plugin has   support for AGP 4+.</li> </ul>"},{"location":"about/releasenotes.html#version-87-june-2020","title":"Version 8.7 June 2020","text":""},{"location":"about/releasenotes.html#automated-rasp-injection","title":"Automated RASP injection","text":"<p>DexGuard can now automatically inject the various checks for Runtime Application Self-Protection into your application. You no longer need to manually change your source code to update the protection of your application. By simply rebuilding your app, you can let DexGuard add the latest checks, automatically and to their full extent. DexGuard provides:</p> <ul> <li>Automatic injection based on high-level configuration switches.</li> <li>Aggressiveness settings to control the impact.</li> <li>An optional callback mechanism enabling your app to react to threats.</li> <li>Optional application termination as a tamper response.</li> <li>Straightforward but flexible configuration options.</li> </ul>"},{"location":"about/releasenotes.html#threat-reporting-capabilities","title":"Threat reporting capabilities","text":"<p>Detecting and reacting to application and device threats are fundamental DexGuard features. You may also want to collect and visualize related data, in order to further improve hardening or to flag fraud. Our free ThreatCast console now adds convenient reporting capabilities.</p> <ul> <li>Seamless integration with the ThreatCast console.</li> <li>Automated threat reporting for all enabled RASP checks.</li> <li>Collection and reporting of additional threat information.</li> <li>Easy configuration through addition of a single api-key.</li> </ul>"},{"location":"about/releasenotes.html#inconspicuous-name-obfuscation","title":"Inconspicuous name obfuscation","text":"<p>Typical name obfuscation stands out because of the unusual identifiers. In some cases this draws extra attention and helps focus reverse engineering efforts.</p> <ul> <li>New settings to switch between naming schemes.</li> <li>New naming scheme to generate realistic looking names.</li> </ul>"},{"location":"about/releasenotes.html#fat-aars","title":"Fat AARs","text":"<p>DexGuard can now combine and protect multiple AAR libraries and their internal and external dependencies into a single 'fat' AAR. You can thus more easily create and distribute secure SDKs.</p>"},{"location":"about/releasenotes.html#improved-kotlin-support","title":"Improved Kotlin support","text":"<p>The default processing of Kotlin applications has been improved. Various pieces of Kotlin-related semantic information are removed when not needed at run-time. You can still apply standard -keep rules when exceptions are needed, for example for SDK APIs.</p> Version Issue Module Explanation 8.7.10 DGD-2734 CORE Fixed not all initialization methods being kept for Moshi Json deserialization. 8.7.09 DGD-2713 CORE Fixed parameter names in Kotlin interfaces not being kept when using -keepparameternames together with -keepkotlinmetadata. 8.7.09 DGD-2701 RUNTIME Fixed potential false negatives in <code>EmulatorDetector</code>. 8.7.08 DGD-2661 CORE Fixed UnsatisfiedLinkError when including DexGuard native runtime libraries with conservative default configuration. 8.7.08 DGD-2655 CORE Fixed corruption of decrypted strings on some devices. 8.7.08 DGD-2677 CORE Fixed potential issue related to increased string section length when processing native libraries. 8.7.08 DGD-2480 CORE Changed default configuration to keep native libraries with their original names in library projects. 8.7.08 DGD-2647 RUNTIME Fixed potential false positives in <code>EmulatorDetector</code> when running on certain Xiaomi devices. 8.7.08 DGD-2643 CORE Fixed potential NullPointerException during Gson optimization. 8.7.07 DGD-2382 CORE Fixed processing of Kotlin 1.4 metadata annotations. 8.7.07 DGD-2632 CORE Added support for localised values for fat AARs. 8.7.06 DGD-2580 CORE Fixed potential VerifyErrors on Android 4.4 and earlier when encrypting strings. 8.7.06 DGD-2539 CORE Added additional rules for Moshi Gson parser/unparser and added a sample Moshi project. 8.7.06 DGD-2498 STUDIO Added RASP configuration support in Android Studio plugin. 8.7.06 DGD-2554 CORE Fixed potential VerifyErrors on Android 4.4 and earlier when virtualizing code. 8.7.06 DGD-2540 CORE Fixed potential <code>VerifyError: Bad type on operand stack</code> error when injecting RASP callback. 8.7.06 DGD-2518 CORE Fixed potential corruption of RASP callback when using certain variable types. 8.7.05 DGD-2511 CORE Fixed regression in the Gradle plugin where Espresso tests contain too many classes. 8.7.05 DGD-2427 CORE Added additional configuration to keep attribute names related to  in AndroidManifest.xml 8.7.05 DGD-2510 CORE Added further additional default configuration for the Firebase Crashlytics library. 8.7.04 DGD-2508 CORE Fixed NullPointerException when using native library encryption with app bundles. 8.7.04 DGD-2501 CORE Added additional default configuration for the Firebase Crashlytics library. 8.7.04 DGD-2372 RUNTIME Fixed false positives when calling <code>HookDetector.isApplicationHooked</code> on devices running Android 11. 8.7.04 DGD-2492 CORE Prevented erroneous options in consumer rule generation for AARs. 8.7.04 DGD-2366 CORE Fixed string encryption possibly introducing private fields in interfaces. 8.7.04 DGD-2494 CORE Fixed naming conflict resolution potentially resulting in the renaming of android library members. 8.7.04 DGD-2493 CORE Fixed <code>-keepresources</code> being incorrectly written to consumer rules. 8.7.04 DGD-2479 CORE Fixed spuriously incorrectly decrypted strings on new thread. 8.7.04 DGD-2471 RUNTIME Fixed potential IllegalArgumentException when obfuscating/virtualizing code that has parameter type annotations. 8.7.04 DGD-2368 RUNTIME Fixed false negatives in <code>EmulatorDetector</code> when running on Android 11 emulator. 8.7.03 DGD-2425 GRADLE Fix Espresso test default input filter in the Gradle plugin which prevented kotlin metadata files from being included in the test apk. 8.7.03 DGD-2351 GRADLE Fix issue in the Gradle plugin where native libraries in library projects weren't picked up on a clean build. 8.7.03 DGD-2421 CORE Add default configuration for Google ML kit library. 8.7.03 DGD-2354 CORE Update the configuration to keep Gson annotations. 8.7.03 DGD-2352 CORE Fix potential NullPointerException in certain RASP injection locations. 8.7.03 DGD-2348 CORE Fix possible duplication of certain injected RASP checks. 8.7.03 DGD-2344 CORE Fix apps always crashing when a debugger is attached regardless of user configuration. 8.7.03 DGD-2329 CORE Improve potential code injection locations. 8.7.03 DGD-2299 CORE Add API method to DetectionReport for checking if the app was signed with debug keys. 8.7.03 DGD-1792 RUNTIME Fixed potential false positives when calling <code>HookDetector.isApplicationHooked</code> on devices with native bridge initialized. 8.7.03 RUNTIME Added integration with the Zimperium console. 8.7.03 RUNTIME Added integration with ThreatCast. 8.7.02 DGD-2288 CORE Fix potential crash when injecting code into methods with unsupported attributes. 8.7.01 DGD-2268 CORE Fix reporting of incorrect threat types when certain hooking and rooting checks are injected. 8.7.00 DGD-2205 CORE Changed default <code>-optimizationpasses</code> to 2. 8.7.00 DGD-2223 GRADLE Enabled <code>-printinjectmapping</code> by default in Gradle builds. 8.7.00 DGD-1891 CORE Fix potential NullPointerException when processing Kotlin metadata. 8.7.00 DGD-2147 CORE Added RASP configuration options. 8.7.00 DGD-2151 CORE Fixed a possible crash when the dexguard-rasp library is included without the dexguard-runtime library. 8.7.00 DGD-2166 CORE Added Kotlin reflect <code>-keep</code> rules to the default configuration. 8.7.00 DGD-2188 CORE Renamed -adaptkotlinmetadata configuration option to -keepkotlinmetadata. 8.7.00 DGD-2101 CORE Added exceptions and warnings for common RASP injection configuration mistakes. 8.7.00 DGD-2165 CORE Added KotlinReflection sample. 8.7.00 DGD-2170 GRADLE Fixed possible persistence problem with injection configurations when using a Gradle daemon. 8.7.00 DGD-2148 CORE Automatically encrypt strings in RASP callbacks. 8.7.00 DGD-2158 GRADLE Rename Kotlin samples: Kotlin to KotlinHelloWorld and KotlinDSL to GradleKotlinDSL. 8.7.00 DGD-1976 CORE Added dexguard-rasp.pro configuration (replacing multiple RASP/ThreatCast/Zimperium configuration files). 8.7.00 DGD-1975 CORE Added support for RASP callbacks and default crash/continue threat behaviour (<code>continueOn*</code> switches). 8.7.00 DGD-1525 CORE Added new obfuscation scheme that uses kept names for name obfuscation. 8.7.00 DGD-1693 CORE Add support for injecting code that contains exception handling. 8.7.00 DGD-1969 CORE Add support for injecting code that contains switch blocks. 8.7.00 DGD-1787 CORE Strip Kotlin metadata unless explicitly kept via <code>-keep</code> rules. 8.7.00 DGD-2063 CORE Fixed configuration printing of members in class specification <code>-define</code> vars. 8.7.00 DGD-2055 CORE Ensure that code is not injected before <code>super.onAttachBaseContext</code> in Android applications. 8.7.00 DGD-2047 CORE Fixed possible NullPointerException if Kotlin referenced file facade does not exist. 8.7.00 DGD-1732 CORE Fixed retrace not deobfuscating certain stacktraces originating from Sentry. 8.7.00 DGD-1995 CORE Fixed constructing class hierarchy for optimization and obfuscation. 8.7.00 DGD-2001 CORE Keep INSTANCE fields in Kotlin object classes. 8.7.00 DGD-1795 CORE Prevent classes referenced from Android XMLs from being made packageless. 8.7.00 DGD-1780 CORE Removed dependency on internal sun.security API. 8.7.00 DGD-1851 GRADLE Updated Kotlin sample gradle configuration and moved from \"advanced\" to \"basic\" folder. 8.7.00 DGD-1434 CORE Improved default support for the AndroidX libraries. 8.7.00 DGD-1755 CORE Targeting Java 5 instead of Java 1.2 in generated Java class files in library projects. 8.7.00 DGD-1286 CORE Added support for PKCS11 signing through the new option <code>-pkcs11configuration</code>. 8.7.00 DGD-1754 WB-ADDON Fixed unsupported constants in bytecode when applying whitebox cryptography in library projects without optimization or obfuscation. 8.7.00 DGD-1240 RUNTIME Added a Cordova SystemWebViewClient that can do both SSL pinning and asset decryption. 8.7.00 DGD-123 CORE Added support for fat AAR creation. 8.7.00 RUNTIME Added integration with the Zimperium console. 8.7.00 RUNTIME Added integration with ThreatCast."},{"location":"about/releasenotes.html#version-86-february-2020","title":"Version 8.6 February 2020","text":"<ul> <li>Improved support for Kotlin. DexGuard is now able to process (shrink / obfuscate)   information injected by the kotlin compiler (<code>kotlin.Metadata</code> annotations, data classes, ...).   Please refer to the Kotlin page for more information.</li> </ul> Version Issue Module Explanation 8.6.19 DGD-2263 CORE Fixed native library name obfuscation to avoid potential conflict in library projects. 8.6.19 DGD-2332 CORE Further hardened code virtualization. 8.6.19 DGD-2356 RUNTIME Fixed potential false negative with regards to detection of new Android debug keys. 8.6.19 DGD-2354 CORE Update the configuration to keep Gson annotations. 8.6.19 DGD-2287 CORE Further hardened string encryption. 8.6.19 DGD-2340 CORE Include the required resources for Google Open Source Notices. 8.6.19 DGD-2297 CORE Fix potential post-processing VerifyError \"expected to be within a catch-all for an instruction where a monitor is held\". 8.6.18 DGD-2022 CORE Fixed issue in the Gradle plugin where classes were collected incorrectly when using Firebase performance monitoring, causing no monitoring information to be sent. 8.6.17 DGD-1513 STUDIO Added support for Android studio 4.0 to the Android studio DexGuard configuration file type plugin. 8.6.17 DGD-2174 GRADLE Fixed issue in the Gradle plugin where dynamic feature dependencies weren't collected properly when building app bundles with AGP 3.6. 8.6.17 DGD-2202 CORE Fixed invalid interface method access modifier when backporting lambdas with minSdkVersion &gt;= 26. 8.6.16 DGD-1853 RUNTIME Fixed false negatives in <code>EmulatorDetector</code> when running on Nox player. 8.6.15 DGD-2179 GRADLE Fixed Crashlytics support regression with the Android Gradle plugin 3.6 in the Gradle plugin. 8.6.14 DGD-2159 GRADLE Fixed issue in the Gradle plugin where the build would crash when using Gradle 6. 8.6.14 DGD-1586 GRADLE Improved integration with the new Firebase Crashlytics SDK. Documented remaining steps for the integration. 8.6.14 DGD-2103 CORE Fixed potential crash when doing primitive castings during backporting. 8.6.14 DGD-2106 GRADLE Fixed issue in the Gradle plugin where specifying splits with both abi and density dimensions for an apk caused a crash. 8.6.13 DGD-2073 GRADLE Resolved task ordering issues between the DexGuard and Crashlytics Gradle plugins when using Android Gardle plugin version 3.6. 8.6.13 DGD-2076 GRADLE Fixed an issue in the Gradle plugin where library jars may be missing when building instrumented test APKs 8.6.13 DGD-2061 GRADLE Fixed issue in the Gradle plugin where the mapping file wasn't correctly set when using the Android Gradle plugin 3.6. This caused calls to <code>variant.getMappingFile()</code> to fail. 8.6.11 DGD-1792 RUNTIME Fixed potential false positives when calling <code>HookDetector.isApplicationHooked</code> on devices with native bridge initialized. 8.6.10 DGD-2043 CORE Fixed processing of section indices in ELF files. 8.6.10 DGD-2042 GRADLE Fixed an issue in the Gradle plugin where too many classes were included in instrumented test APKs. 8.6.10 DGD-2050 RUNTIME Fixed false negatives in <code>RootDetector</code> wrt detecting Magisk Manager app. 8.6.10 DGD-2018 CORE Improved analysis for necessary classes in the main dex file. 8.6.10 DGD-2046 CORE Fixed optimization leading to unexpected error \"Stack size becomes negative\". 8.6.10 DGD-1837 CORE Fixed potential IncompatibleClassChangeError when backporting lambda expressions. 8.6.09 DGD-1842 CORE Fixed possible stack overflow when many Gson classes are optimized. 8.6.09 DGD-1979 CORE Fixed transitive loading of encryption plugins when they were not explicitly loaded. 8.6.08 DGD-1897 CORE Fixed verifier error when declaring too many JNI methods. 8.6.07 DGD-1186 WB-ADDON Further fixed application of whitebox cryptography for debug builds. 8.6.07 DGD-1938 CORE Corrected file name to be uploaded to private Maven repository in manual. 8.6.06 DGD-1800 CORE Fixed obfuscation of functional interfaces with abstract Object methods. 8.6.06 DGD-1558 CORE Fix potential error caused by D8 \"expected to find a possibly throwing instruction\". 8.6.06 CORE Updated D8 tool for class conversion to version 1.6.68. 8.6.06 DGD-1883 GRADLE Updated parsing of resource tables in app bundles for Android Gradle Plugin 3.6 (\"Unsupported field number [5] in Attribute Symbol message\"). 8.6.05 DGD-1854 WB-ADDON Fixed application of whitebox cryptography for debug builds. 8.6.05 DGD-1836 GRADLE Fixed issue in the Gradle plugin where dependencies weren't collected correctly when using transforms with a limited scope. 8.6.05 DGD-1846 CORE Fixed potential IllegalArgumentException during optimization when there is only one core available. 8.6.04 DGD-1844 GRADLE Improved error message when including the DexGuard gradle plugin the wrong way. 8.6.04 DGD-1841 CORE Disabled internal debug logging and files. 8.6.03 DGD-1811 CORE Fixed threading issue causing spurious optimization problems. 8.6.03 DGD-1778 GRADLE Fixed an issue in the Gradle plugin which might cause variant selection to fail when using dynamic features. 8.6.03 DGD-1809 GRADLE Improved error message when including the DexGuard gradle plugin the wrong way. 8.6.03 DGD-1621 RUNTIME Updated the runtime library to allow integration with Unity. 8.6.03 DGD-1759 GRADLE Fixed issue in the Gradle plugin causing a <code>FileNotFoundException</code> when including certain dependencies using the Android Gradle plugin version 3.6. 8.6.03 DGD-1239 RUNTIME Add implementation for shouldInterceptRequest(WebView view, WebResourceRequest request) to EncryptedWebViewClient, introduced in API level 21. 8.6.03 DGD-1768 CORE Fixed potential deadlock in optimization phase. 8.6.03 DGD-1756 CORE Further avoiding Windows file naming issue of resource files in libraries. 8.6.02 DGD-1698 CORE Fixed possible NullPointerException while processing Kotlin modules. 8.6.02 DGD-1714 CORE Fixed <code>extends</code> not recognized in <code>-encryptclasses</code> rule. 8.6.02 DGD-1566 RUNTIME Added documentation for DexGuard runtime library integration in SDK projects. 8.6.01 DGD-1567 RUNTIME Fixed crashes in DexGuard runtime library on devices running Android API less than 21. 8.6.00 JSG-8 CORE Added support for JavaScript obfuscation of ECMAScript 6 code. 8.6.00 JSG-60 CORE Improved runtime performance of JavaScript string decryption. 8.6.00 DGD-1556 CORE Added default configuration for the Unity game engine. 8.6.00 JSG-4 CORE Improved integration with React Native apps. 8.6.00 JSG-31 CORE Improved error handling when parsing JavaScript configuration. 8.6.00 JSG-6 CORE Added function encryption to hide the implementation of sensitive JavaScript functions. 8.6.00 DGD-1562 CORE Fixed incomplete usage marking of Kotlin classes potentially causing NullPointerException at build time. 8.6.00 DGD-1444 CORE Improved speed of side effect marking. 8.6.00 DGD-1473 CORE Improved speed of instruction usage marking. 8.6.00 DGD-1204 CORE Added <code>allowobfuscation</code> modifier for resources, to allow renaming of the resource id. 8.6.00 DGD-1482 CORE Improved speed of peephole optimizer. 8.6.00 DGD-1471 CORE Improved speed of horizontal class merging. 8.6.00 DGD-1537 CORE Improved speed of partial evaluator. 8.6.00 DGD-1456 GRADLE Updated default resource input filters of the gradle plugin wrt files located in the META-INF directory. 8.6.00 DGD-1370 GRADLE Added support for the Android Gradle plugin version 3.6. 8.6.00 DGD-1219 CORE Added new option <code>-printresourcemapping</code> to print the mapping information for resource entries. 8.6.00 DGD-1487 CORE Fixed false positives wrt default constructors when using <code>-addconfigurationdebugging</code>. 8.6.00 DGD-1495 CORE Fixed false positives for missing assets and native libraries when using <code>-addconfigurationdebugging</code>. 8.6.00 DGD-1346 CORE Added new option <code>-distinctclassmembernames</code> to ensure that all matching members are distinct within a class. 8.6.00 DGD-1550 CORE Fixed potential NullPointerException when processing <code>kotlin.Metadata</code> annotations at build time. 8.6.00 DGD-1201 RUNTIME Added debug blocker and improved debug detection. 8.6.00 DGD-1472 CORE Improved speed of initial subclass initialization 8.6.00 DGD-1464 CORE Fixed non-determinism during apk input processing. 8.6.00 DGD-1463 CORE Ensured that printed optimization statistics are reported correctly. 8.6.00 DGD-1294 RUNTIME Added documentation to the performance of various environment checks of the DexGuard runtime library. 8.6.00 CORE Fix potential build error when obfuscating companion classes of nested Kotlin classes. 8.6.00 CORE Fix potential build error when partially keeping the <code>kotlin.Metadata</code> class. 8.6.00 DGD-1480 CORE Fix potential kotlin reflection runtime errors due to incorrect flags on properties. 8.6.00 DGD-1462 CORE Fixed initialization of enclosing method classes. 8.6.00 DGD-1405 CORE Fixed processing of Kotlin companion objects. 8.6.00 DGD-1455 CORE Fixed potential IllegalArgumentException in DataClassObfuscator. 8.6.00 DGD-1384 CORE Added support for Kotlin contracts. 8.6.00 DGD-1455 CORE Fixed processing of kotlin data classes. 8.6.00 CORE Fixed sample 'basic/KotlinDSL'. 8.6.00 CORE Fixed potential NullPointerException when processing <code>kotlin.Metadata</code> annotations at build time. 8.6.00 DGD-1094 CORE Added a cordova plugin to setup DexGuard automatically in cordova projects. 8.6.00 GRADLE Modified group Id in pom descriptors <code>lib/gradle-plugin.xml</code> and <code>lib/maven-plugin.xml</code> to <code>com.guardsquare.dexguard</code> to be in sync with artifacts on maven repository. 8.6.00 DGD-1382 CORE Added support to process <code>kotlin.Metadata</code> annotations. 8.6.00 DGD-1419 GRADLE Fixed issue in the Gradle plugin where dependency projects got compiled for all variants when this is only necessary for some of them. 8.6.00 PGD-753 CORE Fixed processing of signature attributes in constructors of inner classes and enum types. 8.6.00 PGD-756 CORE Fixed detection of functional interfaces. 8.6.00 PGD-750 CORE Fixed UnsupportedOperationException when optimizing enum types in closure arguments. 8.6.00 PGD-752 CORE Fixed preverification of initializers with inlined exception throwing code. 8.6.00 PGD-744 CORE Fixed potential ClassCastException when optimizing method handles of simple enum types. 8.6.00 PGD-741 CORE Improved incremental obfuscation. 8.6.00 PGD-740 CORE Fixed shrinking of nest member attributes. 8.6.00 PGD-739 CORE Fixed the counter for the number of inlined constant parameters. 8.6.00 PGD-188 CORE Added support for nest-based access control and dynamic constants in Java 11. 8.6.00 PGD-735 CORE Fixed processing of parameter annotations in constructors of inner classes and enum types. 8.6.00 PGD-734 CORE Fixed detection of functional interfaces with Object methods. 8.6.00 PGD-709 CORE Improved error messages for problems parsing wildcards. 8.6.00 PGD-680 CORE Fixed resolution of class members in Java 11 or higher. 8.6.00 DGD-1138 GRADLE Added support for the Android Gradle plugin version 3.5. <p>Upgrade considerations:</p> <ul> <li>The DexGuard gradle plugin is now a separate jar (<code>lib/dexguard-gradle-plugin.jar</code>) and local integration   in the <code>build.gradle</code> has slightly changed as it has now some transitive dependencies.</li> <li>The file <code>lib/dexguard.jar</code> does not include the gradle plugin anymore and should only be used for standalone   processing.</li> </ul>"},{"location":"about/releasenotes.html#version-85-august-2019","title":"Version 8.5 August 2019","text":"<ul> <li> <p>Dex conversion. Dex Conversion has been changed to use D8 by default.</p> </li> <li> <p>Multidex improvements. Support for multidexing in applications has   been improved to be as compatible as possible to the standard Android   gradle plugin.</p> </li> <li> <p>** Improved root detection.** DexGuard now more reliably detects magisk.</p> </li> </ul> Version Issue Module Explanation 8.5.18 DGD-1594 CORE Fixed merging of wrapper classes when processing some apk files. 8.5.18 DGD-1615 CORE Avoiding backup file naming issue of resource files in libraries. 8.5.17 DGD-1567 RUNTIME Fixed crashes in DexGuard runtime library on devices running Android API less than 21. 8.5.17 DGD-1564 CORE Fixed merging of wrapper classes when processing some apk files. 8.5.16 DGD-1552 CORE Avoiding Windows file naming issue of resource files in libraries. 8.5.15 DGD-1505 CORE Completed fix for encrypted resources which got corrupted in app bundles. 8.5.14 DGD-1539 RUNTIME Qualified Magisk as a root hider in root detection. 8.5.14 DGD-1497 RUNTIME Fixed crashes when calling <code>HookDetector.isApplicationHooked</code> in apps using TensorFlow libraries. 8.5.14 DGD-1486 RUNTIME Fixed crashes when calling <code>HookDetector.isApplicationHooked</code> in multiple threads simultaneously. 8.5.13 DGD-1507 CORE Fixed issue in Gson optimization that could cause verification errors when used on abstract classes. 8.5.12 DGD-1508 CORE Updated <code>dictionary.txt</code> to avoid problems on some Samsung devices. 8.5.12 DGD-1531 RUNTIME Fixed false positives when calling <code>RootDetector.isDeviceRooted</code> on devices running Android 9 and lower. 8.5.12 DGD-1532 GRADLE Fixed issue in the Gradle plugin where variant resolution could fail when a flavor dimension is declared but not used by any product flavor. 8.5.12 DGD-1516 CORE Added support for resource string encryption when resources are used as input to <code>TextView.setText(int)</code>. 8.5.12 DGD-1519 CORE Added support for new <code>dialog</code> destination elements introduced in navigation component v2.1.0. 8.5.12 DGD-1515 CORE Ensured that the build fails when using a <code>minSdkLevel</code> of <code>21+</code> and the resulting application does not fit into a single dex file but <code>-multidex</code> was not specified. 8.5.12 PGD-19 CORE Fixed potential issues when removing unused parameters in method descriptors (optimization <code>method/removal/parameter</code>). 8.5.12 PGD-18 CORE Fixed potential case where parameterless constructors were made private during optimization. 8.5.12 CORE Fixed Windows batch script for generating keep rules for an aar file. 8.5.12 DGD-1454 CORE Adjusted defaults for dex conversion when using d8 to avoid rare build errors due to dex overflows. 8.5.12 DGD-1498 GRADLE Made gradle plugin more robust wrt gradle buildscript classpath issues and support including the plugin inside the <code>buildSrc</code> environment. 8.5.12 CORE Fixed configuration of <code>advanced/KeyCzar</code> sample wrt logging removal. 8.5.11 DGD-1474 RUNTIME Improved detection of Magisk Manager app. 8.5.11 JSG-53 CORE Fixed escaping of encrypted JavaScript strings. 8.5.11 JSG-47 CORE Fixed wrongly obfuscated JavaScript variables when obfuscation was disabled. 8.5.11 JSG-55 CORE Fixed wrong parenthesization of template call expressions in JavaScript code. 8.5.11 DGD-1503 CORE Added default filter to prevent processing of versioned class files. 8.5.11 CORE Fixed processing of app bundles that use <code>-encryptresourcefiles</code> in combination with bundletool. 8.5.11 DGD-1505 CORE Fixed encryption of resource strings when building app bundles. 8.5.11 DGD-1496 GRADLE Fixed issue in the Gradle plugin with missing consumer rules when using disabled variants in project dependencies. 8.5.10 DGD-1492 RUNTIME Fixed false positives when calling <code>VirtualEnvironmentDetector.isRunningInVirtualEnvironment</code> on Asus Zenfone 6 devices running Android 9. 8.5.10 DGD-1485 RUNTIME Fixed false positives when calling <code>VirtualEnvironmentDetector.isRunningInVirtualEnvironment</code> on Nvidia Shield TV devices. 8.5.10 DGD-1491 RUNTIME Fixed false positives when calling <code>HookDetector.isApplicationHooked</code> on certain Xiaomi devices. 8.5.10 CORE Fixed parsing <code>maxSdkVersion</code> from the <code>AndroidManifest.xml</code>. 8.5.10 DGD-1477 GRADLE Fixed gradle plugin to support Android gradle plugin 3.5.2 due to missing dependencies. 8.5.10 DGD-1465 CORE Fixed potential <code>NoSuchElementException</code> when building projects with submodules and complex flavor setups. 8.5.10 DGD-1481 GRADLE Fixed including consumer Proguard rules from submodules when enabling <code>on demand configuration</code> with gradle 5.5+. 8.5.10 DGD-1489 CORE Fixed potential <code>IllegalArgumentException</code> with message <code>Value \"x\" is not a reference value</code> when optimizing code with conditional casts. 8.5.10 DGD-1483 CORE Added support for proper obfuscation of argument types (attribute <code>argType</code>) when using the androidx navigation library. 8.5.10 DGD-1221 CORE Improve default configuration to support optimization of default constructors. 8.5.10 DGD-1381 GRADLE Fixed including dependent modules when building library projects with Android gradle plugin 3.5+. 8.5.10 DGD-1484 GRADLE Fixed issue in the gradle plugin where dependencies got collected wrongly in combination with the realm plugin. 8.5.10 DGD-1459 GRADLE Fixed issue in the gradle plugin where project dependencies in a composite build were included wrongly. 8.5.10 DGD-1476 CORE Fixed potential <code>NullPointerException</code> during processing when no <code>-libraryjars</code> option has been specified. 8.5.10 DGD-1424 CORE Fixed incomplete fix in case of inlining methods with type annotations. 8.5.10 CORE Added marker for dex files when using d8 as conversion mechanism. 8.5.10 DGD-1468 CORE Fixed default configuration of side effects for the <code>java.lang.Character#toChars(int, char[], int)</code> method which resulted in broken androidx emoji compatibility library. 8.5.09 CORE Fixed potential loading errors for encrypted native libraries when no <code>abiFilter</code> is defined and improved error reporting in case of problems. 8.5.09 CORE Fixed potential loading errors for encrypted native libraries on Android P+ devices in projects with <code>targetSdkVersion &gt;= 25</code> and not using the nativeloader mechanism. 8.5.08 CORE Fixed support for <code>missingDimensionStrategy</code> settings when including library modules that do not have any flavors. 8.5.07 DGD-1452 GRADLE Fixed issue in the gradle plugin where classes starting with an <code>_</code> were not included correctly in library projects. 8.5.07 DGD-1447 CORE Added support for private resources in library projects. 8.5.07 DGD-1448 GRADLE Fixed potential infinite loop when analysing project dependencies in the gradle plugin introduced by adding support for AGP 3.5. 8.5.07 DGD-1449 CORE Fixed NoClassDefFoundError in library projects that use the Gson library. 8.5.07 DGD-1445 GRADLE Fixed support for <code>missingDimensionStrategy</code> settings in <code>build.gradle</code> when using the gradle plugin introduced by adding support for AGP 3.5. 8.5.06 CORE Fixed generation of <code>maindexlist.txt</code> and <code>proguard.map</code> in app bundles to not rely on default encoding. 8.5.06 DGD-1429 GRADLE Fixed considerable slowdown in configuration phase when using the gradle plugin with Android gradle plugin v3.5.0+. 8.5.06 DGD-1416 RUNTIME Fixed potential file descriptor leakage when calling <code>HookDetector.isApplicationHooked</code> on Android 7+ devices. 8.5.06 DGD-1343 CORE Ensured that lambda expressions are always backported by default even when specifying a <code>minSdkVersion</code> of 26+. 8.5.06 DGD-1430 RUNTIME Fixed potential exception when calling <code>RootDetector.isDeviceRooted</code> on some Tecno devices. 8.5.06 GRADLE Backported support for the Android Gradle plugin version 3.5. 8.5.06 DGD-1424 CORE Fixed potential build error when inlining methods into code attributes with type annotations. 8.5.06 DGD-1359 CORE Fixed removal of non-static write-only fields (optimization <code>field/removal/writeonly</code>). 8.5.06 DGD-1421 GRADLE Added <code>package-info.class</code> files to the default input filter of the gradle plugin. 8.5.05 DGD-1406 GRADLE Removed redundant library jar input when building library projects with Android gradle plugin 3.4+. 8.5.05 CORE Fixed propagation of <code>UnsatisfiedLinkErrors</code> when trying to load missing native libraries with enabled native library encryption. 8.5.05 DGD-1414 CORE Improved detection of hard-coded reflection on class members. 8.5.05 DGD-1374 CORE Updated used kotlin version in sample <code>advanced/Kotlin</code> to <code>1.3.50</code>. 8.5.05 DGD-1378 CORE Added support for targeting jvm 1.8 (<code>jvmTarget = \"1.8\"</code>) when compiling kotlin code. 8.5.05 DGD-1378 CORE Added support to natively backport usages of the <code>java.lang</code> API introduced in Java 8. 8.5.04 CORE Improved deobfuscation of arbitrary lines when using the <code>-greedy</code> option of the retrace utility. 8.5.04 DGD-1381 CORE Fixed including dependent library projects as <code>-libraryjar</code> input when building library projects. 8.5.04 RUNTIME Fixed potential ANR when running the <code>RootDetector</code> on some Samsung devices. 8.5.04 RUNTIME Fixed crashes an potential false positives when running <code>VirtualEnvironmentDetector</code> on devices with API level &lt; 17. 8.5.04 DGD-1377 CORE Fixed issue in SSLPinning(System)WebViewClient where web pages were loaded in plain text instead of being rendered. 8.5.04 CORE Ensured that the build fails when the dex file overflows and <code>-multidex</code> is not specified in the configuration. 8.5.03 DGD-1354 RUNTIME Fixed potential runtime exception when using the HookDetector on some Pixel 3 devices running Android Q beta 5+. 8.5.03 DGD-1361 CORE Kotlin DebugMetadata annotations are now removed by default unless the <code>kotlin.coroutines.jvm.internal.DebugMetadata</code> class is kept explicitly. 8.5.03 DGD-1372 CORE Correctly disable class level optimizations for classes originating from dynamic feature modules when building app bundles. 8.5.03 CORE Added support for Android Studio 3.5 in the Android Studio plugin. 8.5.03 DGD-1371 CORE Fixed partitioning of injected classes in case they are accessed from multiple dynamic feature modules. 8.5.02 DGD-1366 GRADLE Fixed issue in the Gradle plugin where file dependencies were collected incorrectly when using the Android Gradle plugin version 3.4. 8.5.02 DGD-1365 GRADLE Fixed issue in the Gradle plugin where annotation processor metadata files were not collected in library projects. 8.5.02 JSG-18 CORE Improved reporting of statistics for all processing steps of JavaScript obfuscator. 8.5.02 JSG-37 CORE Improved performance of name obfuscation of JavaScript obfuscator. 8.5.02 JSG-45 CORE Fixed possible NullPointerException in opaque predicate injection of JavaScript obfuscator. 8.5.02 JSG-44 CORE Fixed possible NullPointerException in debugger obstruction of JavaScript obfuscator. 8.5.02 DGD-1349 CORE Added option <code>-greedy</code> to the retrace utility in order to retrace obfuscated classnames in unrecognized lines. 8.5.02 DGD-1357 CORE Added support to retrace stacktraces printed by crashlytics including additional source line information (e.g. <code>at o.afc.b + 45(:45)</code>). 8.5.01 DGD-1353 RUNTIME Fixed memory protection of executable regions in <code>HookDetector</code> while running on Android Q. 8.5.00 DGD-975 GRADLE Added documentation how to use the <code>secure maven repository</code> to easy integration into gradle. 8.5.00 JSG-2 CORE Added configuration debugging option for JavaScript obfuscator. 8.5.00 JSG-1 CORE Improve shrinking of JavaScript obfuscator by taking variable scopes into account. 8.5.00 DGD-1312 CORE Fixed duplicate execution of DexGuard when building app bundles in combination with the <code>io.fabric</code> plugin (requires io.fabric plugin version 1.31.0+). 8.5.00 DGD-891 CORE Improved <code>-addconfigurationdebugging</code> to reduce false positives. 8.5.00 DGD-1301 CORE Fixed optimization of exceptions as unused parameters. 8.5.00 CORE Fixed printing unintended warnings about constructors when using <code>-virtualizecode</code>. 8.5.00 CORE Updated D8 tool for class conversion to version 1.5.54. 8.5.00 DGD-1280 CORE Further improved multidex partitioning when using application classes extending other classes. 8.5.00 DGD-1280 CORE Fixed multidex partitioning to only perform recursive marking for classes referenced from the <code>attachBaseContext</code> and <code>init</code> methods instead of the whole application class. 8.5.00 CORE Added a <code>command line tool</code> to generate necessary rules to keep everything of an aar file. 8.5.00 DGD-1164 GRADLE Fixed potential warning about dependencies evaluated too early in the gradle plugin. 8.5.00 DGD-951 GRADLE Fixed warning about invalid task inputs in the gradle plugin. 8.5.00 DGD-1276 CORE Fixed optimization of Groovy code constructs causing Dalvik conversion errors. 8.5.00 DGD-1206 RUNTIME Fixed issue relating to the runtime library loading when both <code>HookDetector</code> and <code>RootDetector</code> are used and they encrypted too. 8.5.00 DGD-1058 CORE Take the <code>minSdkVersion</code> attribute into account when using d8 as conversion tool. 8.5.00 CORE Made <code>d8</code> the default dex conversion mechanism which provides fixes for many device specific bugs. 8.5.00 DGD-1241 RUNTIME Fixed false positives when calling <code>RootDetector.isDeviceRooted</code>. 8.5.00 DGD-2018 CORE Added new option <code>-printresourceusage</code> to print a list of unused resources in the input APK. 8.5.00 DGD-1141 RUNTIME Improved magisk detection. 8.5.00 DGD-1180 CORE Fixed automatic generation of consumer ProGuard rules that accidentally included the <code>inmaindex</code> modifier. 8.5.00 CORE Updated dx tool for class conversion to build tools version 28.0.3. 8.5.00 DGD-1009 CORE Improved obfuscation of DexGuard runtime library. 8.5.00 RUNTIME Added support for inline hook detection. Tools like Frida use inline hooking. 8.5.00 RUNTIME Added a FAST flag to the HookDetector for faster hook detection. 8.5.00 RUNTIME Added a new Runtime API VirtualEnvironmentDetector.isRunningInVirtualEnvironment for virtual environment detection. 8.5.00 RUNTIME Improved security of RootDetector by removing package names. 8.5.00 RUNTIME Improved emulator detection to detect emulators, such as LDPlayer and Nox. 8.5.00 DGD-1072 GRADLE Added support for the Android Gradle plugin 3.4. 8.5.00 DGD-1137 CORE Added new option <code>-printmaindexlist</code> to print why classes are placed in the primary dex. 8.5.00 CORE Added modifier <code>inmaindex</code> to <code>-keep</code> rules to force classes to be put in the maindex. 8.5.00 DGD-521 GRADLE Multidex partitioning has been reworked to be as compatible as possible compared to the Android gradle plugin. 8.5.00 DGD-1093 CORE Improved handling of dynamic features and multidex. 8.5.00 DGD-1077 CORE Improved configuration of the FileChecker class. <p>Upgrade considerations:</p> <ul> <li>The JavaScript obfuscator is now included in <code>dexguard.jar</code> instead of being packaged in a separate   <code>dexguard-javascript.jar</code>. You should remove the line 'classpath ':dexguard-javascript:'<code>from your</code>build.gradle` file.</li> <li>Multidex partitioning has been reworked to be as compatible as possible compared to the standard   Android gradle plugin. As a consequence, the <code>allowmultidexing</code> modifier for <code>-keep</code> rules is enabled   by default. To force a specific class to be put in the main dex file you can either add the modifier <code>inmaindex</code>   to any <code>-keep</code> rule, or specify a corresponding <code>multiDexKeepFile</code> or <code>multiDexKeepProguard</code> property in   your <code>build.gradle</code> script.</li> <li>By default, d8 (default dex conversion tool from the standard Android build tools since v3.2.0),   will be used to convert class files to the dex format. In order to use the old, internal conversion   mechanism, specify a system property <code>conversion.tool=internal</code>. Alternatively, dx can be activated   via <code>conversion.tool=dx</code> (system properties can also be specified in the <code>gradle.properties</code> file via   <code>systemProp.conversion.tool=xxx</code>).   Note: in case the WhiteboxCrypto addon is used, it is advised to switch to the internal conversion for performance reasons.</li> <li>Various artifacts included in the distribution are now accessible via a secure maven repository.</li> </ul>"},{"location":"about/releasenotes.html#version-84-february-2019","title":"Version 8.4 February 2019","text":"<ul> <li> <p>Support for dynamic features. DexGuard now supports the new Google   Play Store app service model, called dynamic delivery. It allows to   further reduce the initial application size by installing features   on demand.</p> </li> <li> <p>Javascript obfuscation. DexGuard already had a plugin mechanism for   third-party obfuscators. It now offers its own implementation with   fundamental techniques, smoothly integrated.</p> </li> <li> <p>Improved runtime detections. Various detection mechanism for root or   virtual environments and hooking frameworks have been improved.</p> </li> </ul> Version Issue Module Explanation 8.4.19 DGD-1345 GRADLE Fixed issue in the Gradle plugin where duplicate classes were collected when dependending on an android library project. 8.4.18 CORE Fixed system property <code>obfuscate.applymapping.conservatively</code> when used in combination with espresso tests. 8.4.17 CORE Added system property <code>obfuscate.applymapping.conservatively</code> to prevent applying new names to explicitly kept classes / members. 8.4.17 CORE Fixed potential build error when combining class encryption with apk processing in rare cases. 8.4.17 CORE Fail the build in case conversion tool d8 is chosen and there are conversion errors. 8.4.17 CORE Enabled <code>-multidex</code> by default when building espresso test apks. 8.4.16 DGD-1341 CORE Improved default configuration for the firebase library. 8.4.16 CORE Improved default configuration to prevent class merging for classes of the Android multidex support library. 8.4.16 DGD-1340 CORE Fixed SSLPinning and SSLPinningWebView samples by updating the used certificates. 8.4.16 DGD-1339 GRADLE Fixed processing of surrogate pairs (used by emoji characters) when using Android gradle plugin 3.3+. 8.4.16 DGD-1335 CORE Improved configuration for latest version of constraint-layout library (v 2.0.0-beta1+). 8.4.16 DGD-1326 GRADLE Added the DexGuard license file to the default input filter the Gradle plugin uses. 8.4.16 PGD-759 CORE Fixed backporting of Java 8 API types when used as parameters in private methods. 8.4.16 PGD-749 CORE Fixed merging of classes containing type annotations with empty targets. 8.4.15 DGD-1334 CORE Improved performance of name obfuscation of JavaScript obfuscator. 8.4.15 DGD-1210 CORE Improved build performance when using <code>-useuniqueclassmembernames</code>. 8.4.15 DGD-1332 CORE Added support for processing dex format 038 when performing apk processing. 8.4.15 DGD-1331 CORE Fixed conversion of not-int instructions when performing apk processing. 8.4.15 DGD-1328 CORE Fixed conversion of consecutive phi nodes when performing apk processing. 8.4.15 DGD-1282 CORE Fixed optimization of final fields that might be accessed before initialization. 8.4.15 DGD-1327 CORE Fixed generation of mapping information in case of class merging. 8.4.15 DGD-1253 CORE Fixed issue in JavaScript obfuscator that could cause IllegalStateException. 8.4.14 DGD-1323 CORE Fixed potential ClassCastException when virtualizing code. 8.4.14 DGD-271 CORE Worked around bug on Android 6/7 devices causing spurious EISDIR error when decrypting encrypted classes (regression introduced due to change of conversion tool). 8.4.14 DGD-1317 CORE Fixed potential build errors when optimizing methods with many parameters. 8.4.14 DGD-1322 CORE Fixed issue in JavaScript name obfuscation that could cause name collisions with undeclared global variables. 8.4.14 DGD-1321 CORE Fixed issue in control flow and arithmetic obfuscation of JavaScript code that could cause name collisions. 8.4.14 DGD-1320 CORE Fixed issue in string encryption of JavaScript obfuscator that could cause name collisions. 8.4.14 DGD-1319 CORE Fixed issue in JavaScript obfuscation of property declarations containing non-ASCII characters. 8.4.14 DGD-1311 CORE Fixed encoding of surrogate pairs contained in Android resource tables. 8.4.14 DGD-1313 CORE Fixed StackOverflowError in name obfuscation of large JavaScript files. 8.4.13 DGD-1304 CORE Fixed potential VerificationError on Android 4.4 when processing the Kotlin coroutines library. 8.4.13 DGD-1298 CORE Fixed optimization of exception handling in Kotlin runtime. 8.4.13 DGD-1301 CORE Fixed optimization of exceptions as unused parameters. 8.4.13 DGD-1276 CORE Fixed optimization of Groovy code constructs causing Dalvik conversion errors. 8.4.13 DGD-1308 CORE Fixed removal of annotation attributes from class members during Gson optimization. 8.4.13 DGD-1307 CORE Fixed potential <code>NullPointerException</code> when using <code>-whyareyoukeeping</code>. 8.4.13 DGD-901 CORE Added support to include a <code>mainDexList.txt</code> file when building app bundles with <code>minSdkVersion &lt; 21</code>. 8.4.13 DGD-1305 CORE Avoided unnecessary notes about descriptor classes that are not being kept. 8.4.13 DGD-1306 CORE Fixed issue in number obfuscation of JavaScript obfuscator that could cause an <code>IllegalArgumentException</code>. 8.4.12 DGD-1261 CORE Improved loading of applications using <code>-pack</code> option by adding additional fallback mechanisms. 8.4.12 DGD-1266 RUNTIME Fixed false positives when calling <code>HookDetector.isApplicationHooked</code> when using javascript library j2v8. 8.4.12 DGD-1275 RUNTIME Fixed false positives when calling <code>HookDetector.isApplicationHooked</code> when using React Native. 8.4.12 DGD-1302 CORE Fixed processing of pre-obfuscated native libraries that can not be read by DexGuard. 8.4.12 DGD-1299 CORE Improved default configuration for the wear / wearable support library. 8.4.12 DGD-1292 GRADLE Fixed severity of errors and warnings printed by the DexGuard Gradle plugin (from severity info to warn). 8.4.12 DGD-1296 CORE Fixed usage of signing certificates with DSA signature algorithm and <code>minSdkVersion &lt;= 21</code>. 8.4.12 DGD-1290 RUNTIME Fixed false positives when calling <code>HookDetector.isApplicationHooked</code> on some Android 5.1 devices. 8.4.12 DGD-1291 GRADLE Fixed issue in the Gradle plugin where some metadata was generated incorrectly, causing issues with <code>gradle install</code> and Android Studio. 8.4.12 DGD-1288 CORE Improved default configuration for the Firebase Firestore library. 8.4.12 DGD-1284 CORE Improved performance of various processing steps in case many resource files are present. 8.4.12 DGD-1285 GRADLE Fixed issue in the Gradle plugin where changing the <code>outputFile</code> property of a <code>VariantOutput</code> instance could cause a <code>FileNotFoundException</code>. 8.4.12 DGD-1281 GRADLE Fixed issue in the Gradle plugin where building app bundles didn't get configured correctly on Windows. 8.4.12 DGD-1276 CORE Fixed bug in JavaScript obfuscator where parentheses weren't always added around expressions where they are necessary. 8.4.12 DGD-1278 CORE Added additional comments to the file generated by the tasks <code>collectConsumerProguardFiles</code> that state the origin of the rules below them. 8.4.12 DGD-1277 GRADLE Fixed issue in the Gradle where writing out the consumer proguard rules wouldn't be written out correctly when calling the Gradle task <code>collectConsumerProguardFiles</code>. 8.4.12 DGD-1273 GRADLE Fixed building some samples with gradle 4.10+. 8.4.12 DGD-1258 CORE Fixed potential VerifyError in JVM caused by inlining methods from super class. 8.4.12 CORE Improved default configuration for the Google GMS Wallet library. 8.4.11 CORE Fixed potential <code>IllegalStateException(\"unexpected block size\")</code> at runtime when reading encrypted data items. 8.4.11 DGD-1251 CORE Fixed unpacking and filtering of app bundles inside other archives. 8.4.11 DGD-1255 CORE Correctly take property <code>minSdkVersion</code> into account when using an external dex conversion tool. 8.4.11 DGD-1209 GRADLE Added support for the Android Gradle plugin version 3.4. 8.4.11 DGD-1249 CORE Added additional warnings in case obfuscation of JNI interfaces exceeds existing size of string section. 8.4.10 DGD-1242 GRADLE Fixed issue in the Gradle plugin where duplicate class warnings would be emitted when using file dependencies. 8.4.10 DGD-1124 CORE Fixed potential build error while optimizing tail recursion. 8.4.10 CORE Fixed potential <code>NullPointerException</code> when backporting lambda expressions that reference unknown classes. 8.4.10 CORE Fixed potential problem with class encryption on Android 6.0 devices. 8.4.10 DGD-1214 RUNTIME Fixed false positives when calling <code>HookDetector.isApplicationHooked</code> on some Android 7.1.1 devices. 8.4.10 DGD-1237 CORE Added default configuration for the <code>joda-time-android</code> library. 8.4.10 DGD-1234 CORE Fixed duplicate library jars when building app bundles with dynamic features. 8.4.10 DGD-1229 CORE Fixed NoSuchMethodException caused by Gson optimization of enum types written in Kotlin. 8.4.10 DGD-1230 RUNTIME Fixed false positives in HookDetector in case native libraries are referencing each other. 8.4.10 DGD-1248 GRADLE Fixed usage of DexGuard elements in gradle build scripts when using Kotlin DSL. 8.4.10 DGD-1213 CORE Fixed obfuscation of property names in JavaScript code that occur in property definitions. 8.4.09 DGD-1212 CORE Fixed obfuscation of property names in JavaScript code that occur in destructuring assignments. 8.4.09 DGD-1227 CORE Include information about the conversion tool being used to build the apk. 8.4.09 DGD-1226 CORE Fixed including local variable information when using d8 as conversion tool for debuggable build types. 8.4.09 DGD-1222 CORE Fixed potential problems with class encryption on API 26+ devices. 8.4.09 DGD-1077 CORE Improved configuration of the FileChecker class. 8.4.09 DGD-1211 CORE Fixed incorrect values in enabled column of configuration overview printed out by JavaScript obfuscator. 8.4.09 PGD-745 CORE Fixed IllegalArgumentException for comparison of constant arrays with NaN float/double values. 8.4.09 DGD-1207 GRADLE Fixed issue in the Gradle plugin where too many libraries were included when using the databinding library and Gradle 5+. 8.4.09 DGD-1203 GRADLE Fixed issue where DexGuard wouldn't be executed when using gradle 4.6 in combination with Android gradle plugin 3.2+. 8.4.09 DGD-1205 RUNTIME Fixed potential NullPointerException when calling <code>HookDetector.isAppplicationHooked</code>. 8.4.08 CORE Fixed handling of missing or inaccessible system files in DexGuard runtime. 8.4.08 DGD-1196 CORE Fixed error in Gson optimization that could cause issues during class conversion. 8.4.08 DGD-1087 CORE Added missing case to fix potential verify error on Android 4.4 and below when virtualizing code. 8.4.08 DGD-1199 GRADLE Fixed issue in the Gradle plugin where in library projects Android resources from dependencies could end up in the final aar. 8.4.08 DGD-1197 GRADLE Fixed issue in the Gradle plugin where the default assetInputFilter contained a small mistake where hidden files would be accepted if present in the assets. 8.4.08 DGD-1198 CORE Treating dex files in assets and res directories as plain resource files. 8.4.08 DGD-1168 CORE Fixed potentially printing incorrect warnings during class encryption about not encrypting inner classes. 8.4.08 DGD-1178 CORE Fixed potential build errors when optimizing enums with private instance methods. 8.4.08 DGD-1190 RUNTIME Added hook detection for the linker. 8.4.08 DGD-1181 CORE Fixed runtime library to avoid linker warnings printed to logcat. 8.4.08 DGD-710 FP-ADDON Extended device fingerprinting add-on with new flags DEVICE, SIM_CARD, ADVERTISING_ID, and APP_USER_ID. 8.4.08 DGD-1193 CORE Updated sample license for Android Things samples. 8.4.07 DGD-1049 GRADLE Fixed regression in the Gradle plugin where the DexGuard bundle task was executed when building an apk with Crashlytics (or any other service that requests the mapping file via the variant interface). 8.4.07 DGD-1136 CORE Fix potential runtime exceptions when using class encryption on specific Android 6.x devices. 8.4.07 DGD-1105 CORE Print relevant information when encountering an error during class conversion using dx. 8.4.07 DGD-1179 CORE Added printing notes when encountering unknown classes in configuration options -encryptclasses, -obfuscatecode, and -virtualizecode. 8.4.07 DGD-504 CORE Fixed potential build errors when optimizing Kotlin code that combines <code>let</code> and the Elvis operator <code>?:</code>. 8.4.06 DGD-1140 CORE Updated version check plugin to include version information in its user-agent settings. 8.4.06 CORE Fixed default configuration <code>dexguard-debug-shrink.pro</code> resulting in missing resource tables. 8.4.06 DGD-1173 CORE Fixed building app bundles when using stable resource ids that exceed the number of existing resource for a given type spec. 8.4.05 DGD-1173 CORE Fixed building app bundles when requesting stable resource ids (using --stable-ids flag to aapt2). 8.4.05 DGD-1174 CORE Fixed potential build error with missing class hierarchies (regression introduced by DGD-1148). 8.4.05 DGD-1172 CORE Fixed issue introduced by DGD-1164 where DexGuard wouldn't be executed when using configure on demand. 8.4.04 DGD-1169 GRADLE Updated samples so they all build with Gradle 5. 8.4.04 DGD-1170 CORE Fixed a potential build error when building app bundles with variable native library encryption (regression introduced by DGD-1070). 8.4.04 DGD-1148 CORE Fixed potential build errors when encrypting certain Kotlin classes. 8.4.04 CORE Improved default configuration for Android Architecture Lifecycle library. 8.4.04 DGD-1164 GRADLE Fixed issue in the Gradle plugin where tasks could be resolved too early when creating dependencies. 8.4.04 DGD-1166 CORE Added the possibility to specify a class input filter for Espresso tests. 8.4.04 DGD-1165 GRADLE Fixed issue in the Gradle plugin where the setup task for an Espresso test could run before the DexGuard task of the main app. 8.4.04 DGD-1163 GRADLE Improved performance of the Gradle plugin for Android Gradle plugin 3.2 and 3.3 support. 8.4.04 CORE Updated Espresso sample to use androidx. 8.4.04 DGD-1113 CORE Added default rules for androidx to the <code>dexguard-espresso.pro</code> default configuration. 8.4.03 DGD-1160 CORE Bump supported bundletool version to 0.5.0 when building app bundles. 8.4.03 DGD-1157 CORE Fixed shrinking of resource values that are only referenced from resource XML files (regression introduced by DGD-1039). 8.4.03 DGD-1158 CORE Fixed retrace tool in case the source file attribute contains digits. 8.4.03 DGD-1156 GRADLE Fixed issue in the Gradle plugin where the build could fail when using build types that have a capitalized name. 8.4.02 DGD-1153 GRADLE Fixed execution of DexGuard when building on Windows platform and using Android gradle plugin 3.2+. 8.4.02 DGD-1149 CORE Fixed name of intermediate apk when using apk processing. 8.4.02 DGD-1152 GRADLE Fixed building debug builds with <code>minSdkVersion</code> of 21+ in the gradle plugin when using Android gradle plugin 3.3.x. 8.4.02 DGD-1150 CORE Fixed run-time API <code>FileChecker.checkAllFiles</code> for app bundles with code that is fused in universal apks. 8.4.02 DGD-1151 CORE Fixed using option <code>-applymapping</code> in combination with injected classes / members. 8.4.01 DGD-1117 CORE Fixed asset encryption compatibility issue with Ionic webview plugin (version 3.0+) 8.4.01 DGD-1118 CORE Fixed issue in JavaScript obfuscator that could prevent app from launching when property access obfuscation is enabled. 8.4.01 DGD-1124 GRADLE Fixed issue in the gradle plugin where an exception would be thrown if you configured splits that resulted in only 1 output apk. 8.4.01 CORE Correctly take plural resources with quantity <code>zero</code> into account when building app bundles. 8.4.01 CORE Prevent potential out-of-memory exceptions when building app bundles in combination with <code>-multidex</code>. 8.4.01 DGD-1070 CORE Added support for splitting encrypted native libraries in app bundles. 8.4.01 DGD-1106 GRADLE The DexGuard Gradle plugin now provides a task to build an Espresso test apk that can test your obfuscated app bundles, see espresso for more info. 8.4.01 DGD-615 GRADLE Updated <code>dexguard-versioncheck</code> plugin to also take beta channels into account when configured accordingly. 8.4.00 GRADLE Fixed usage of <code>consumerRuleFilter</code> in gradle build scripts. 8.4.00 CORE Corrected broken fix for DGD-1083. 8.4.00 DGD-1086 CORE Fixed processing of <code>-keep</code> rules in the presence of <code>-multidex</code> in combination with app bundles and dynamic features. 8.4.00 DGD-438 CORE Added alternative class obfuscation dictionary which avoids use of UTF-8 characters, see default configs. 8.4.00 DGD-438 CORE Updated class obfuscation dictionary. 8.4.00 DGD-1083 GRADLE The DexGuard Gradle plugin now takes <code>abiFilters</code> correctly into account again. 8.4.00 CORE Fixed generation of app bundles in case multidex is needed and dynamic features are included. 8.4.00 DGD-1039 CORE Classes referenced from resource files are now automatically kept when using -adaptresourcefilecontents. 8.4.00 DGD-1046 GRADLE Added additional check in the gradle plugin to prevent dependency chain loops. 8.4.00 DGD-966 GRADLE Added support for the Android Gradle plugin 3.3.0-rc03. 8.4.00 DGD-826 CORE Added support for Javascript obfuscation. 8.4.00 DGD-933 CORE Extended runtime FileChecker with methods to check all files. 8.4.00 CORE Fixed ConcurrentModificationException when build an app bundle with multiple dynamic features including assets for native libraries. 8.4.00 DGD-1000 CORE Fixed reading of resource XML and resource table files in protobuf format wrt to default string values. 8.4.00 DGD-992 GRADLE Added support in the gradle plugin for the option <code>matchingFallbacks</code> to resolve the variants of the dynamic features used when building an app bundle. 8.4.00 CORE Removed obsolete sample <code>basic/JackToolchain</code>. 8.4.00 CORE Added two Android Things samples. 8.4.00 DGD-938 CORE Added samples <code>basic/DynamicFeatures</code> to show-case support for the new Android Dynamic Delivery feature. 8.4.00 DGD-938 CORE Added support for dynamic features (see also sample <code>basic/DynamicFeatures</code>). 8.4.00 DGD-580 RUNTIME Added support for GOT hook detection. Also, extended support for hook detection in all native shared libraries. 8.4.00 DGD-905 RUNTIME Added support for virtual environment detection to detect virtual plugin apps, such as VirtualXposed. 8.4.00 DGD-828 RUNTIME Enhanced Magisk detection. <p>Upgrade considerations:</p> <ul> <li>Runtime method HookDetector.isApplicationHooked now requires an additional Context argument.</li> <li>The Javascript obfuscation plugin mechanism is now replaced with a built-in Javascript obfuscator. Although the   plugin API is still available, we recommend to use the built-in obfuscator. You can switch from a custom   plugin to the built-in plugin by removing the <code>-javascriptplugin</code> option from your DexGuard configuration.   Additionally, you have to provide a proper JavaScript configuration file via the <code>-javascriptconfiguration</code> option.   The format and options of the configuration file are documented in the JavaScript manual that is available in the   <code>docs/javascript</code> directory of the release.</li> <li>The Gradle plugin has been reimplemented from scratch. This plugin will be used by default   with the Android Gradle plugin 3.2 and beyond, older versions will fall back to the   previous implementation. You shouldn't notice any differences unless you are using the   <code>dexguard</code> block to configure any filters as the syntax has slightly changed.</li> <li>The Gradle plugin has been made more strict and will fail the build when incompatible   Android gradle plugin settings are detected. This is the case for both the old and new   implementations of the Gradle plugin.</li> <li>The Gradle plugin does not include all optional libraries by default anymore, if you encounter   an error like:   <code>Can't find common super class of [com/android/volley/toolbox/HttpClientStack$HttpPatch] (with 1 known super classes) and [com/android/volley/Request]</code>,   add the following to your <code>build.gradle</code> file: <code>android {</code> <code>useLibrary 'org.apache.http.legacy'</code> <code>}</code></li> </ul>"},{"location":"about/releasenotes.html#version-83-december-2018","title":"Version 8.3 December 2018","text":"<ul> <li> <p>Code virtualization. This advanced obfuscation technique protects   algorithms and their implementations.</p> </li> <li> <p>Improved hook detection. We continue to follow up on the latest   technologies.</p> </li> <li> <p>Kotlin support. DexGuard has always supported Kotlin, but it now   automatically handles corner cases and optimizes common constructs.</p> </li> <li> <p>Gson optimization. Many Android developers rely on Google's Gson library   to create JSON strings. DexGuard now optimizes the convenient but inefficient   usage, and improves its obfuscation.</p> </li> <li> <p>Support for app bundles. DexGuard now supports this new format to upload   apps to the Google Play Store. It allows Google to further optimize downloads   for individual end-users, by only packaging the necessary resource files,   languages, native libraries, etc.</p> </li> <li> <p>Compatibility with Google Play metadata. Google Play automatically   injects metadata into all uploaded apps. This process doesn't interfere with   DexGuard's tamper detection techniques.</p> </li> <li> <p>Compatibility with Google Play signing. Google Play optionally signs the   apps for developers, if they provide their keys. This process is a bit more   intrusive, but it is still compatible with 2 out of 3 of DexGuard's tamper   detection techniques.</p> </li> <li> <p>Apk signature scheme v3. The next app signature format, supported as of   Android Pie, supports key rotation (developers can switch certificates when   they release updates of their apps).</p> </li> <li> <p>Support for D8. DexGuard can convert optimized and protected code with   its own internal compiler, with Google's DX compiler, or with the latest D8   compiler.</p> </li> <li> <p>Support for Espresso. DexGuard now works with Android's Espresso testing   framework.</p> </li> </ul> Version Issue Module Explanation 8.3.15 DGD-1059 CORE Updated Android Studio plugin with recently added configuration options. 8.3.15 DGD-1136 CORE Fixed potential <code>FileNotFoundException</code> when decrypting encrypted classes on specific devices (Android 6.0). 8.3.15 DGD-1124 GRADLE Fixed inconsistency in the gradle plugin with the directory tree when splits were configured that resulted in only 1 output. 8.3.15 DGD-1111 CORE Added check to prevent incredibly small chance of creating invalid files when encrypting native libraries. 8.3.14 DGD-1132 CORE Fixed loading of encrypted native libraries with dependencies. 8.3.14 CORE Added additional fallback locations for loading encrypted classes on API 21+ devices. 8.3.14 DGD-1131 CORE Fixed retrace utility to correctly retrace obfuscated stacktraces with omitted colon before linenumber. 8.3.13 CORE Improved mechanism to determine potential locations for loading decrypted classes. 8.3.13 DGD-1126 CORE Fixed unnecessary compression of WEBP assets. 8.3.13 DGD-1125 CORE Ensure unique resource file names when building app bundles. 8.3.13 DGD-1092 CORE Fixed regression for fonts in different configurations. 8.3.13 DGD-1123 GRADLE Fixed issue in the gradle plugin where classes processed by transform tasks with a limited scope didn't get picked up by DexGuard. 8.3.13 CORE Fixed writing of referenced attribute values in protobuf format. 8.3.12 DGD-1114 CORE Fixed issue with Gson optimization that could cause StackOverFlowError when a serialized class extends a class with many descendants. 8.3.12 DGD-1110 CORE Excluded <code>module-info.class</code> files by default. 8.3.12 DGD-1085 CORE Fixed regression for DGD-185 which disabled signature scheme v2. 8.3.12 DGD-1115 CORE Fixed optimization of ProcessBuilder. 8.3.12 DGD-1092 CORE Fixed name obfuscation of font resources in App Bundles. 8.3.11 DGD-968 CORE Fixed backporting of lambda expressions inside default interface methods. 8.3.10 DGD-1087 CORE Fixed potential verify error on Android 4.4 and below when virtualizing code. 8.3.10 CORE Ensure closing of file resources when using the <code>FileChecker</code> of the DexGuard runtime library. 8.3.10 DGD-1085 GRADLE Fixed implicit usage of apk signature scheme v3 if v2 is disabled via the gradle DSL. 8.3.09 CORE Fixed injection of unneeded decryption code for encrypted resources in included library code. 8.3.09 DGD-1081 CORE Fixed issue in Gson optimization when using custom TypeAdapters for primitive types. 8.3.09 DGD-1076 CORE Fixed NullPointerException when using <code>-addconfigurationdebugging</code> in library projects. 8.3.08 DGD-1073 CORE Fixed issue with class merging that could cause problems with Gson library. 8.3.08 DGD-1074 CORE Refined configuration for the Google client API. 8.3.08 DGD-1062 CORE Added verbose statistics for Gson optimization. 8.3.08 DGD-1071 GRADLE Fixed gradle plugin to take modified output filenames correctly into account. 8.3.08 DGD-1063 CORE Updated default configuration to support recent changes in the Samsung store. 8.3.08 DGD-1069 CORE Fixed generation of app bundles in combination with native library encryption. 8.3.07 DGD-1067 CORE Added support for Android Studio 3.3 in the Android Studio plugin. 8.3.07 DGD-1068 GRADLE Fixed small issue in the gradle plugin where task dependencies on tasks from different projects couldn't be resolved. 8.3.07 DGD-1066 CORE Fixed encryption of resource strings. 8.3.06 CORE Fixed espresso test support by ensuring that no additional obfuscation is performed on the test apk. 8.3.06 DGD-1029 CORE Fixed NoSuchMethodException introduced by Gson optimization when using Gson version before 2.7. 8.3.05 DGD-1057 CORE Fixed potential build errors when performing debug builds using dx as conversion mechanism. 8.3.05 DGD-1027 GRADLE Fixed issue in the gradle plugin where creating a signed app bundle via Android Studio created an unsigned app bundle. 8.3.05 DGD-1051 GRADLE Fixed issue in the gradle plugin where instant run builds would fail. 8.3.04 DGD-1054 CORE Fixed writing of consumer proguard rules in library projects having consumer proguard rules but no API keep rules. 8.3.04 DGD-1024 CORE Fixed issue in resource name obfuscation that caused problems with ConstraintLayouts. 8.3.04 DGD-1049 GRADLE Fixed issue in the gradle plugin where the DexGuard bundle task is always executed when building an apk if the Crashlytics gradle plugin is used. 8.3.04 CORE Fixed encryption of string resources which are referenced from resource XML files in case of multiple configurations. 8.3.04 DGD-1050 CORE Fixed obfuscation of enums in annotations, for conversion by dx or D8. 8.3.04 DGD-1044 CORE Fixed NullPointerException during Gson optimization when field type of a serialized class is a class that is not processed by DexGuard. 8.3.04 DGD-1021 CORE Fixed backporting of default interface methods that reference private inner classes / members. 8.3.04 DGD-1040 GRADLE Fixed issue in the gradle plugin where bundle split options weren't picked up correctly. 8.3.03 DGD-1036 CORE Avoiding unpacking archives from the assets directory. 8.3.02 GRADLE Removed check for incompatible settings in the gradle plugin when apk processing is enabled. 8.3.02 DGD-1031 CORE Fixed loading of encrypted classes when used in combination with <code>-obfuscatecode</code> and strength <code>medium</code> or <code>high</code> on Android devices with API 26+. 8.3.02 DGD-996 CORE Fixed conversion of classes that contain large arrays when using dx or d8. 8.3.02 DGD-1033 CORE Fixed issue in Gson optimization that could result in constructors with invalid access modifiers. 8.3.02 CORE Write local variable information in dex format when keeping the <code>LocalVariableTableAttribute</code>. 8.3.02 DGD-980 CORE References to color attributes inside selector drawable XML's are no longer inlined (it may break the correct rendering of the drawable). 8.3.01 CORE Disabled resource deduplication and resource compaction optimizations. You can enable them again by including 'dexguard-resource-optimizations.pro' as the first configuration file. 8.3.01 DGD-1020 GRADLE Fixed dependency issue in the gradle plugin where the DexGuard task for app bundles was also executed when building an Espresso test. 8.3.01 DGD-1019 GRADLE Fixed issue in the gradle plugin where not all compile-only dependencies were picked up correctly. 8.3.00 CORE Updated sample <code>advanced/Realm</code> to the latest realm version 5.8.0. 8.3.00 DGD-1008 CORE Fixed NoClassDefFoundError during Gson optimization when running DexGuard standalone. 8.3.00 CORE Default configuration for androidx (<code>dexguard-androidx.pro</code>) is now included by default. 8.3.00 CORE Fixed loading of native libraries from encrypted classes (regression due to DGD-555). 8.3.00 DGD-812 GRADLE Added support in the gradle plugin for the matchingFallbacks option when collecting consumer proguard files. 8.3.00 DGD-974 CORE Enabled <code>dx</code> as default dex conversion mechanism. 8.3.00 DGD-986 CORE Removed setting <code>encrypt.classes.showlog</code>. 8.3.00 DGD-555 CORE Improved loading of encrypted classes on API level &gt;= 26. 8.3.00 DGD-973 CORE Added new option <code>-randomizationseed</code> to provide an additional value that will be taken into account when generating a seed value to randomize the obfuscation. 8.3.00 DGD-967 GRADLE Improved performance of gradle plugin by evaluating dependencies at most once. 8.3.00 DGD-976 CORE The license check will now accept certain named suffixes when added to valid package names: <code>.test, .dev, .qa, .debug, .alpha, .beta</code>. 8.3.00 GRADLE Fixed building of app bundles when calling gradle with an absolute task path as start parameter, e.g. <code>:app:bundleRelease</code>. 8.3.00 GRADLE The gradle plugin will now fail the build when encountering incompatible settings for build variant configured for DexGuard. 8.3.00 CORE The <code>FileChecker</code> returns now a distinct error code if the control manifest is missing. 8.3.00 DGD-937 CORE Added support to include the mapping file when creating app bundles. 8.3.00 DGD-741 CORE Added support to preserve parameter names when applying <code>-obfuscatecode</code> or <code>-virtualizecode</code> on methods. 8.3.00 DGD-913 RUNTIME Added support for multiple digest algorithms when performing file-level tamper detection using the <code>FileChecker</code> (supported by default SHA1 and SHA-256). 8.3.00 DGD-931 CORE Added verbose output about removed resource entries and meta-data elements. 8.3.00 DGD-924 CORE Fixed encoding of file type for raw xml resources when building app bundles. 8.3.00 DGD-929 CORE Fixed support for using the <code>FileChecker</code> when building app bundles. 8.3.00 DGD-908 CORE Fixed references to resource files outside of the <code>res</code> directory when creating app bundles. 8.3.00 DGD-923 CORE Fixed handling of resource files in combination with <code>-keepresourcefiles</code> rules when creating app bundles. 8.3.00 DGD-921 CORE Fixed writing of resource XML files in protobuf format when creating app bundles. 8.3.00 DGD-921 CORE Fixed encoding of attributes encountered in resource tables when creating app bundles. 8.3.00 CORE Fixed encoding of some id resources in the resource table when creating app bundles. 8.3.00 DGD-909 CORE Fixed encoding of some configuration values in the resource table when creating app bundles. 8.3.00 DGD-906 CORE Improved obfuscation of target activity names in activity aliases. 8.3.00 DGD-892 CORE Invalid use of wildcards <code>&lt;fields&gt;</code> and <code>&lt;methods&gt;</code> in member specifications will now result in a ParseException. 8.3.00 DGD-896 CORE Fixed apk processing in case of implicit conversion of boolean values to integers. 8.3.00 CORE Added manual page about upgrading from ProGuard. 8.3.00 DGD-591 CORE Improved initialization and logging of reflection calls. 8.3.00 CORE Fixed backporting of default interface methods if an interface extends another one. 8.3.00 CORE Updated D8 to version 1.2.38. 8.3.00 DGD-809 CORE Fixed potential VerifyErrors in obfuscated code attributes due to an invalid assumption about the instance variable. 8.3.00 DGD-824 GRADLE Added support for apk signature scheme configuration in SigningConfig elements of gradle buildscripts. 8.3.00 DGD-824 CORE Added new option <code>-apksignatureschemes</code> to control the use of apk signature schemes. 8.3.00 DGD-874 CORE Ensure deterministic results when enabling class encryption. 8.3.00 DGD-875 CORE Fixed potential NullPointerException at runtime when obfuscating <code>attachBaseContext(Context)</code> methods. 8.3.00 PGD-708 CORE Fixed possible JVM runtime verification error due to exception handlers in Kotlin initializers. 8.3.00 PGD-709 CORE Improved error messages for problems parsing wildcards. 8.3.00 DGD-722 CORE Fixed potential VerifyError in optimized exception handlers. 8.3.00 PGD-712 CORE Fixed NullPointerException triggered by <code>module-info</code> classes with <code>requires</code> without version. 8.3.00 DGD-353 GRADLE Added improved support for <code>Espresso tests</code>, see also sample <code>advanced/Espresso</code>. 8.3.00 DGD-727 GRADLE Added support for <code>app bundles</code> (requires Android gradle plugin 3.2.0+). 8.3.00 DGD-360 CORE Added <code>code virtualization</code> with new option <code>-virtualizecode</code>. 8.3.00 DGD-719 CORE Added optimization for usages of the Gson library for serializing and deserializing Json. <p>Upgrade considerations:</p> <ul> <li>The additional plugin <code>dexguard-partial</code> which was only used as a work-around in some cases when using   the Android gradle plugin 3.0.X has been removed. It is highly recommended to upgrade the Android gradle   plugin to at least version 3.1.0 or later.</li> <li>Replaced system properties <code>omit.signature.scheme.v2</code> and <code>enable.signature.scheme.v3</code> with configuration   option <code>-apksignatureschemes</code>. When using gradle to build an application,   consider using the <code>v2SignatureEnabled</code> property from the Android Gradle DSL instead.</li> <li>Keep rules for Gson annotated classes have been moved from <code>dexguard-common.pro</code> to <code>dexguard-gson.pro</code>.   The newly introduced Gson optimization should remove the need for explicitly keeping these classes.   You should try including <code>dexguard-gson.pro</code> in your configuration if there is an issue with Gson after upgrading.</li> <li>The gradle plugin will now fail the build if it detects a build variant that is configured for DexGuard but contains   incompatible settings (i.e. <code>minifyEnabled=true</code>, <code>multiDexEnabled=true</code> or <code>shrinkResources=true</code>).   When <code>minifyEnabled</code> is set to <code>true</code> and no default DexGuard configuration is provided, the default minification   tool of the Android gradle plugin is used instead of DexGuard.</li> <li>By default, dx (tool from the standard Android build tools), will be used to convert class files to the dex   format. In order to use the old, internal conversion mechanism, specify a system property <code>conversion.tool=internal</code>.   Alternatively, d8 can be activated via <code>conversion.tool=d8</code> (system properties can also be specified in the   <code>gradle.properties</code> file via <code>systemProp.conversion.tool=xxx</code>).   Note: in case the WhiteboxCrypto addon is used, it is advised to switch to the internal conversion for performance reasons.</li> </ul>"},{"location":"about/releasenotes.html#version-82-may-2018","title":"Version 8.2 May 2018","text":"<ul> <li> <p>File tamper detection. DexGuard already supports checking the integrity   of entire apk files and react, at run-time. It can now additionally check the   integrity of any specified files.</p> </li> <li> <p>Hardened native library loading. DexGuard could already encrypt native   libraries. It now further hardens the decryption and loading on the device.</p> </li> <li> <p>Javascript encryption plugins. DexGuard could already encrypt Javascript   code inside cross-platform apps, e.g. with Cordova. It now provides a plugin   mechanism to apply sophisticated external Javascript obfuscators.</p> </li> <li> <p>Improved hook detection and SSL pinning. DexGuard evolves along with the   latest technology.</p> </li> <li> <p>Automatic library configuration. DexGuard can now automatically generate   ProGuard/DexGuard consumer rules for libraries, for the convenience of the   developers who use them.</p> </li> <li> <p>Universal support for stream and date APIs. Recent versions of Java and   Android contain new APIs to work with streams and dates. The predominance of   older devices in the market practically limits their use. DexGuard now has   built-in backporting support to use them across all versions of Android.</p> </li> <li> <p>Resource optimization. DexGuard now optimizes the size of resource   configurations in applications.</p> </li> <li> <p>Dex optimization. Developers can now pass collected performance profiles   to let DexGuard optimize the structure of dex files, to improve the startup   times of applications on older devices.</p> </li> <li> <p>Automatic update checking. DexGuard now comes with an optional plugin to   automatically check for available updates.</p> </li> </ul> Version Issue Module Explanation 8.2.25 CORE Fixed potentially wrong instructions when calling methods with modified access flags and using an alternative dex conversion tool. 8.2.25 DGD-1006 CORE Fixed issue in the nativeloader where the jvm reference cap could be reached when a large amount of native functions were resolved. 8.2.25 CORE Fixed automatic generation of consumer ProGuard rules in library projects in combination with <code>-repackageclasses ''</code>. 8.2.25 DGD-1017 RUNTIME Improved resilience of <code>TamperDetector</code> of the DexGuard runtime library. 8.2.25 DGD-1014 CORE Fixed verification errors when accessing resource strings inside constructors and using <code>-encryptresources</code>. 8.2.24 PGD-730 CORE Fixed infinite loop in optimization. 8.2.24 DGD-1011 CORE Consumer ProGuard rules are now always included in AAR's, even when <code>-printlibraryconfiguration</code> is specified; rules generated by DexGuard are still excluded from the AAR in that case. 8.2.24 DGD-1013 GRADLE Fixed issue in the gradle plugin where native libraries were included multiple times when multiple transform tasks are active. 8.2.24 DGD-1012 GRADLE Fixed issue in the gradle plugin where the incorrect class files were used when multiple transform tasks are active. 8.2.24 DGD-995 CORE Fixed invalid rule suggestions when using <code>-addconfigurationdebugging</code> in case of array types. 8.2.24 CORE Fixed Ionic sample (samples/advanced/Cordova/Ionic). 8.2.23 DGD-948 CORE Fixed unwanted renaming of explicitly kept class member names. 8.2.23 DGD-994 CORE Fixed issue with kept class members being potentially obfuscated / shrunk after class merging. 8.2.23 PGD-731 CORE Fixed incorrect error message about generics in wildcard expressions. 8.2.23 DGD-989 CORE Fixed <code>-addconfigurationdebugging</code> in case of <code>null</code> parameters for certain reflection methods. 8.2.23 DGD-984 CORE Fixed Android studio plugin to support the <code>asapi</code> modifier. 8.2.22 DGD-965 CORE Added support for navigation resources. 8.2.22 CORE Fixed backporting of default interface methods in case the method is called with <code>Interface.super.defaultMethod()</code> and the class does not directly implement the interface. 8.2.22 CORE Fixed <code>SSLPinningWebViewClient</code> and <code>SSLPinningSystemWebViewClient</code> when trying to request non-existent URL's. 8.2.21 CORE Fixed backporting of default interface methods in case of an extension interface. 8.2.21 DGD-971 CORE Added class <code>SSLPinningSystemWebViewClient</code> to the DexGuard runtime library to support SSL pinning in Cordova applications. 8.2.21 DGD-969 CORE Fixed generation of mapping files in combination with class encryption which lead to duplicate entries. 8.2.21 DGD-964 GRADLE Fixed issue where the gradle plugin would add <code>compileOnly</code> dependencies as injar instead of libraryjar. 8.2.21 DGD-959 GRADLE Fixed potential build error when setting <code>minifyEnabled=true</code> for some build variants and using the Android gradle plugin 3.2.0+. 8.2.21 DGD-960 GRADLE Fixed issue in the gradle plugin where java resources weren't picked up due to the previous change when using the Android gradle plugin version 2.3. 8.2.20 DGD-960 GRADLE Fixed issue in the gradle plugin where java resource files ended up in the root of the apk instead of in the right directory structure. 8.2.20 DGD-959 GRADLE Fixed crash in gradle when using the fabric gradle plugin version 1.26.0+ with Android gradle plugin 3.2.0+ and the DexGuard gradle plugin. 8.2.20 DGD-958 CORE Fixed native library name obfuscation in library projects. 8.2.20 DGD-955 CORE Kotlin Metadata annotations are now removed by default in Android library projects unless the <code>kotlin.Metadata</code> class is kept explicitly. 8.2.20 GRADLE Updated inputFilter in gradle plugin to prevent that kotlin source files end up in the output by accident. 8.2.20 CORE Fixed potential build error when using D8 as dex conversion mechanism due to aggressive optimization. 8.2.20 CORE Fixed processing of native renderscript libraries included in build tools 28.0.3. 8.2.19 CORE Added default configuration for files with <code>.mov</code> extension. 8.2.19 DGD-952 CORE Fixed generation of mapping files for methods whose code has been obfuscated and contain inlined methods. 8.2.19 DGD-950 CORE Fixed generation of mapping files in case of inlined methods avoiding duplicate entries. 8.2.17 DGD-927 CORE Updated <code>filedictionary.txt</code> to avoid characters which are no longer supported by the Google Play Store. 8.2.17 DGD-927 CORE Updated resource string encryption to avoid encoding characters in the resource table that are no longer supported by the Google Play Store. 8.2.17 GRADLE Fixed gradle plugin to include consumer Proguard files when building library projects with Android Gradle plugin 3.2.0+. 8.2.17 GRADLE Fixed build error in gradle plugin when providing an empty <code>multiDexKeepProguard</code> file. 8.2.17 DGD-943 CORE Fixed support for Android Studio 3.2 in the Android studio plugin. 8.2.17 PGD-720 CORE Fixed unboxed enum types being compared to null. 8.2.17 DGD-942 CORE Fixed shrinking step not always shrinking all unused metadata from AndroidManifest. 8.2.17 CORE Prevent insertion of opaque predicates in interface classes. 8.2.17 CORE Fixed potential <code>NoClassDefFoundError</code> when using <code>-addconfigurationdebugging</code>. 8.2.16 CORE Improved default configuration for Google Firebase Analytics library. 8.2.16 DGD-932 CORE Added support for encryption of asset files that are loaded using a variable name and with a access mode specified (access mode will always be <code>ACCESS\\_STREAMING</code>). 8.2.16 DGD-934 CORE Fixed cordova samples using the <code>EncryptedSystemWebViewClient</code> from the DexGuard runtime library with Chrome v69.0.3497.86+. 8.2.16 CORE Fixed false-positive notes about unkept descriptor classes for injected classes. 8.2.16 CORE Added warning when using <code>-dontshrink</code> in combination with optimization which might result in verification errors at runtime. 8.2.16 DGD-928 CORE Fixed notes about unknown class <code>java.lang.AbstractStringBuilder</code> when using Android SDK 28+. 8.2.16 DGD-926 CORE Fixed incompatibility with older versions of the runtime certificate checker. 8.2.16 DGD-925 CORE Fixed incorrect cleanup of caches by packer on Android 8.0 and higher. 8.2.15 DGD-907 CORE Fixed conversion of checkcast instructions with large variable indices. 8.2.15 DGD-917 RUNTIME Hardened the use of <code>FileChecker</code> in application code; added documentation. 8.2.15 DGD-914 CORE Fixed <code>FileChecker</code> of the DexGuard runtime library when checking files that have been obfuscated. 8.2.15 DGD-822 CORE Fixed potential ClassFormatError due to inconsistent local variable type table in library projects. 8.2.15 RUNTIME Fixed option FAST in root detector of the DexGuard runtime library. 8.2.15 CORE Fixed issue where consumer proguard files weren't picked up when coming from modules in nested subdirectories. 8.2.15 DGD-904 CORE Fixed generation of consumer Proguard file in library projects which might contain invalid modifiers. 8.2.15 DGD-903 CORE Automatically disabled encryption for resource strings that cannot be encrypted (e.g. used as parameter to TextView#setText(int)). 8.2.15 DGD-900 CORE Fixed the DexGuard runtime library when enabling StrictMode in an application. 8.2.13 DGD-879 CORE Added additional debug information in case certain methods could not be converted to dex format. 8.2.13 DGD-888 ADDONS Fixed regression introduced in version 8.2.12 wrt to missing classes. 8.2.13 DGD-884 CORE Fixed obfuscation of unused JNI methods in native libraries. 8.2.13 DGD-853 RUNTIME Fixed false negatives wrt BlueStacks emulator for <code>EmulatorDetector</code> in the DexGuard runtime library. 8.2.13 DGD-718 RUNTIME Fixed false positives for <code>EmulatorDetector</code> in the DexGuard runtime library. 8.2.13 CORE Improved default configuration for Android Architecture Lifecycle library. 8.2.13 DGD-793 CORE Fixed printing notes during the build for generic keep rules not matching any program class. 8.2.12 DGD-852 GRADLE Updated gradle plugin to support gradle 4.9. 8.2.12 GRADLE Fixed gradle plugin to use correct paths for creating mapping files when using Android gradle plugin 2.3 together with splits. 8.2.12 DGD-849 GRADLE Improved support for transform tasks in the gradle plugin when using Android gradle plugin 2.3. 8.2.12 CORE Improved default configuration for the Android support library. 8.2.12 DGD-847 GRADLE The gradle plugin now correctly parses empty lines and comments in files passed to the <code>multiDexKeepFile</code> option. 8.2.12 DGD-848 CORE Fixed potential NullPointerException when using class encryption due to reflection of protected / static methods. 8.2.12 DGD-845 CORE Added default configuration for using AndroidX (<code>dexguard-androidx.pro</code>). 8.2.12 DGD-846 GRADLE Added support for the <code>gradle build cache</code>. 8.2.12 DGD-734 RUNTIME Improved performance of root detector, also adding FAST option. 8.2.11 GRADLE Improved Kotlin support in the gradle plugin. 8.2.11 DGD-842 CORE Fixed issue where multiDexKeepProguard files weren't read correctly. 8.2.11 DGD-843 CORE Fixed potential overflow problems due to class encryption when using an alternative dex conversion mechanism. 8.2.11 DGD-841 CORE Fixed incorrect switch-case statements with android.R resources when applying resource optimizations. 8.2.11 DGD-827 CORE Fixed retracing of obfuscated class/method names in some exception messages. 8.2.10 DGD-812 CORE Fixed issue where consumer proguard files weren't picked up when the product flavors in local project dependencies didn't match exactly. 8.2.10 DGD-821 CORE Fixed issue with duplicate resource table type names that breaks resource reflection. 8.2.10 CORE Fixed potential ClassCastException at build time when using <code>-whyareyoukeeping</code>. 8.2.10 DGD-490 CORE Fixed Android Studio plugin inspection to display tooltips for all flags. 8.2.10 DGD-724 RUNTIME Improved performance of <code>HookDetector</code> in the DexGuard runtime library. 8.2.09 CORE Apk Signature Scheme v3 is now disabled by default. You can enable it by setting the system property <code>-Denable.signature.scheme.v3</code>. 8.2.08 DGD-820 CORE Resource file encryption is now automatically disabled for apps targeting Android P or higher (resource encryption is technically no longer possible on these devices). 8.2.08 DGD-819 CORE Resource table type names are now always preserved (fixes failing APK uploads in the Google Play Store). 8.2.08 DGD-802 CORE Fixed reflection of protected or static methods declared in super classes. 8.2.08 DGD-720 CORE Added support for Apk Signature Scheme v3 and certificate rotation, with a new option <code>-certificatelineage</code>. 8.2.07 DGD-811 CORE Generated consumer rules that are specific to DexGuard are now written to a separate file inside the AAR, 'dexguard.txt' (next to 'proguard.txt'). 8.2.07 DGD-814 CORE Updated samples to load dependent jars from maven instead of redistributing them. 8.2.07 DGD-807 CORE Fixed issue with resource optimizations when resource IDs are assigned to a long variable. 8.2.07 DGD-813 CORE Improved default configuration wrt generated R classes. 8.2.07 DGD-810 RUNTIME Added RootDetector <code>NO_ROOT_MANAGERS</code> flag to disable scanning for root manager apps. 8.2.07 DGD-489 CORE Added inspection descriptions for Android Studio plugin. 8.2.07 DGD-517 CORE Added inspections group display name for Android Studio plugin. 8.2.07 DGD-800 CORE Added support for ConstraintLayout (resources referenced via the 'constraint_referenced_ids' attribute are now automatically preserved). 8.2.07 DGD-789 CORE Fixed potential verification errors at runtime due to code obfuscation being applied to code attributes. 8.2.06 DGD-788 CORE Fixed Android Studio plugin compatibility with Android Studio v3.1+. 8.2.06 DGD-801 CORE Improved multidex processing including some default rules to ensure that classes matching <code>-keep</code> rules end up in the main dex file. 8.2.06 DGD-794 CORE Fixed injection of decryption code for non-encrypted resources when using <code>-encryptresources</code>. 8.2.05 DGD-765 CORE Completed fix for incorrect switch-case statements when applying resource optimizations. 8.2.05 CORE Fixed default settings of <code>dexguard-transform</code> plugin to be compatible with InstantRun. 8.2.05 GRADLE Updated the gradle plugin to support the Android gradle plugin version 3.2.0-beta01. 8.2.05 DGD-792 GRADLE Fixed issue in the gradle plugin where interactions with some versions of some plugins could cause missing Java resources in the resulting apk. 8.2.04 DGD-775 CORE Fixed keeping of onClick handlers defined for <code>MenuItem</code> elements in resource xml files 8.2.03 DGD-783 CORE Fixed apk processing when encountering methods whose code exceeds the 64k limit. 8.2.03 DGD-548 CORE Fixed option <code>-adaptclassstrings</code> if no additional filter is provided. 8.2.03 DGD-742 GRADLE Added support for the Android gradle plugin version 3.2.0-alpha18. 8.2.02 CORE Improved Instant App partitioning. 8.2.02 CORE Added build-time notes and suggestions on Instant App partitioning. 8.2.02 DGD-772 CORE Improved automatic handling of native Facebook libraries. 8.2.02 DGD-768 CORE Fixed NullPointerException during build when specifying -dontobfuscate and -printresourceencryption. 8.2.02 DGD-767 CORE Fixed Resources$NotFoundExceptions when applying resource optimizations. 8.2.02 DGD-765 CORE Fixed incorrect switch-case statements when applying resource optimizations (fixes support for the Android Data Binding framework). 8.2.02 DGD-697 GRADLE Updated the gradle plugin to exclude an additional libraryJar added in the Android gradle plugin version 3.1 that caused duplicate class warnings. 8.2.02 DGD-690 GRADLE Fixed warning caused by the gradle plugin due to using deprecated gradle features. 8.2.02 DGD-770 CORE Fixed processing of obfuscated native libraries. 8.2.02 DGD-769 GRADLE Fixed regression in the gradle plugin where local Java project dependencies caused a build error. 8.2.01 DGD-766 CORE Added support for encrypting strings that refer to obfuscated classes or class members (via -accessthroughreflection,encryptstrings). 8.2.00 DGD-192 CORE Introduced <code>lib/dexguard-nativeloader.aar</code> which if included into the project will provide a more secure way of loading encrypted native libraries. 8.2.00 CORE Added the possibility to encrypt the dependencies of encrypted native libraries without adding additional <code>System.loadLibrary(string)</code> calls. 8.2.00 DGD-672 CORE Updated hashing algorithm of SSLPinning and CertificateChecker from MD5 to SHA-256. 8.2.00 CORE Improved configuration for libGDX. 8.2.00 DGD-286 CORE Improved name obfuscation of encrypted native libraries. 8.2.00 DGD-592 CORE Added fallback mechanism to use D8 (version 1.1.11) from Android SDK for class conversion. 8.2.00 CORE The name of the 'extractNativeLibs' XML attribute in the AndroidManifest.xml is now kept by default (fixes the setting being ignored at runtime). 8.2.00 DGD-138 CORE Disabled optimization <code>code/allocation/variable</code> in the default library release configuration. 8.2.00 DGD-662 CORE Native library dependencies referenced only from other native libraries are now automatically kept. 8.2.00 DGD-541 CORE Removed class <code>com.guardsquare.dexguard.runtime.net.SimpleSSLPinningWebViewClient</code> from the DexGuard runtime library. 8.2.00 DGD-509 CORE Added new option <code>-performanceprofile</code> to optimize app startup performance, based on an hprof file. 8.2.00 DGD-352 CORE Added new option <code>-printlibraryconfiguration</code> for generating an output configuration for library projects requiring additional processing. 8.2.00 DGD-612 GRADLE Added gradle plugin <code>dexguard-transform</code> which provides various features also in non-DexGuard enabled builds (e.g. with active InstantRun). 8.2.00 DGD-197 GRADLE Added gradle plugin <code>dexguard-versioncheck</code> which checks if a more recent DexGuard version is available. 8.2.00 DGD-202 CORE Added support for <code>Javascript obfuscation</code> plugins. Included sample for Cordova and React Native under <code>samples/advanced/Javascript</code>. 8.2.00 DGD-137 CORE Processed native libraries are now stripped more aggressively. 8.2.00 DGD-688 CORE Added support for backporting the Java 8 time API using the threetenbp library (see also sample basic/TimeAPI). 8.2.00 DGD-165 CORE Added support for backporting the Java 8 stream API using the streamsupport library (see also sample basic/StreamSupport). 8.2.00 DGD-579 RUNTIME Improved hook detection for stripped libraries. 8.2.00 DGD-617 RUNTIME Improved hook detection to more reliably detect various known hooking frameworks. 8.2.00 DGD-281 CORE Added section explaining the various default configurations to the manual. 8.2.00 DGD-385 RUNTIME Improved SSL pinning support of the DexGuard runtime library (added hardened class SSLPinner, updated samples). 8.2.00 DGD-572 CORE Added sample 'advanced/Crashlytics' to use the Crashlytics library for Java and native crash reporting. 8.2.00 DGD-523 CORE Updated sample 'advanced/IOCipher' to use latest IOCipher release 0.4. 8.2.00 DGD-395 CORE Improved default configuration for the Facebook Conceal library v2.0+. 8.2.00 DGD-574 CORE Updated sample 'advanced/Conceal' to use latest conceal release v2.0.2. 8.2.00 DGD-569 CORE Updated dx tool as fallback mechanism for class conversion to version 27.0.3. 8.2.00 DGD-387 CORE Added new option <code>-keepcode</code> for keeping code attributes. 8.2.00 DGD-102 RUNTIME Added file-level tamper detection. <p>Upgrade considerations:</p> <ul> <li>Additional file <code>lib/dexguard-java8.jar</code> has been removed as it was only needed as a workaround for Android gradle   plugin versions [2.1.0, 2.2.0-alpha5]. You should remove the following line <code>classpath ':dexguard-java8:'</code>   from your <code>build.gradle</code> file and update to a more recent version of the Android gradle plugin.</li> <li>Class <code>com.guardsquare.dexguard.runtime.net.SimpleSSLPinningWebViewClient</code> has been removed from the DexGuard runtime library,   and should be replaced by <code>com.guardsquare.dexguard.runtime.net.SSLPinningWebViewClient</code>.</li> <li>Certificate hashes for SSL pinning and the CertificateChecker now need to be generated with SHA-256. MD5 certificate   hashes are no longer valid for SSL pinning and deprecated for certificate checking.</li> <li>Added the <code>lib/dexguard-nativeloader.aar</code> which provides a more secure way to load encrypted native libraries if it is included as a dependency into your project.</li> <li>Due to changes in the internals of the Android OS, resource encryption is no longer supported as of Android P.   Resource encryption will therefore automatically be disabled as of DexGuard 8.2.08 if the maxSdkVersion   attribute is not present in the Android Manifest, or if it is set to 28 or higher.</li> </ul>"},{"location":"about/releasenotes.html#version-81-dec-2017","title":"Version 8.1 Dec 2017","text":"<ul> <li> <p>Code packing. DexGuard could already encrypt specified sensitive classes.   It can now also efficiently encrypt all combined bytecode as an additional   layer of protection.</p> </li> <li> <p>Android Studio plugin. The DexGuard plugin for Android Studio provides   syntax highlighting, auto-completion, and highlighting of potentially   suboptimal or erroneous configuration.</p> </li> <li> <p>Hook detection. The DexGuard runtime SDK now also provides hook   detection, for frameworks like Xposed and Substrate.</p> </li> <li> <p>Instant Instant Apps. DexGuard can now automatically create Instant Apps   from traditional installed app projects, without requiring you to manually   refactor your code or restructure your projects. Reduce the conversion time   from weeks to minutes!</p> </li> </ul> Version Issue Module Explanation 8.1.23 DGD-796 CORE Reverted accidental fix for DGD-687 when processing apk files. 8.1.23 RUNTIME Fixed potential crashes when using the hook detection. 8.1.23 GRADLE Fixed regression in the gradle plugin where consumer proguard files in recursive local module dependencies weren't picked up. 8.1.22 DGD-791 SK-ADDON Fixed potential IllegalStateException when detaching the secure keyboard from a layout. 8.1.22 CORE Fixed potential IllegalAccessError when backporting static interface methods. 8.1.21 DGD-787 CORE Fixed issue where local file dependencies cause an ArrayIndexOutOfBoundsException when gathering consumer Proguard files. 8.1.20 DGD-782 GRADLE Fixed issue in the gradle plugin where trying to collect the consumer proguard files of dependencies also ended up downloading the sources of these dependencies. 8.1.20 DGD-786 GRADLE Fixed issue in the gradle plugin where the classes of submodule projects ended up in the libraryJars when building on Windows, causing them to be missing at runtime. 8.1.20 SK-ADDON Fixed processing of the SecureKeyboard addon after change DGD-744. 8.1.20 DGD-777 GRADLE Made the gradle plugin more robust with regards to collecting consumer Proguard rules. 8.1.20 DGD-713 GRADLE Fixed issue in the gradle plugin where dependencies declared as <code>compileOnly</code> were picked up incorrectly and ended up in the apk. 8.1.19 CORE Added default configuration for the IBM MobileFirst library. 8.1.19 DGD-760 CORE Improved default configuration for the Firebase libraries. 8.1.19 DGD-753 GRADLE Fixed issue in the gradle plugin where resources and the Android manifest weren't picked up when using multiple flavor dimensions in combination with splits. 8.1.19 DGD-708 RUNTIME Improved performance of hook detection. 8.1.19 DGD-752 GRADLE Fixed regression in the gradle plugin where the mapping file wasn't set properly when using gradle 4.1+. 8.1.18 DGD-751 WB-ADDON Improved default obfuscation of the whitebox cryptography code. 8.1.17 DGD-744 CORE Ensured that classes of the DexGuard runtime library can be properly obfuscated, regardless of user-defined rules. 8.1.17 DGD-747 GRADLE Fixed issue in the gradle plugin where consumer proguard files from transient dependencies might not be picked up. 8.1.17 DGD-730 CORE Fixed native library encryption on Android P when <code>targetSdkVersion &gt; 24</code>. 8.1.17 DGD-725 CORE Fixed potential IllegalArgumentException when simplifying null enum values. 8.1.17 PGD-701 CORE Fixed potential VerifyError in the presence of branches to instruction offset 0. 8.1.16 DGD-698 GRADLE Fixed regression in the gradle plugin where when including a local java project as a dependency an exception was thrown at build time claiming the jar could not be found. 8.1.16 DGD-687 CORE Fixed processing of apk files that perform exception handling involving class constants. 8.1.16 CORE Fixed multidex partitioning if more than 10 dex files are needed. 8.1.16 DGD-684 GRADLE Fixed regression in the gradle plugin where apk post-processing was broken. 8.1.16 DGD-681 CORE Fixed backporting of lambda functions using the alternative factory method. 8.1.15 DGD-674 CORE Fixed obfuscation of custom classnames in some resource XML files (related to <code>PreferenceScreen</code> configurations). 8.1.15 PGD-699 CORE Fixed obfuscation of closures that implement multiple interfaces. 8.1.15 DGD-676 GRADLE Fixed issue with the gradle plugin where resources in dependency jar files were not present in the resulting apk when using the Android gradle plugin version 3.1. 8.1.15 DGD-673 CORE Invalid use of generics in a class specification now results in a ParseException. 8.1.15 DGD-668 GRADLE Fixed regression where a warning appeared about duplicate AndroidManifest.xml files when using the Android gradle plugin version 2.3 or lower. 8.1.15 PGD-694 CORE Fixed classes prefix when writing output to directories. 8.1.14 DGD-670 CORE Duplicate resource files are now processed in a pick-first logic. 8.1.13 DGD-640 GRADLE Fixed issue when using DexGuard with the Android gradle plugin v3.1 on a library project where some files were misplaced in the aar. 8.1.12 PGD-186 CORE Added support for Java 10. 8.1.12 DGD-637 GRADLE Updated the gradle plugin to fully support the Android gradle plugin version 3.1. 8.1.12 PGD-698 CORE Fixed possible NullPointerException when parsing configuration. 8.1.12 PGD-693 CORE Fixed obfuscation of closures for functional interfaces with default methods. 8.1.12 CORE Improved default configuration for the Retrofit/RetroFit2 libraries. 8.1.12 DGD-618 CORE Fixed NullPointerException during build if <code>-obfuscatecode</code> was used with a field specification. 8.1.12 PGD-655 CORE Fixed access from static methods to protected methods in superclasses. 8.1.11 DGD-616 CORE Fixed potential 'VerifyError' at runtime when applying code obfuscation to methods with boolean variables. 8.1.11 DGD-609 CORE Now silently ignoring type annotations (unsupported by the Dalvik VM) instead of throwing an UnsupportedOperationException. 8.1.11 DGD-611 GRADLE The gradle plugin now throws an exception when building variants without DexGuard while using the Android gradle plugin v3.0 and Java8 instead of issuing a warning and creating an invalid apk. 8.1.11 DGD-607 CORE Fixed encryption of native libraries that are loaded via System.loadLibrary(String) with a non-constant String argument. 8.1.11 DGD-606 GRADLE Fixed gradle plugin to automatically output encryption mapping information also in library projects. 8.1.11 DGD-605 CORE Added troubleshooting entry for publishing Android applications to AirWatch. 8.1.11 DGD-604 CORE Fixed use of 'com.guardsquare.dexguard.runtime.net.SSLPinningWebViewClient' on older Android devices (&lt; 5.0). 8.1.11 DGD-604 CORE Specify minSdkVersion of '11' for DexGuard runtime library (= Android 3.0 Honeycomb). 8.1.11 DGD-600 SK-ADDON Fixed SecureKeyboardVisibilityListener to return correct visibility on custom 'onBackPressed' event. 8.1.11 CORE Improved default configuration for the Glide library. 8.1.11 DGD-554 SK-ADDON Fixed crash for targetSdk 26 or higher caused by depecrated window types. 8.1.11 DGD-596 CORE Improved default configuration for the CrossWalk/XWalk library. 8.1.11 DGD-597 CORE Improved default configuration for classes extending 'android.view.ActionProvider'. 8.1.10 DGD-595 GRADLE Fixed issue with the gradle plugin where class input wasn't collected when a transform task with multiple class inputs was used. 8.1.10 DGD-594 CORE Added classname filter for mappings loaded via rule '-applymapping'. 8.1.10 DGD-561 CORE Prevent inlining of methods that assign final fields. 8.1.10 DGD-466 CORE Fixed conversion of invocation instructions using range parameters. 8.1.10 DGD-567 CORE Fixed enum unboxing for already obfuscated code. 8.1.09 DGD-588 RUNTIME Fixed false positives for hook detection on armeabi architecture. 8.1.09 DGD-587 CORE Fixed potential NullPointerException at runtime when encrypting strings in classes that extend 'android.content.Context'. 8.1.09 DGD-584 CORE Fixed trimming of strings with control characters in certificates. 8.1.08 DGD-568 GRADLE Fixed issue with the gradle plugin where transformed dependencies were included twice in the DexGuard input. 8.1.08 DGD-577 CORE Fixed potential ClassCastException when encrypting Strings that refer to program classes or program class members. 8.1.08 DGD-480 WB-ADDON Added support for whitebox cryptography in library projects. 8.1.08 DGD-409 WB-ADDON Fixed Android boot loop when using whitebox cryptography on old versions (&lt; 5.0) of Android. 8.1.08 PGD-688 CORE Fixed method type annotations triggering UnsupportedOperationException in optimization pass. 8.1.08 DGD-575 CORE Fixed samples 'basic/AssetEncryptionLibrary' and 'basic/NativeLibraryInLibraryProject'. 8.1.08 DGD-576 CORE Fixed sample 'basic/InstantApp'. 8.1.08 DGD-570 CORE Fixed class conversion using the dx tool in combination with class encryption. 8.1.08 DGD-533 GRADLE Fixed disabling DexGuard for some build types when using Java8 in gradle plugin (requires Android gradle plugin v3.1.0-beta3+). 8.1.08 DGD-154 CORE Added warning when encrypting outer classes without encrypting their inner classes. 8.1.08 DGD-565 CORE Fixed reporting of reason why a class has been kept when using option <code>-whyareyoukeeping</code>. 8.1.08 DGD-564 CORE Fixed backporting of method references to private constructors. 8.1.07 DGD-481 CORE Fixed optimization of instructions potentially causing unexpected error while processing. 8.1.07 DGD-562 CORE Fixed conversion of invalid invoke instructions. 8.1.07 CORE Fixed preverification support for Android library projects. 8.1.07 DGD-84 CORE Fixed parsing of class specifications that contain comments in their member specification. 8.1.07 DGD-556 CORE Fixed regression where consumerProguardFiles weren't picked up from local library project dependencies. 8.1.07 DGD-559 GRADLE Fixed issue with the gradle plugin when using an older version of the Android Gradle plugin together with local file dependencies. 8.1.07 DGD-558 CORE Adding preverification information to Java classes in libraries. 8.1.06 CORE Improved default configuration for library projects that use the DexGuard runtime library. 8.1.06 PGD-662 CORE Fixed obfuscation causing clashing private and default method names. 8.1.06 PGD-654 CORE Fixed processing of MethodParameters attributes with nameless parameters. 8.1.06 DGD-552 CORE Fixed calculation of statistics for generalized field accesses during optimization. 8.1.06 RUNTIME Improved root detection. 8.1.06 DGD-551 RUNTIME Fixed false positives in hook detection. 8.1.06 DGD-160 CORE Added troubleshooting entry for using <code>-accessthroughreflection</code>. 8.1.06 DGD-547 CORE Fixed packaging of local file dependencies in AAR's. 8.1.06 PGD-684 CORE Fixed obfuscation of extensions of functional interfaces that are implemented with closures. 8.1.06 PGD-681 CORE Fixed potential IllegalArgumentException in simplification of tail recursion. 8.1.06 DGD-523 CORE Updated SQLCipher sample to use latest sqlcipher library for android. 8.1.06 DGD-546 CORE Fixed regression potentially causing IllegalStateException while backporting code. 8.1.06 GRADLE Added warning when the <code>minifyEnabled true</code>, <code>shrinkResources true</code> and/or <code>multiDexEnabled true</code> options are used in the build.gradle file. 8.1.06 DGD-544 CORE Fixed automatic handling of reflection with known names on inaccessible fields and methods. 8.1.05 DGD-531 CORE Fixed possible unexpected error (IllegalStateException: Variable too large for instruction new-array) in conversion to Dalvik code. 8.1.05 DGD-516 CORE Fixed samples basic/SSLPinning and basic/SSLPinningWebView. 8.1.05 DGD-476 CORE Fixed issue with asset encryption causing ArrayIndexOutOfBoundsException at build time. 8.1.05 DGD-540 CORE Fixed issue where building a variant with a dependency on a different variant of another project resulted in an apk without a classes.dex. 8.1.05 DGD-524 CORE Fixed sample advanced/Kotlin. 8.1.04 DGD-539 CORE Fixed regression where certain resources weren't detected when product flavors where used resulting in a NullPointerException. 8.1.04 CORE Fixed issue with code obfuscation on older Android devices which might result in crashes of the JIT compiler. 8.1.02 DGD-538 GRADLE Fixed issue with the gradle plugin where the same AndroidManifest.xml was used for all outputs when using the splits option in gradle. 8.1.02 DGD-537 CORE Fixed issue were font families defined in xml files were obfuscated incorrectly. 8.1.02 DGD-535 CORE Fixed conversion to Dalvik bytecode potentially causing VerifyError for allocated registers. 8.1.01 DGD-534 CORE Fixed code obfuscation potentially triggering infinite loop at build time. 8.1.01 CORE Improved vertical class merging. 8.1.01 DGD-530 CORE Fixed memory leak writing compressed zip entries. 8.1.00 CORE Added Android Studio plugin 8.1.00 DGD-394 CORE The names of classes that are passed as arguments to the android.content.ComponentName class are now kept. 8.1.00 DGD-181 CORE Added new <code>encryptstrings</code> modifier for the <code>-accessthroughreflection</code> option, to encrypt all strings that are created for the reflection. 8.1.00 DGD-410 RUNTIME Added hook detection to runtime SDK. 8.1.00 DGD-290 CORE Added new option <code>-pack</code> for packing Android apps. 8.1.00 DGD-477 CORE Added support for the font resource type. 8.1.00 DGD-411 CORE Added new option <code>-instantappfeature</code> for automatically creating Instant Apps. 8.1.00 CORE Added new option <code>-if</code> to allow conditional rules. 8.1.00 CORE Added support for wildcard references in options. 8.1.00 GRADLE Added support for multiDexKeepFile option in gradle. 8.1.00 GRADLE Added support for multiDexKeepProguard option in gradle. 8.1.00 CORE Added support for allowmultidex option in keep rules. 8.1.00 SK-ADDON Added a listener for the visibility of the secure keyboard. 8.1.00 SK-ADDON Added customization options for the secure keyboard. 8.1.00 DGD-473 CORE Fixed possible NullPointerException when backporting closures. <p>Upgrade considerations:</p> <ul> <li>The options <code>-printassetmapping</code>, <code>-printresourcemapping</code>, and   <code>-printnativelibrarymapping</code> have been combined into a new option   <code>-printresourcefilenamemapping</code>, which writes out a single mapping file for   all resource file names.</li> <li>Runtime method <code>RootDetector.isDeviceRooted</code> now requires an additional <code>Context</code> argument.</li> </ul>"},{"location":"about/releasenotes.html#version-80-may-2017","title":"Version 8.0 May 2017","text":"<ul> <li> <p>Annotation-based configuration. You can now specify configuration   directly in the source code using annotations. These configurations are   complementary to the existing rules in configuration files such as   dexguard-project.txt.</p> </li> <li> <p>Encryption of resource strings and metadata strings. New configuration   options support the encryption of resource strings and meta-data values.</p> </li> <li> <p>Improved support for asset and native library encryption. DexGuard can   now encrypt asset files and native libraries that are loaded via a variable   string, dependent native libraries and native libraries loaded via JNA.</p> </li> <li> <p>Improved statistics and logging. New settings have been added to display   detailed statistics on package level as well as details about encrypted   content (strings, classes,...)</p> </li> </ul> Version Issue Module Explanation 8.0.24 DGD-536 CORE Fixed regression where the AndroidManifest.xml was incomplete for library projects. 8.0.24 DGD-529 CORE Fixed regression where the splits option wouldn't generate different apks. 8.0.23 DGD-527 GRADLE Fixed problem with Kotlin kapt plugin where the gradle plugin would throw an exception. 8.0.23 DGD-526 GRADLE Fixed regression with Android gradle plugin v2.1 and older. 8.0.22 DGD-423 CORE Extended handling of strings whose stored lengths have overflowed in resource files. 8.0.21 DGD-514 CORE Added system properties 'encode.resourcexml.utf16' and 'encode.resourcetable.utf16' as a workaround for system crashes on selected devices. 8.0.20 DGD-511 GRADLE Fixed issue with the gradle plugin where only 1 apk generated with the splits option had a classes.dex file. 8.0.20 DGD-508 CORE Fixed regression, workaround for bug in Android 4.1 and older segfaulting on null parameter annotation sets. 8.0.20 DGD-505 CORE Fixed incorrect generalization of fields with identical names in the class hierarchy. 8.0.19 DGD-486 CORE Fixed potential VerifyError when generalizing classes of method invocations that are not available on all platform versions. 8.0.18 DGD-484 CORE Fixed issue where debug dex tasks would crash due to method ID overflow even though Dexguard handles multidexing. 8.0.18 DGD-488 GRADLE Fixed issue where the AndroidManifest.xml wasn't included in Android libraries when using Android gradle plugin v3.0. 8.0.18 DGD-487 GRADLE Updated the gradle plugin to support the Android gradle plugin v3.1.0-alpha02. 8.0.18 DGD-485 WB-ADDON Fixed NullPointerException when building whitebox cryptography apps in debug mode. 8.0.18 DGD-479 CORE Whitebox encryption options are now included when printing configurations. 8.0.17 GRADLE Tuned the gradle plugin Java8 handling. 8.0.16 DGD-475 CORE Fixed class encryption performance regression. Code obfuscation is now disabled for encrypted classes by default. You can still enable it using -obfuscatecode. 8.0.15 CORE Improved class encryption performance. 8.0.15 GRADLE Added support for gradle version 4.3-rc-1. 8.0.14 DGD-469 CORE Added default keep rules for the Android animation resources support library. 8.0.14 CORE Fixed regression where dex files were missing from build output of variants not using Dexguard. 8.0.12 DGD-468 GRADLE Fixed kotlin classes not being included in resulting apk when using the DexGuard gradle plugin and the Android gradle plugin version 3.0. 8.0.12 DGD-464 GRADLE Different splits now generate different mapping files in the gradle plugin. 8.0.12 DGD-467 GRADLE Fixed setting of mapping file in gradle plugin. 8.0.11 DGD-463 CORE Fixed crash when using Java8 features in debug builds. 8.0.11 DGD-461 GRADLE Fixed apk processing feature in gradle plugin. 8.0.11 DGD-460 CORE Fixed compatibility issue with Crashlytics. 8.0.11 DGD-453 CORE Added class whitelist to the member specializer. 8.0.11 DGD-465 RUNTIME Fixed runtime exception in root detection on Galaxy Tab3 with Android 4.0.3. 8.0.11 DGD-462 CORE Fixed incorrect array optimization when processing already obfuscated code. 8.0.11 DGD-459 CORE Fixed conversion of conditional jumps. 8.0.10 DGD-412 GRADLE Updated gradle plugin for compatibility with Android gradle plugin versions 2.4 and 3.0. 8.0.10 DGD-454 CORE Injected code no longer relies on the Android Crypto provider. 8.0.10 DGD-451 CORE Fixed jar signing with certificates with distinguished names with non-ASCII characters. 8.0.09 DGD-449 CORE Fixed jar signing with certificates with distinguished names with quoted attribute values. 8.0.09 DGD-448 CORE Fixed jar signing with certificates that are not self-signed. 8.0.09 DGD-447 CORE Fixed potential IOException/IndexOutOfBoundsException when processing native libraries. 8.0.08 DGD-446 WB-ADDON Fixed configuration parsing error when using the AES whitebox encryption algorithm in CBC mode. 8.0.08 DGD-442 CORE Fixed potential build error while performing code obfuscation. 8.0.08 DGD-445 CORE Fixed IllegalAccessError when loading encrypted resources on Android 7.0. 8.0.08 DGD-443 CORE Fixed filtering of native libraries from jar files to split apk files. 8.0.07 DGD-441 CORE Reduced runtime memory usage of resource decryption. 8.0.06 DGD-438 CORE Updated dictionaries to avoid characters causing ANR's on some Samsung devices. 8.0.05 DGD-435 CORE Fixed unclosed inputstreams of non-encrypted resource XML's. 8.0.05 DGD-433 CORE Added support for adaptive icons in Android O. 8.0.05 DGD-429 CORE Fixed build error when adding configuration debugging on classes that load resources. 8.0.05 DGD-428 CORE Now ignoring classes in the default package when adapting resource filenames. 8.0.05 SK-ADDON Added an API method to detach the keyboard. 8.0.05 DGD-427 SK-ADDON Fixed issues with secure keyboard being attached to an AlertDialog. 8.0.05 DGD-426 SK-ADDON Fixed secure keyboard overriding the edit text's gravity. 8.0.05 DGD-425 SK-ADDON Added an API method to attach listeners in addition to the secure keyboard's listeners. 8.0.05 DGD-340 SK-ADDON Added an API method to get the height of the secure keyboard. 8.0.05 CORE Updated configuration for the Glide library. 8.0.04 DGD-423 CORE Now handling resource strings whose stored lengths have overflowed in the resource files. 8.0.04 DGD-422 CORE Fixed inlining of boolean metadata into code. 8.0.03 DGD-421 CORE Fixed potential IllegalStateException (variable too large) during conversion to Dalvik bytecode. 8.0.02 DGD-420 CORE Fixed potential ClassCastException in optimization step. 8.0.02 DGD-419 CORE Fixed potential VerifyError when applying encryption in classes with multiple constructors. 8.0.01 CORE Improved default configuration for the Kotlin runtime. 8.0.01 DGD-416 CORE Fixed apk signing when certificate specifies optional email address. 8.0.01 CORE Extended default regular expression of ReTrace. 8.0.00 DGD-405 CORE Fixed potential ArrayIndexOutOfBoundsException in the optimization step. 8.0.00 GRADLE Updated sample Gradle build files to recent Android tools. 8.0.00 DGD-404 CORE Added support for null chunks in resource tables. 8.0.00 DGD-403 CORE Only merging classes with equal class versions. 8.0.00 DGD-402 CORE Fixed potentially incorrect stack sizes when enabling configuration debugging. 8.0.00 DGD-401 CORE Fixed class unwrapping optimization for unusual instantiation code. 8.0.00 DGD-400 CORE Fixed parsing of unsorted styles in string pools. 8.0.00 DGD-398 CORE Improved storage of strings in resource files. 8.0.00 CORE String references are now supported as metadata key names in the Android Manifest. 8.0.00 DGD-294 CORE Added support to print extended statistics with option <code>-printstatistics</code>. 8.0.00 DGD-393 CORE Updated obfuscation dictionaries to avoid characters confusing the Android runtime on some devices. 8.0.00 CORE Improved default configuration for Android support libraries. 8.0.00 DGD-320 CORE Unused string constants matched by an <code>-encryptstrings</code> rule are not encrypted anymore. 8.0.00 DGD-320 CORE The <code>-keep</code> modifier <code>includecode</code> now also prevents string encryption from being applied on matching methods. 8.0.00 DGD-287 CORE Added support to print native library encryption details with option <code>-printnativelibraryencryption</code>. 8.0.00 DGD-287 CORE Added support to print resource encryption details with option <code>-printresourceencryption</code>. 8.0.00 DGD-287 CORE Added support to print asset encryption details with option <code>-printassetencryption</code>. 8.0.00 DGD-287 CORE Added support to print string encryption details with option <code>-printstringencryption</code>. 8.0.00 DGD-287 CORE Added support to print class encryption details with option <code>-printclassencryption</code>. 8.0.00 DGD-256 CORE Improved protection of encrypted classes. 8.0.00 CORE Updated Realm sample to use realm v2.3.2. 8.0.00 DGD-380 GRADLE The Gradle plugin will now automatically generate mapping files in Android Library projects. 8.0.00 DGD-382 GRADLE Improve build time for projects with many product flavors in Gradle plugin. 8.0.00 DGD-353 GRADLE Added support to backport Java 8 language features for instrumentation tests in Gradle plugin. 8.0.00 CORE Unparsed data at the end of resource table chunks are now preserved during processing. 8.0.00 DGD-374 CORE Added support for the resource table library (0x203) chunk type. 8.0.00 DGD-378 CORE Fixed utf8 encoding of resource strings with length &gt;= 128. 8.0.00 DGD-179 CORE Added annotations for <code>-obfuscatecode</code> rules. 8.0.00 DGD-320 CORE The <code>-keep</code> modifier <code>includecode</code> now also prevents code obfuscation and reflection from being applied on matching methods. 8.0.00 DGD-363 CORE Added support to encrypt also dependent native libraries (see SQLCipher sample) which did not work on Android versions &lt; 6.0. 8.0.00 DGD-341 CORE Reduced size of resource table (resources.arsc) in Android application projects. 8.0.00 CORE Added optimizations <code>code/simplification/object</code> for primitive boxing and other object instantiation. 8.0.00 DGD-359 CORE Updated default configuration to keep EnclosingMethod attributes by default. 8.0.00 DGD-357 CORE Fixed potential build error when obfuscating the JNI interface of native libraries (Error string: New string section exceeds the length of the original). 8.0.00 DGD-239 CORE Added sample advanced/JNA. 8.0.00 DGD-239 CORE Added support to obfuscate the file names of native libraries accessed via JNA (using Native.loadLibrary(\"name\", Class)). 8.0.00 DGD-239 CORE Improved default configuration for using the JNA library. 8.0.00 DGD-289 CORE Reduced injected code for encrypted strings that occur more than once in a method. 8.0.00 DGD-354 CORE Improved processing speed of classes containing large arrays (e.g. classes with encrypted strings). 8.0.00 DGD-253 CORE Reduced visibility of encrypted class loading. 8.0.00 DGD-322 CORE Fixed potential problem with conversion of primitive arrays when processing apk files. 8.0.00 DGD-58 CORE Added support for fall-back license files <code>dexguard-license2.txt</code>, etc. 8.0.00 DGD-336 CORE Fixed potential warnings about unnatural loops when processing obfuscated dex files with <code>dex2oat</code>. 8.0.00 RUNTIME Fixed false-positives for root detection. 8.0.00 DGD-325 GRADLE Added instructions how to upload the DexGuard Gradle plugin to a Maven repository. 8.0.00 DGD-273 CORE Random variation is now affected by additional attributes in the Android manifest (packageName, versionCode, versionName). 8.0.00 CORE Fixed null handling in string peephole optimization. 8.0.00 CORE Added sample for the NewRelic analytics library. 8.0.00 DGD-323 CORE Added support to parse url parameters provided to <code>-include</code> and <code>-xxxdictionary</code> rules. 8.0.00 DGD-321 CORE Added support for <code>extractNativeLibs</code> attribute in AndroidManifest.xml. 8.0.00 DGD-291 CORE Improved code obfuscation for simple methods. 8.0.00 DGD-282 GRADLE Fixed detection of configuration changes for incremental builds in Gradle plugin. 8.0.00 DGD-300 CORE Added default configuration for the Facebook Fresco library. 8.0.00 DGD-303 CORE Native libraries whose native methods are being kept are kept as well. 8.0.00 CORE Added default configuration for the OkHttp library. 8.0.00 CORE Added default configuration for the Otto library. 8.0.00 DGD-313 CORE Added optimization <code>class/merging/wrapper</code> to merge wrapper classes with their wrapped classes. 8.0.00 DGD-198 CORE Added optimizations <code>field/generalization/class</code> and <code>method/generalization/class</code> to generalize the classes in field accesses and member invocations. 8.0.00 DGD-285 CORE Added support for encryption of native libraries that are loaded via System.loadLibrary using a variable string argument. 8.0.00 DGD-254 CORE Added support for encryption of assets that are loaded via the AssetManager using a variable string argument. 8.0.00 DGD-193 CORE Added new option -encryptresources for encrypting resource strings. 8.0.00 DGD-312 CORE Added new option -encryptmetadata for encrypting Android Manifest metadata. 8.0.00 DGD-309 CORE Avoiding incompatible class version numbers when merging classes. 8.0.00 DGD-308 CORE Improved shrinking of interface declarations. 8.0.00 DGD-296 GRADLE Changed <code>consumerRuleFilter</code> in Gradle plugin to filter on artifacts (Maven coordinates) rather than file names. 8.0.00 DGD-211 GRADLE Added additional <code>tasks</code> in Gradle plugin to list/collect all consumer ProGuard rules. 8.0.00 CORE Added verbose statistics for inlined meta-data elements. 8.0.00 DGD-179 CORE Added sample basic/Annotations. 8.0.00 DGD-179 CORE Updated configuration to support ProGuard/DexGuard annotations. 8.0.00 DGD-179 CORE Added lib/dexguard-annotations.jar, containing annotations for <code>-keep</code>, <code>-encryptclasses</code> and <code>-encryptstrings</code> rules. 8.0.00 DGD-179 CORE Improved support for annotation-based configurations (annotation types don't have to be kept explicitly anymore). 8.0.00 DGD-302 CORE No longer using internal com.sun API to sign apk files. 8.0.00 DGD-229 CORE Added support for APK signature scheme v2. 8.0.00 DGD-260 CORE Changed loading of default configurations in the Ant plugin to be consistent with other plugins (see upgrade consideration below). 8.0.00 DGD-278 CORE Added fallback mechanism to use dx tool from Android SDK for class conversion. 8.0.00 DGD-111 CORE Added support to include consumer Proguard files from AAR dependencies in Maven plugin. 8.0.00 DGD-111 CORE Updated Maven plugin for Android Maven plugin version 4.4.3. 8.0.00 DGD-183 CORE Added support for custom drawable classes in XML resources. <p>Upgrade considerations:</p> <ul> <li>The contents of the folder <code>extras/annotations</code> have migrated to the following locations:<ul> <li><code>lib/annotations.jar</code> has moved to <code>lib/dexguard-annotations.jar</code></li> <li><code>lib/annotations.pro</code> has been integrated into the default configuration</li> <li><code>examples</code> has been replaced by <code>samples/basic/Annotations</code></li> </ul> </li> <li>Default configuration and dictionary files have been removed from <code>lib</code> folder in the DexGuard distribution.   The Ant plugin will now load default configurations directly from <code>dexguard.jar</code> similar to other plugins   (Gradle, Maven, Eclipse). The file <code>ant/custom_rules.xml</code> has been updated and needs to be copied to the main   directory of your Android project. For stand-alone processing, default configurations should be included using   their resource path, e.g.: <code>-include /lib/dexguard-release.pro</code>.</li> <li>The <code>consumerRuleFilter</code> extension of the Gradle Plugin has   been changed to filter on Maven coordinates rather than on file names (necessary due to changes in the Android   gradle plugin 2.3.0).</li> <li>The DexGuard Maven plugin pom descriptor file has been renamed from <code>lib/pom.xml</code> to <code>lib/maven-plugin.xml</code>.</li> <li><code>-encryptassetfiles [file_filter]</code> now encrypts all assets that match the   given file filter - it is no longer limited to files for which a matching   <code>AssetManager.openAsset(fileName)</code> invocation is found in the application.   These file filters may need to be refined, to prevent assets which are read   via other mechanisms from being encrypted.</li> <li><code>-encryptnativelibraries [file_filter]</code> now encrypts all native libraries   that match the given file filter - it is no longer limited to libraries for   which a matching <code>System.loadLibrary(libraryName)</code> invocation is found in the   processed code. These file filters may need to be refined, to prevent libraries   which are read via other mechanisms from being encrypted.</li> </ul>"},{"location":"about/releasenotes.html#version-73-oct-2016","title":"Version 7.3 Oct 2016","text":"Version Issue Module Explanation 7.3.25 DGD-407 CORE Fixed potential IllegalArgumentException due to overflow when writing out library code. 7.3.24 DGD-406 CORE Fixed instrumentation for configuration debugging for System.load. 7.3.23 PGD-641 CORE Fixed possible NullPointerException due to optimized enum types. 7.3.21 DGD-393 CORE Removed some characters from obfuscation dictionaries that resulted in problems on some devices. 7.3.21 DGD-392 CORE Fixed simplification of enum types in invokedynamic calls. 7.3.21 DGD-391 CORE Fixed conversion of method references to constructors with parameters. 7.3.21 CORE Added system property to specify an alternative location to use for native library encryption (useful for system/platform applications). 7.3.20 DGD-388 CORE Fixed processing of NOBITS sections in ELF files. 7.3.19 CORE Fixed unwrapping of exceptions for reflected calls. 7.3.19 DGD-322 CORE Fixed potential problem with conversion of primitive arrays when processing apk files. 7.3.19 DGD-376 GRADLE Fixed problem with latest Android Gradle plugin (v2.3.0) in Android library projects with setting <code>publishNonDefault=false</code>. 7.3.18 CORE Encrypted class data can now be embedded inside classes with a build time flag. 7.3.18 CORE Improved performance of encryption plugins. 7.3.18 DGD-336 CORE Fixed potential warnings about unnatural loops when processing obfuscated dex files with <code>dex2oat</code>. 7.3.18 DGD-368 CORE Fixed possible invalid code when simplifying enum types that are stored in arrays. 7.3.18 CORE DexGuard now terminates when an error occurs during parallel optimization. 7.3.17 GRADLE Disabled execution of DexGuard for instrumented test variants in Gradle plugin. 7.3.17 CORE Updated default configuration to fix broken icons in some stores and devices. 7.3.17 CORE Added Cordova 6.0 sample. 7.3.16 CORE Fixed potential build problem with some encryption plugins (fixed regression in version 7.3.15). 7.3.15 DGD-350 CORE Fixed potential problem with Android library projects using class encryption when processed by standard Android tools (i.e. dx). 7.3.15 DGD-349 CORE Fixed default resource encryption plugins for Android runtimes older than API level 9. 7.3.15 DGD-348 CORE Fixed potential performance problems with certain resource encryption plugins. 7.3.15 DGD-244 CORE Fixed conversion of obfuscated exception handlers. 7.3.15 DGD-335 GRADLE Fixed execution of instrumentation tests that require Java 8 conversion in Gradle plugin. 7.3.15 CORE Improved the default configuration for the Google Play Services library. 7.3.14 DGD-344 CORE Fixed potential verification error on Android devices &lt;= 4.4.x when using class encryption. 7.3.14 DGD-342 CORE Fixed Dex conversion of ternary operators with constructors with many arguments. 7.3.14 DGD-343 CORE Fixed VerifyError triggered by merging classes with shrinking disabled. 7.3.13 CORE Fixed NullPointerException during build when applying class encryption. 7.3.13 DGD-332 CORE Fixed invalid class merging for classes referenced from native libraries. 7.3.13 DGD-330 CORE Android Resources instances now always return an up-to-date Configuration object when resources are encrypted. 7.3.12 CORE Reduced injected code size when applying class encryption in library projects. 7.3.12 CORE For library projects, encrypted class data is now stored in the directory matching the package name of the encrypted class. 7.3.12 CORE Fixed conversion of lambda expressions that access protected methods. 7.3.11 CORE Reduced injected code size when applying encryption in library projects. 7.3.11 DGD-324 CORE Fixed handling of CR characters in dictionary files. 7.3.11 SK-ADDON Fixed a bug in the secure keyboard when moving between fields using the 'Next' button. 7.3.11 DGD-315 SK-ADDON Fixed potential NullPointerException in the secure keyboard. 7.3.11 CORE Fixed conversion of lambda expressions with array type parameters. 7.3.10 DGD-318 CORE Fixed conversion of exception handlers in highly obfuscated code. 7.3.10 DGD-317 CORE Fixed problem with string encryption in code with subroutines. 7.3.10 CORE Reduced injected code size for certain string encryption plugins. 7.3.10 DGD-314 RUNTIME Fixed false positives for root detection. 7.3.10 CORE Fixed conversion of method references to private methods. 7.3.09 CORE Added default configuration for the Glide image loading library. 7.3.09 DGD-279 GRADLE Fixed problem with latest Android Gradle plugin (v2.3.0-beta1+). 7.3.09 DGD-311 CORE Fixed possible access error for obfuscated internal classes on Android 4.4. 7.3.09 DGD-310 CORE Fixed native library encryption for declared target API level 25 or higher. 7.3.09 CORE Updated configuration for the Greenrobot EventBus library. 7.3.08 DGD-306 CORE Fixed NullPointerException when applying both String and Class encryption. 7.3.08 DGD-305 CORE Fixed merging of classes sometimes resulting in final methods being overridden. 7.3.08 DGD-304 CORE Fixed potential bug in class encryption when applying code obfuscation. 7.3.08 CORE Fixed adding reflection during apk processing. 7.3.08 DGD-301 FP-ADDON Fixed uniqueness of hardware-based fingerprints in case of a factory reset. 7.3.07 DGD-297 CORE Fixed native library encryption for Android 2.2 and older. 7.3.07 DGD-298 CORE Reduced injected code size when applying String encryption. 7.3.07 DGD-292 RUNTIME Fixed RootDetector: flag <code>ALLOW\\_CYANOGENMOD</code> implicitly enabled <code>NO\\_CIRCUMSTANTIAL</code> as well. 7.3.07 DGD-295 CORE Fixed default encryption plugins for Android runtimes older than API level 9. 7.3.06 DGD-284 CORE Fixed default assumption for StringBuilder.append(Object). 7.3.06 RUNTIME Restored public constants in RootDetector and EmulatorDetector of the runtime library. 7.3.06 GRADLE Fixed duplicate task names in Gradle plugin when using Android Gradle plugin v2.2.0+. 7.3.06 CORE Added debugging output in case a class cannot be written to the output, e.g. due to overflows. 7.3.06 GRADLE Fixed filtering of consumer ProGuard rules in Gradle plugin on Windows platforms. 7.3.05 DGD-283 CORE Fixed potential method size overflow when applying string encryption on classes with many strings. 7.3.05 DGD-280 CORE Fixed too many false-positive notes about classes/methods/fields potentially being used from native code. 7.3.05 DGD-279 GRADLE Fixed problem with latest Android Gradle plugin (v2.3.0-alpha1+). 7.3.05 GRADLE Fixed problem with missing classes whose names are prefixed by '_' when using Android Gradle plugin v2.2.0+. 7.3.05 GRADLE Reverted previous change for packagingOptions in Gradle plugin, they are now applied again as input filter. 7.3.04 CORE Fixed invalid conversion of float arrays when processing apk files. 7.3.04 DGD-263 GRADLE Fixed support for asset files with zip extension in Gradle plugin in combination with Android Gradle plugin v2.2.0+. 7.3.03 DGD-277 CORE Fixed build error when using a string encryption plugin with a try-catch block in its decryptString method. 7.3.03 GRADLE Fixed backporting of Java 8 language features for Android library projects in Gradle plugin. 7.3.03 DGD-236 GRADLE Fixed resolution of AAR dependencies for Android library projects in Gradle plugin. 7.3.03 DGD-274 CORE Ensure fully deterministic generation of dex files. 7.3.02 DGD-275 CORE Reduced number of injected methods and fields when applying encryption. 7.3.02 DGD-276 CORE Fixed missing obfuscation of injected classes due to custom <code>-keep</code> rules. 7.3.01 CORE Improved performance of pluggable String encryption. 7.3.01 DGD-272 GRADLE Fixed problems with external native builds in Gradle plugin (available since Android gradle plugin v2.2.0). 7.3.01 CORE Fixed support for -dontshrink when using encryption. 7.3.00 DGD-271 CORE Worked around bug in Android 6.0 causing spurious EISDIR error when decrypting encrypted classes. 7.3.00 DGD-220 CORE Added sample for Google Play Services SafetyNet library. 7.3.00 CORE Improve performance of internal pattern matching implementation by avoiding unneeded data copying. 7.3.00 DGD-250 GRADLE Packaging options are now applied as output filter in the Gradle plugin. 7.3.00 DGD-101 FP-ADDON Added device fingerprinting SDK. 7.3.00 DGD-261 CORE Added support for Dex format 037 (Android 7+). 7.3.00 DGD-231 SK-ADDON Added secure keyboard SDK. 7.3.00 CORE Added support for class encryption plugins. 7.3.00 WB-ADDON Added whitebox cryptography SDK for encryption/decryption of dynamic data at runtime. 7.3.00 DGD-242 CORE Added support for resource encryption on Android 7.0+ devices. 7.3.00 CORE Improved debugger detection. 7.3.00 DGD-241 CORE Improved emulator detection. 7.3.00 DGD-33 GRADLE Improved input filters for Gradle, Ant and Maven plugins to avoid including DexGuard related configuration files by mistake. <p>Known issues:</p> <ul> <li>License files located in the same directory as <code>dexguard.jar</code> can not be found anymore when using Gradle 3.1+. Use a different mechanism   to setup your license file as described here.</li> </ul>"},{"location":"about/releasenotes.html#version-72-jun-2016","title":"Version 7.2 Jun 2016","text":"Version Issue Module Explanation 7.2.17 DGD-268 Added system property allow.incomplete.class.hierarchy to avoid warnings \"Can't find common super class\". 7.2.17 Fixed removal of constant value attributes from encrypted string fields that are kept via -keep rules. 7.2.16 DGD-267 Locale script, locale variant and extra screen configuration information in the resource tables are now preserved during processing. 7.2.16 Fixed error when applying encryption with the Eclipse plugin. 7.2.15 DGD-264 Fixed attribute strings of inlined string resources in XML resources. 7.2.15 Fixed conversion of stateless method references that require explicit casting. 7.2.14 Fixed conversion of interface method references. 7.2.14 DGD-262 Added support for AppDynamics instrumentation in Gradle plugin. 7.2.13 DGD-259 Fixed conversion of lambda expressions that access private methods. 7.2.13 DGD-258 Fixed conversion of lambda expressions that might shadow lambda expressions in super classes. 7.2.13 DGD-246 Fixed certificate pinning when used in combination with okhttp3 library. 7.2.12 DGD-237 Fixed pluggable encryption when using -dontshrink. 7.2.12 Added configuration for Facebook SoLoader library. 7.2.12 DGD-235 Fixed conversion of methods that re-use a cat1 parameter for cat2 values. 7.2.11 DGD-230 Fixed problem when encrypting string constants that were not inlined by the Java compiler. 7.2.11 Added default configuration for the Firebase library. 7.2.11 DGD-219 Fixed Dalvik variable allocation for large numbers of variables. 7.2.11 Fixed potential error when trying to export an apk with the Eclipse plugin. 7.2.11 Improved error message when building an Android application without including a default DexGuard configuration. 7.2.10 DGD-213 Added default configuration for the RetroFit2 library. 7.2.10 DGD-213 Added default configuration for the Okhttp3 library. 7.2.10 Added default configuration for the Video Experts Group MediaPlayer SDK. 7.2.10 DGD-212 Fixed backporting of lambda expressions with array types as parameter. 7.2.09 DGD-210 Fixed infinite loop in dexopt for classes with many encrypted strings in Android 4.4 and earlier versions. 7.2.08 DGD-208 Fixed processing of apk files that contain already obfuscated code (Google mobile services). 7.2.08 Updated configuration for the Droidsonroids Gif library. 7.2.08 Fixed too many warnings when checking class encryption configuration. 7.2.08 Added support to select the used default configuration in Eclipse plugin. 7.2.08 DGD-38 Fixed potential duplicate constructors when using <code>-encryptclasses</code>. 7.2.08 Updated license agreement. 7.2.07 Improved SSL Pinning: mitigated CVE-2016-2402 and added option to specify custom trust store or trust manager. 7.2.07 Added configuration for the ZBar library. 7.2.06 Output filters are now also applied to classes / resources injected by DexGuard. 7.2.06 DGD-167 Added support to print native library file mappings with option <code>-printnativelibrarymapping</code>. 7.2.06 DGD-167 Added support to print resource file mappings with option <code>-printresourcemapping</code>. 7.2.06 DGD-167 Added support to print asset file mappings with option <code>-printassetmapping</code>. 7.2.06 Fixed wrong removal of interfaces from inner classes in rare cases. 7.2.06 Fixed potential race condition during parallel optimization. 7.2.04 DGD-190 Fixed order of input in Gradle plugin. 7.2.04 Fixed reading of archives in nested directory structures. 7.2.04 DGD-188 Improved initialization of encrypted string data for Android library projects. 7.2.04 DGD-186 Updated Gradle plugin to improve support for integrated ndk builds (avoiding duplicate jar entry warnings). 7.2.04 Fixed <code>hash_certificate</code> tool when retrieving certificates from virtual hosts while using Java 8. 7.2.04 DGD-185 Fixed bug when building library projects with -addconfigurationdebugging enabled. 7.2.04 Updated default configuration for Android library projects to improve compatibility with Android gradle plugin 2.1.0+. 7.2.02 Updated class obfuscation dictionary due to problems on some Samsung devices. 7.2.02 DGD-184 Fixed incorrect parsing of Strings in resources that exceed 32767 characters. 7.2.02 DGD-169 Added support to filter consumer proguard rules from dependencies to Gradle plugin. 7.2.02 DGD-178 Updated Gradle plugin for Android Gradle plugin version 2.2.0-alpha2+. 7.2.02 DGD-182 Fixed reading of zip archives with extraneous bytes. 7.2.02 Improved compatibility of Java 8 support with recent versions of the Android gradle plugin (2.1.0+). 7.2.01 Refined default configuration for runtime invisible annotations (not kept anymore in application projects). 7.2.01 DGD-143 Added support to use class specifications with option <code>-encryptclasses</code>. 7.2.01 Added configuration for @Keep annotation from android support-annotations library. 7.2.00 Added support for configuration debugging with option <code>-addconfigurationdebugging</code>. 7.2.00 DGD-83 Added support for Java 8 language features (lambda expressions, method references, default and static interface methods). 7.2.00 Added support for the Jack&amp;Jill toolchain in the Gradle plugin. 7.2.00 DGD-80 Added support for processing apk files directly."},{"location":"about/releasenotes.html#version-71-jan-2016","title":"Version 7.1 Jan 2016","text":"Version Issue Module Explanation 7.1.34 DGD-135 Fixed potential dex overflow when keeping <code>EnclosingMethod</code> attributes and using option <code>-multidex</code>. 7.1.34 Added missing <code>-addconfigurationdebugging</code> option when writing out configuration with <code>-printconfiguration</code>. 7.1.33 DGD-174 Fixed obfuscation of injected members in case of asset and native library obfuscation. 7.1.33 DGD-173 Added variation when applying obfuscated names. 7.1.33 DGD-172 Fixed obfuscation of injected members due to custom <code>-keep</code> rules. 7.1.33 Fixed removal of method invocations that have been marked with <code>-assumenoexternalsideeffects</code>. 7.1.32 Added alternative mechanism to store encrypted classes. 7.1.32 Fixed removal of constant pool entries for encrypted classes in unencrypted classes. 7.1.32 Fixed conversion of code with special stack obfuscation. 7.1.32 DGD-170 Fixed potential invalid casts when adding reflection to obfuscated code attributes. 7.1.32 Added configuration for the MorphoSmart library. 7.1.31 Fixed shrinking of nameless parameters attribute. 7.1.31 Added configuration for the Greenrobot EventBus library. 7.1.31 Refined configuration for the Crashlytics library. 7.1.31 Fixed ClassCastException when combining Class encryption with dex splitting. 7.1.31 Fixed repackaging of classes in the default package. 7.1.31 Fixed removal of string constants that have been encrypted in case <code>-dontshrink</code> is enabled. 7.1.31 DGD-155 Fixed potentially missing classes when combining asset, native library or string encryption with class merging. 7.1.31 Class names of encrypted classes are now also encrypted. 7.1.31 Added support to keep the source file attribute for kept classes with system property <code>obfuscate.keptclasses.dontrenamesourcefileattribute</code>. 7.1.30 DGD-162 Fixed adding of native library files outside of the regular <code>lib</code> directory. 7.1.30 Added flag 'enableJava8' to gradle plugin to enable support for Java 8 language features. 7.1.30 DGD-161 Fixed conversion of multi-dimensional boolean arrays. 7.1.29 Added sample basic/Java8. 7.1.29 DGD-83 Added support for backporting of Java 8 language features (lambda expressions, method references, default and static interface methods). 7.1.29 DGD-46 Fixed potential problem \"New string section exceeds the length of the original\". 7.1.28 DGD-158 Fixed potential ClassNotFoundException when applying both class encryption and optimization. 7.1.28 DGD-156 Unsupported use of generics in the configuration will now result in a parsing exception. 7.1.28 Updated Gradle plugin for Android Gradle plugin version 2.2.0-alpha1+. 7.1.28 DGD-115 Gradle plugin will now disable DexGuard if InstantRun is activated. 7.1.27 Fixed support of plugins using Transform API in gradle builds on Windows platforms. 7.1.27 Samsung-specific metadata are now preserved in the default configuration. 7.1.27 DGD-157 Components that have both an intent filter and the exported flag set to false are now name obfuscated. 7.1.27 Added support for the Cordova CrossWalk plugin. 7.1.27 Improved configuration debugging support for loading of classes and native libraries. 7.1.26 Fixed configuration for sample projects NetCipher and SecurePreferences. 7.1.26 DGD-60 Added <code>-keep</code> modifier <code>includecode</code>. This modifier will prevent optimization of code attributes for matching methods. 7.1.26 Added sample advanced/Realm. 7.1.26 Fixed support for latest Realm plugin (0.88+). 7.1.25 Removed restriction on native libraries to be in the 'lib/' folder to get encrypted. 7.1.25 Classes containing attributes that can not be copied will not be considered for merging anymore. 7.1.25 DGD-153 Fixed potential ClassCastException with primitive arrays when obfuscating code. 7.1.25 Improved optimization of already obfuscated bytecode when 'optimize.conservatively' is enabled. 7.1.25 Conversion to Dalvik bytecode will now keep all instructions that might have side-effects. 7.1.24 DGD-152 Fixed NullPointerException while processing native libraries. 7.1.24 DGD-151 Fixed potential IllegalAccessError when applying asset encryption in library projects. 7.1.24 DGD-150 Fixed potential NullPointerException when combining class encryption with multidex. 7.1.24 DGD-149 Fixed incorrect application of negative -keep rules during class encryption. 7.1.24 Fixed potential NullPointerException during DexGuard processing of encrypted resources in case integer resource values are included as type string. 7.1.24 Reduced increase of code size due to automatic code obfuscation applied to classes containing encrypted strings. 7.1.23 DGD-148 Fixed IllegalArgumentException when creating arrays with more than 5 dimensions. 7.1.23 DGD-147 Fixed potential VerifyError when running multidexed applications on Android 4.x devices. 7.1.23 DGD-146 Refined the configuration <code>lib/dexguard-release-aggressive.pro</code> for Dagger 2. 7.1.23 Java classes referenced from native code by name are now excluded from shrinking and obfuscation. 7.1.23 Added warnings for shrunk or obfuscated class members whose names are still present in native code. 7.1.22 Fixed potential VerifyError when combining class encryption with multidex. 7.1.21 Fixed potential VerifyError when running multidexed applications on Android 4.x devices. 7.1.21 Improved shrinking of native libraries. 7.1.21 DGD-142 Fixed potential VerifyError when encrypting classes. 7.1.21 DGD-142 Classes being referred to from XML's are now excluded from class encryption (fixes potential NoClassDefFoundErrors). 7.1.20 Google Play Services version metadata are now preserved in the default configuration, fixing a potential runtime issue with the Play library. 7.1.20 Dependent jars in Android library projects will now be bundled into a single classes.jar, unless <code>-dontobfuscate</code> is specified. 7.1.19 DGD-133 Code obfuscation of methods will now retain source line information. 7.1.19 Fixed potential 'Can't remap constant index [..]' error during DexGuard processing with enabled <code>-obfuscatecode</code> option. 7.1.19 DGD-136 Classes referenced from XML resources (e.g., activities in the Android Manifest) are now excluded again from encryption. 7.1.19 DGD-62 Classes referenced from XML resources are now preserved in the primary dex file, when splitting dex files. 7.1.19 Gradle plugin will throw FileNotFoundException when trying to load a non-existing configuration file using getDefaultDexGuardFile(...). 7.1.19 Include generated class BuildConfig in aar file of Android library projects. 7.1.19 Fixed configuration for vector drawables in Android 4.4 and earlier versions. 7.1.19 Filename extensions are now preserved for application icons. 7.1.18 DGD-128 Fixed duplicate class definition warnings in Android library projects with file-based dependencies. 7.1.18 Added parallel processing of optimization step (Use -Dparallel.threads=XX to override default). 7.1.18 DGD-132 Fixed variable allocation in conversion step. 7.1.18 DGD-131 Fixed build exception when adding asset encryption to classes having a constructor throwing exceptions. 7.1.17 DGD-127 Fixed reflection on inherited protected fields. 7.1.17 DGD-124 Fixed potential verify error in conversion of exception handlers. 7.1.16 Fixed processing of native library files in Android library projects. 7.1.16 Added sample basic/NativeLibraryInLibraryProject to demonstrate the use of native libraries in Android library projects. 7.1.16 Fixed potential duplicate fields when applying code obfuscation. 7.1.14 Fixed NullPointerException when processing library projects. 7.1.14 Fixed incorrect encryption of fonts. 7.1.14 Fixed asset name obfuscation not being applied in some cases. 7.1.14 Added a warning for native libraries that can't be processed and will be copied instead. 7.1.13 Updated configuration for Apache Cordova: missing CordovaWebViewEngine does not create a note message anymore. 7.1.13 DGD-121 Disabled code obfuscation of methods containing monitor instructions. 7.1.13 DGD-117 Fixed incorrect inlining of resource id's referring to resources outside the processed application. 7.1.12 Refined configuration for Google Play Services library. 7.1.12 DGD-114 Fixed possible Verification errors for android applications when using string encryption in combination with method inlining. 7.1.12 Added verbose statistics for created dex files. 7.1.12 DGD-118 Fixed potential ArrayIndexOutOfBoundsException when merging classes with parameter annotations. 7.1.12 Improved shrinking of assets: assets referred to from XML and resource tables are now preserved, asset detection in bytecode has been improved. 7.1.12 DGD-113 Fixed potential IllegalArgumentException during optimization in case of missing super-classes. 7.1.10 DGD-112 The fileSize parameter of the ResourceEncryptionPlugin.encryptResource() method was not always correct and has been removed. You can use the length of the byte\\] parameter instead. 7.1.10 DGD-112 The NativeLibraryEncryptionPlugin.createNativeLibraryEncryptionKey() method now takes an additional approximate fileSize parameter. 7.1.09 Fixed possible IllegalArgumentException when encrypting strings in combination with tail-recursion optimization. 7.1.09 Fixed gradle builds with aar dependencies. 7.1.09 Fixed evaluation order of configuration files in gradle builds. 7.1.08 DGD-109 Fixed possible NoSuchMethodError when applying encryption in combination with -dontshrink. 7.1.08 Updated configuration for libGDX. 7.1.08 Added sample for libGDX: advanced/SuperJumperDemo. 7.1.08 DGD-105 Updated configuration for embedded Android wear apps. 7.1.08 DGD-107 Fixed updating of resource xml files due to obfuscated classes in android library projects. 7.1.08 DGD-106 Updated configuration for applications using JNA. 7.1.07 Improved loading of encrypted native libraries. 7.1.07 Added support for latest retrolambda plugin (3.3.0-beta4+). 7.1.07 Resources with identical values for all device configurations are now inlined. 7.1.06 DGD-99 Added default configuration for Google Maps API key. 7.1.06 Fixed possible NullPointerException when trying to encrypt missing asset files. 7.1.06 Fixed possible IllegalAccessError when accessing annotations at runtime in combination with option <code>-multidex</code>. 7.1.05 DGD-73 Updated configuration for Google Play Services. 7.1.05 DGD-98 Added shrinking and obfuscation of font assets. 7.1.05 DGD-71 Added inlining of Resources#getIdentifier, keeping resource names if inlining is disabled. 7.1.04 Fixed possible NullPointerException during optimization when encrypting strings. 7.1.03 Default configuration file <code>dexguard-library-release-aggressive.pro</code> now allows/requires to specify which API classes to keep. 7.1.03 DGD-86 Now treating <code>ConstantValue</code> attributes as optional for non-static fields. 7.1.03 DGD-96 Added optional attribute filter support for <code>-keepresourcexmlelements</code> option. 7.1.03 Fixed building wear applications with Gradle plugin. 7.1.02 DGD-95 Fixed packaging of the string encryption plugin API. 7.1.02 Fixed configuration of native library encryption in samples. 7.1.01 Added support for Cordova 5.1. 7.1.01 DGD-93 Fixed loading of native libraries from encrypted classes. 7.1.01 DGD-48 Fixed loading of native libraries from split classes. 7.1.01 DGD-91 Fixed inlining of mixed-type metadata. 7.1.01 DGD-94 Fixed certificate checking of the application certificate. 7.1.00 Added obfuscation of code, with new option <code>-obfuscatecode</code>. 7.1.00 Added plugin APIs for custom encryption of strings, assets, resources, and native libraries, with new option <code>-pluginjars</code>. 7.1.00 Added shrinking of native library files. 7.1.00 Added obfuscation of native library file names. 7.1.00 Added shrinking of assets. 7.1.00 Added obfuscation of asset file names. 7.1.00 Added encryption of resources, with new option <code>-encryptresourcefiles</code>. 7.1.00 Added inlining of Android manifest metadata in code. 7.1.00 DGD-68 Updated Android-specific math optimizations. 7.1.00 DGD-82 Keeping Relocation Read-Only (RELRO) information of native libraries in shrinking step. 7.1.00 Renamed dexguard_util.jar to dexguard-runtime.jar and updated package names for its contents. 7.1.00 Updated documentation and examples. <p>Upgrade considerations:</p> <ul> <li>DexGuard now removes unused native libraries and asset files, and   renames the remaining files. If this causes problems like   <code>UnsatisfiedLinkError</code> or <code>FileNotFoundException</code>, you may need to   preserve them with their original names, with <code>-keepresourcefiles</code>.</li> <li>DexGuard now offers a few alternative default configuration files,   for convenience: the original <code>dexguard-release.pro</code> and the new   <code>dexguard-release-conservative.pro</code> (disabling name obfuscation of   native methods) and <code>dexguard-release-aggressive.pro</code> (enabling   shrinking and name obfuscation of asset files).</li> </ul>"},{"location":"about/releasenotes.html#version-701-dec-2015","title":"Version 7.0.1 Dec 2015","text":"<ul> <li>Added new option <code>-multidex</code> as an alternative to <code>-splitdexfiles</code>,   for convenience and for compatibility.</li> <li>Added support to encrypt native libraries and assets in Gradle   library projects.</li> <li>Added configuration for Android Wear.</li> <li>Added configuration for RxJava.</li> <li>Added configuration for JNA.</li> <li>Allowing <code>.so</code> files in <code>res/raw</code> and in <code>assets</code>.</li> <li>Refined filter for runtime classes in <code>org.w3c.dom</code>.</li> <li>Improved license error reporting in Eclipse.</li> <li>Added configuration for the android-gif-drawable library.</li> <li>Improved configuration for the Google Play Services library.</li> <li>Improved configuration for the Realm library.</li> <li>Updated configuration for the ButterKnife 7 library.</li> <li>Fixed configuration for the Cordova library.</li> <li>Refined default configuration for animation holder classes.</li> <li>Added default configuration for design support library.</li> <li>Fixed optimization of complex entries in the resource table.</li> <li>Fixed handling of duplicate keys in the resource table.</li> <li>Fixed spurious incomplete packaging of native libraries.</li> <li>Fixed encoding of section indices in native libraries (DGD-57).</li> <li>Worked around initialized array size bug in Android 4.4 and older.</li> <li>Added support for animator, interpolator, and transition resources.</li> <li>Added support for styled strings.</li> <li>Added support to explicitly keep specified resources from   being inlined.</li> <li>Added conversion of Exceptions attributes to Throws annotations.</li> <li>Reduced code size for decrypting encrypted assets.</li> <li>Fixed root detection.</li> <li>Fixed merging of classes with package visible fields.</li> <li>Fixed optimization of non-string resources in Resources#getString.</li> <li>Fixed optimization of resource references in custom   styleable attributes.</li> <li>Fixed optimization of resource references in Android manifest.</li> <li>Fixed optimization of references to resource files in XML resources.</li> <li>Fixed optimization of non-string resources in Resources#getString.</li> <li>Fixed optimization of drawable resource references in   selectors, etc.</li> <li>Fixed optimization of chained resource references.</li> <li>Fixed optimization of string resources with both styled and   unstyled representations.</li> <li>Fixed possible invalid code when simplifying enum types.</li> <li>Fixed NegativeArraySizeException optimizing obfuscated code.</li> <li>Fixed possible type verification error in encrypted classes.</li> <li>Fixed StringIndexOutOfBoundsException obfuscating overlapping native   function names.</li> <li>Fixed obfuscation of class names in resource files for   DexGuard Standard.</li> <li>Fixed obfuscation of icon drawables in the resource table.</li> <li>Fixed handling of -dontcompress option for obfuscated resource   files (DGD-69).</li> <li>Fixed NullPointerException obfuscating native libraries.</li> <li>Fixed ClassCastException while writing native libraries.</li> <li>Fixed loading of native libraries when using <code>-splitdexfile</code> or   <code>-multidex</code> option (DGD-48).</li> <li>Fixed ArrayIndexOutOfBoundsException while writing native   libraries (DGD-52).</li> <li>Fixed reflection on clone method for arrays.</li> <li>Fixed variable allocation in conversion of obfuscated code.</li> <li>Fixed IllegalStateException in conversion of long   method invocations.</li> <li>Fixed conversion of dup/checkcast instruction sequences.</li> <li>Fixed conversion of put/store instructions in complex   methods (DGD-70).</li> <li>Fixed NullPointerException in absence of -keepresourcefiles option.</li> <li>Fixed obfuscation of .xml resource file name extensions.</li> <li>Fixed conversion of complex methods with more than 256   local variables.</li> <li>Fixed IllegalStateException converting unusual Kotlin code.</li> <li>Fixed inclusion of application classes in main dex file.</li> <li>Fixed NullPointerException when not specifying expected   class members.</li> <li>Fixed UTF-8 encoding for META-INF files.</li> <li>Fixed parsing of license file for Eclipse plugin in path   with spaces.</li> <li>Fixed handling of multiDexEnabled and disablePreDex in   Gradle plugin.</li> <li>Fixed missing native libraries from library jars in Gradle plugin.</li> <li>Fixed compatibility with Google Services Gradle plugin.</li> <li>Fixed compatibility with io.fabric Gradle plugin.</li> <li>Fixed stand-alone use of the Gradle task.</li> <li>Fixed multi-project builds with Gradle (DGD-85).</li> <li>Fixed backward compatibility of Ant task.</li> <li>Fixed incorrect styling for string resources with identical string   values (DGD-64).</li> <li>Fixed market billing sample.</li> <li>Fixed market licensing sample.</li> <li>Creating intermediate classes jar for unit tests in Maven plugin.</li> <li>Updated Gradle plugin for Android Gradle plugin version 1.5.0.</li> <li>Updated Maven plugin for Android Maven plugin version 4.3.0.</li> <li>Fixed market billing sample.</li> <li>Fixed market licensing sample.</li> <li>Fixed signing config for debug builds in samples.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/releasenotes.html#version-70-may-2015","title":"Version 7.0 May 2015","text":"<ul> <li>Added optimization and obfuscation of resources, with new options   <code>-keepresources</code> and <code>-keepresourcefiles</code>.</li> <li>Added obfuscation of JNI function names in native libraries.</li> <li>Added samples for various common security-related libraries.</li> <li>Added optimized configuration for the Realm library.</li> <li>Added multi-threading for conversion to Dalvik bytecode.</li> <li>Added support for <code>includeLibsJarsFromAar</code> option in Maven plugin.</li> <li>Added support for immediate Android runtime jar in Maven plugin.</li> <li>Skipping DexGuard if no configuration files in Gradle plugin.</li> <li>Improved obfuscation of Application names and ContentProvider names.</li> <li>Improved compatibility with Crashlytics.</li> <li>Refined configuration for possible external org.json library.</li> <li>Changed conversion of multiply instructions, to work around bug in   ART 4.4.</li> <li>Changed conversion of switch instructions, to work around bug in   ART 4.4.</li> <li>Fixed certificate checking method with string parameter and   ok parameter.</li> <li>Fixed configuration for Thread.interrupted().</li> <li>Fixed possible exceptions while processing generic signatures.</li> <li>Fixed accounting for dependencies with dex splitting.</li> <li>Fixed possible NullPointerException when combining class encryption   and dex splitting.</li> <li>Fixed conversion of empty switch instructions.</li> <li>Fixed conversion of NaN constants.</li> <li>Fixed conversion of NoClassDefFoundError handlers for   .class constructs.</li> <li>Fixed conversion of obfuscated overlapping catch handlers.</li> <li>Fixed conversion of code with control flow obfuscation.</li> <li>Fixed inclusion of .aar files in Maven plugin.</li> <li>Fixed processing of libraries with library dependencies in Gradle.</li> <li>Fixed late binding of output file name in Gradle plugin.</li> <li>Fixed copying of .a files in Eclipse plugin.</li> <li>Updated Gradle plugin for Android Gradle plugin version 1.2.0.</li> <li>Updated Maven plugin for Android Maven plugin version 4.1.0.</li> <li>Updated documentation and examples.</li> </ul> <p>Upgrade considerations:</p> <ul> <li>DexGuard now requires a personal license file. You should copy the   license file that you receive to your home directory or one of the   other supported locations.</li> <li>DexGuard may now optimize and remove Android resources and resource   files. If your application accesses some resources in a non-standard   way, that is, not using their resource IDs, you may need to preserve   them with the new options <code>-keepresources</code> or possibly   <code>-keepresourcefiles</code>.</li> <li>You may need to change any references in your Gradle scripts from   <code>com.saikoa</code> to our new name <code>com.guardsquare</code>.</li> </ul>"},{"location":"about/releasenotes.html#version-61-dec-2014","title":"Version 6.1 Dec 2014","text":"<ul> <li>Added optimized configuration for the Paypal card.io library.</li> <li>Fixed IllegalArgumentException during optimization.</li> <li>Fixed escape analysis for desynchronization of methods.</li> <li>Fixed escape analysis with double or long method arguments.</li> <li>Fixed IllegalStateException when combining class encryption and   dex splitting.</li> <li>Fixed conversion of monitor exit instructions in try blocks.</li> <li>Fixed conversion of obfuscated overlapping catch handlers.</li> <li>Fixed conversion of unreachable code in obfuscated   exception handlers.</li> <li>Fixed conversion of catch handlers without named exceptions.</li> <li>Fixed conversion of scrambled code with temporary registers.</li> <li>Fixed conversion of synchronization code.</li> <li>Fixed handling of encrypted or split exception classes.</li> <li>Worked around bug in ART causing crash.</li> <li>Updated Gradle plugin for Android Gradle plugin version 1.0.0-rc1.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/releasenotes.html#version-60-sep-2014","title":"Version 6.0 Sep 2014","text":"<ul> <li>Added best practices to the documentation.</li> <li>Added new option <code>-splitdexfile</code> to automatically partition large   dex files.</li> <li>Added sample for debug detection, emulator detection, and   root detection.</li> <li>Extended sample for tamper detection.</li> <li>Added sample for SSL pinning.</li> <li>Added sample for a web view with asset encryption.</li> <li>Added sample for Apache Cordova with asset encryption.</li> <li>Added optimized configuration for new AdMob library.</li> <li>Added optimized configuration for the Amazon Ads library.</li> <li>Added optimized configuration for the Facebook Conceal library.</li> <li>Added optimized configuration for the OrmLite library.</li> <li>Added optimized configuration for the Retrofit library.</li> <li>Added optimized configuration for the Tapjoy library.</li> <li>Added optimized configuration for the libGDX library.</li> <li>Added optimized configuration for the Java mail library.</li> <li>Added optimized configuration for the LogBack library.</li> <li>Added optimized configuration for the Google Cloud   Messaging library.</li> <li>Added configuration for attributes in libraries.</li> <li>Improved configuration for the ButterKnife library.</li> <li>Added support for signing applications with Maven plugin.</li> <li>Added missing support for intent with targetClass in   preferences XML.</li> <li>Improved robustness of native library encryption.</li> <li>Worked around bug in ART causing crash.</li> <li>Fixed possible ClassCastException when simplifying enum types.</li> <li>Fixed possible IllegalArgumentException when simplifying enum types   with encrypted constant names.</li> <li>Fixed overly optimistic optimization of some Class methods.</li> <li>Fixed possible ClassCastException due to class encryption.</li> <li>Fixed conversion of duplicate annotations.</li> <li>Fixed conversion of overflowing branch instructions.</li> <li>Fixed conversion of overflowing negation instructions.</li> <li>Fixed conversion of empty try blocks.</li> <li>Fixed conversion of parameter names for ART.</li> <li>Fixed class encryption causing verification error.</li> <li>Fixed processing of class names in meta-data elements.</li> <li>Fixed processing of custom classes in <code>res/xml-*/*.xml</code> files.</li> <li>Fixed keeping of onClick handlers with extensions of MenuItem   as parameters.</li> <li>Fixed inclusion of libraries in library projects in custom   Ant rules.</li> <li>Fixed inclusion of native libraries in Maven plugin.</li> <li>Fixed lazy resolution of input and output files in Gradle plugin.</li> <li>Fixed inclusion of Renderscript support library in Gradle plugin.</li> <li>Fixed finding default configuration files in Gradle plugin   in Windows.</li> <li>Fixed keeping of package names in Gradle library plugin.</li> <li>Updated Gradle plugin for Android Gradle plugin version 0.11.1.</li> <li>Updated Eclipse plugin for Android Eclipse plugin version 22.6.3.</li> <li>Updated Maven plugin for Android Maven plugin version 3.9.0-rc.3.</li> <li>Fixed unsuitable builder in library projects in Eclipse plugin.</li> <li>Fixed support for dependencies on aar files in Maven plugin.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/releasenotes.html#version-55-mar-2014","title":"Version 5.5 Mar 2014","text":"<ul> <li>Added optimized configuration for the Guava library.</li> <li>Added optimized configuration for the SQLCipher library.</li> <li>Added optimized configuration for the Couchbase Lite library.</li> <li>Added optimized configuration for the Ektorp library.</li> <li>Added optimized configuration for the Jackson library.</li> <li>Added optimized configuration for the Nuance Vocalizer library.</li> <li>Added support for lazily specified credentials in Gradle plugin.</li> <li>Fixed encryption of native libraries when not optimizing.</li> <li>Fixed optimization causing NullPointerException during processing.</li> <li>Fixed reflection causing exceptions during processing and execution.</li> <li>Fixed interference between reflection, class encryption, and   string encryption.</li> <li>Fixed obfuscation of reference values in custom XML attributes.</li> <li>Fixed handling of library jars in library projects in Gradle plugin.</li> <li>Fixed variable allocation in conversion step.</li> <li>Fixed index overflow for strings in conversion step.</li> <li>Fixed parsing of some unusual characters in ReTrace.</li> <li>Fixed lint checking with Gradle.</li> <li>Fixed instrumentation testing with Gradle.</li> <li>Fixed packaging of resource files from source directory in Ant task.</li> <li>Refined filter for files in META-INF/services in plugins.</li> <li>Refined filter for duplicate Apache http libraries.</li> <li>Added support for 'jniLibs' directive in Gradle plugin.</li> <li>Updated Gradle plugin for Android Gradle plugin version 0.9.0.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/releasenotes.html#version-54-dec-2013","title":"Version 5.4 Dec 2013","text":"<ul> <li>Added encryption of native libraries.</li> <li>Added preferences in Eclipse plugin to enable or disable processing   steps for debug builds and export builds.</li> <li>Sending Eclipse export logs to console panel.</li> <li>Added 'dexguard-library' plugin for Gradle.</li> <li>Updated Gradle plugin for Android Gradle plugin version 0.6.3.</li> <li>Adapted Gradle plugin to work with Android Studio.</li> <li>Updated Maven plugin for Android Maven plugin version 3.8.0.</li> <li>Added support for provided libraries in Maven plugin.</li> <li>Added support for properties in keystore options.</li> <li>Added default filter in Maven plugin to clean up input.</li> <li>Added optimized configuration for the v7 compatibility library.</li> <li>Added optimized configuration for the Apache logging library.</li> <li>Added optimized configuration for the Google Play Services library.</li> <li>Added optimized configuration for the Dagger/ButterKnife libraries.</li> <li>Refined filtering of duplicated Apache http libraries from input.</li> <li>Reduced processing time for string/class/asset encryption.</li> <li>Fixed string encryption and class encryption for Android 1.5.</li> <li>Fixed spuriously incorrect string encryption and asset encryption.</li> <li>Fixed interfering string encryption and asset encryption.</li> <li>Fixed verification error caused by class encryption.</li> <li>Fixed conversion of optimized chained assignments to fields.</li> <li>Fixed conversion of some method invocations with many arguments.</li> <li>Fixed conversion of unused exception handlers.</li> <li>Fixed constructor flag for static initializers.</li> <li>Fixed simplification of redundant boolean variables.</li> <li>Fixed removal of unused parameters from methods with more than   64 arguments.</li> <li>Fixed optimization of caught exceptions passed as parameters.</li> <li>Fixed optimization of throwing exceptions received as parameters.</li> <li>Fixed processing of view elements in layout XML files.</li> <li>Fixed processing of parentActivityName attribute in manifest files.</li> <li>Fixed parsing of additional jar options in Eclipse plugin.</li> <li>Fixed Gradle builds with dependencies on library projects.</li> <li>Fixed releasing of resources in tamper detection.</li> <li>Fixed configuration of Amazon IAP sample.</li> <li>Fixed market detection sample.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/releasenotes.html#version-53-jul-2013","title":"Version 5.3 Jul 2013","text":"<ul> <li>Improved string encryption.</li> <li>Improved asset encryption.</li> <li>Added Gradle plugin for Android Gradle plugin version 0.5.1.</li> <li>Updated Maven plugin for Android Maven plugin version 3.6.0.</li> <li>Updated Eclipse plugin for ADT release 22.</li> <li>Added configuration for compatibility library.</li> <li>Added configuration for annotated Javascript interface methods.</li> <li>Added configuration for AdMob library.</li> <li>Filtering copies of runtime classes from third-party libraries.</li> <li>Always reading and writing resource files using UTF-8 for Android.</li> <li>Fixed processing of raw resource XML files.</li> <li>Fixed check for numeric resource XML attribute ID.</li> <li>Fixed encoding problem of encrypted assets.</li> <li>Fixed initialization of settings in Eclipse.</li> <li>Fixed version numbers in Maven plugin.</li> <li>Fixed configuration of standard android-maven-plugin goals.</li> <li>Fixed conversion of unusual obfuscated code.</li> <li>Fixed string encryption for JME.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/releasenotes.html#version-52-mar-2013","title":"Version 5.2 Mar 2013","text":"<ul> <li>Added asset encryption.</li> <li>Extended obfuscation of binary resource XML files.</li> <li>Added Maven plugin.</li> <li>Added alternative ways to configure string encryption.</li> <li>Only preserving v4 fragments when necessary.</li> <li>Fixed class encryption for Android 1.5.</li> <li>Improved class encryption for Android 4.0 and higher.</li> <li>Now including dependent libraries when building library project.</li> <li>Fixed optimization of instanceof test on interface.</li> <li>Fixed exception when adding reflection in large classes.</li> <li>Fixed exception handling of reflected method invocations.</li> <li>Fixed exception when referencing encrypted interfaces.</li> <li>Fixed spurious and rare NullPointerException in encrypted classes.</li> <li>Fixed encryption of empty strings.</li> <li>Fixed encryption of strings in static initializers of interfaces.</li> <li>Fixed handling of non-reachable code in optimization step.</li> <li>Fixed handling of dynamically accessed class members with   identical names.</li> <li>Fixed conversion of code invoking methods with many arguments.</li> <li>Fixed conversion of unusual exception handlers.</li> <li>Fixed conversion of enclosing method attributes without methods.</li> <li>Fixed exception converting subtractions with nearly short constants.</li> <li>Fixed exception converting overflowing branch instructions.</li> <li>Fixed automatic recompilation in Eclipse plugin.</li> <li>Fixed use of newly created key store when exporting in Eclipse.</li> <li>Added sample for Amazon In-App Purchasing library.</li> <li>Added sample for automatically removing logging statements.</li> <li>Improved hardening configuration of License Verification   Library sample.</li> <li>Updated Ant script and Eclipse plugin for Android SDK Tools r21.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/releasenotes.html#version-51-oct-2012","title":"Version 5.1 Oct 2012","text":"<ul> <li>Added support for processing Android library projects.</li> <li>Added obfuscation of binary resource XML files.</li> <li>Adapted Eclipse plugin for Android Development Tools revision 20.</li> <li>Adapted Ant rules for compatibility with standard build process.</li> <li>Adapted class encryption for Android 4.1.</li> <li>Fixed class encryption for Android 2.2 and older.</li> <li>Extended automatic detection of reflective access to class members.</li> <li>Improved removal of unused code in optimization step.</li> <li>Improved string encryption for very long strings.</li> <li>Fixed specialization of class member descriptors.</li> <li>Fixed type mismatch of reflected method invocations.</li> <li>Fixed access problems for reflected class member access.</li> <li>Fixed potential overflow of branch offsets in conversion to   dex bytecode.</li> <li>Fixed handling of primitive array types in conversion to   dex bytecode.</li> <li>Added support for parameter annotations.</li> <li>Fixed conversion of default annotation values to dex bytecode.</li> <li>Fixed conversion of repeated arguments to dex bytecode.</li> <li>Fixed conversion of optimized exception handlers to dex bytecode.</li> <li>Fixed conversion of optimized synchronized methods to dex bytecode.</li> <li>Working around bug in Dalvik VM causing spurious crashes.</li> <li>Added source name debug information for stack traces to   dex bytecode.</li> <li>Fixed shrinking of local variable debug information.</li> <li>Fixed handling of duplicate classes in dex files.</li> <li>Fixed handling of merged manifest files.</li> <li>Detecting dynamic method invocations with longer method signatures.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/releasenotes.html#version-50-may-2012","title":"Version 5.0 May 2012","text":"<ul> <li>First release of DexGuard.</li> <li>Added support for signing jars, with new options <code>-keystore</code>,   <code>-keystorepassword</code>, <code>-keyalias</code>, and <code>-keypassword</code>.</li> <li>Added new archiving options <code>-dontcompress</code> and <code>-zipalign</code>.</li> <li>Added Java to Dalvik bytecode conversion.</li> <li>Added support for apk archives.</li> <li>Added parameter escape analysis.</li> <li>Added parameter modification analysis.</li> <li>Added specialization of field and method descriptors.</li> <li>Added method desynchronization.</li> <li>Added more peephole optimizations.</li> <li>Added Android-specific optimizations.</li> <li>Added obfuscation through introspection.</li> <li>Added string obfuscation.</li> <li>Added detection of WebView.addJavascriptInterface.</li> <li>Now always using UTF-8 encoding for all input and output.</li> <li>Updated documentation and examples.</li> </ul>"},{"location":"about/systemrequirements.html","title":"System Requirements and Compatibility","text":"<p>This version of DexGuard supports the following versions of operating systems and key technologies.</p>"},{"location":"about/systemrequirements.html#developer-environment","title":"Developer Environment","text":"Technology Supported version range Android Studio All versions AGP 4.0 - 8.8 Languages and Platforms Supported version range Java 6 - 19 Kotlin 1.0 - 2.1 Android NDK All versions JavaScript ECMAScript 2015 Flutter 2.2, 2.8, 3.0, 3.3, 3.7, 3.10, 3.13, 3.16, 3.19, 3.22, 3.24 3.27 3.29 Unity LTS versions: 2021.3, 2022.3"},{"location":"about/systemrequirements.html#end-user-environment","title":"End User Environment","text":"Operating system Supported version range Android 5 - 16 Android TV All versions Wear OS All versions <p>Above lists are not exhaustive. In case of doubts please reach out to Guardsquare Support.</p>"},{"location":"addons/ndk.html","title":"NDK","text":"<p>DexGuard\u2019s optional Android Native Development Kit (NDK) add-on offers a full suite of security mechanisms to effectively harden your native libraries written in C or C++. It protects against reverse engineering and can additionally inject runtime application self protection (RASP) detections in the native code parts. </p> <p>For NDK add-on users, please refer to the separate Android NDK manual which is included in the separate NDK ZIP package for more details on how to set up and configure DexGuard's NDK add-on.</p> <p>In case you are interested to learn more about this solution, please contact us.</p>"},{"location":"features/attestation.html","title":"App attestation","text":""},{"location":"features/attestation.html#introduction","title":"Introduction","text":"<p>App attestation allows you to ensure that requests to your APIs are originating from legitimate/trusted devices. It is an extension of ThreatCast and makes the collected insights about users and devices actionable.</p> <p>The app attestation flow is as follows:</p> <ol> <li>While your application is running, data is gathered on the device. </li> <li>The collected data is sent to the ThreatCast server.</li> <li>The data is analyzed on the ThreatCast server, and a verdict on the authenticity and security of the application    and its environment is communicated to the application by means of an encrypted token.</li> <li>Your application attaches the token to any requests sent to your API.</li> <li>Your application server decrypts the token and decides how to respond to the API request.</li> </ol> <p></p> <p>The remainder of this page contains instructions on how to set up and use app attestation in your application.</p>"},{"location":"features/attestation.html#quickstart","title":"Quickstart","text":""},{"location":"features/attestation.html#prerequisites","title":"Prerequisites","text":"<p>App attestation requires that ThreatCast is enabled for your application, as well as a new v2 ThreatCast API key. In order to encrypt tokens in a way that allows only your server to decrypt them, you must also supply a public encryption key. The following sections will guide you through these steps.</p>"},{"location":"features/attestation.html#obtaining-a-v2-api-key","title":"Obtaining a V2 API key","text":"<p>You can manage your ThreatCast API keys in your ThreatCast app settings (App Settings -&gt; API Keys). Here, either select an existing v2 key, or create a new v2 key.</p>"},{"location":"features/attestation.html#configuring-your-encryption-key","title":"Configuring your encryption key","text":"<p>Tokens issued by the ThreatCast server will be encrypted using a public key that you provide. Only you will be able to decrypt the tokens on your server, using the matching private key.</p> <p>To configure your public key, first generate a 4096 bit RSA keypair. The exact command will depend on your tooling and platform. We provide an example using the <code>openssl</code> command below: OpenSSL RSA key generation<pre><code>openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:4096\nopenssl rsa -pubout -in private_key.pem -out public_key.pem\n</code></pre> If you are using a different tool, please ensure that the public key you provide on ThreatCast is a 4096-bit RSA-key in the PEM encoding of its PKIX, ASN.1 DER form.</p> <p>Once you have obtained your keypair, navigate to the ThreatCast page for the app you are enabling attestation on. Go to App settings, then Keys, and click the Upload key button to bring up the key entry window. Inside of this window, paste the  contents of the <code>public_key.pem</code> file that was previously created. Finally, click the \"upload\" button to complete the process.</p>"},{"location":"features/attestation.html#configuration","title":"Configuration","text":"<p>See the AppAttestation sample in your DexGuard distribution for an illustration of these steps.</p> <p>You can find this sample in your DexGuard distribution at <code>samples/features/AppAttestation</code>.</p> <p>First, add a dependency on the attestation client library in your application.</p> Maven (Kotlin)Maven (Groovy)Manual Download (Kotlin)Manual Download (Groovy) app/build.gradle.kts<pre><code>repositories {\n    maven {\n        credentials {\n            username = \"maven\"\n            password = \"${properties[\"dexguardMavenToken\"]}\"\n        }\n        url = uri(\"https://maven.guardsquare.com\")\n        // Only search for artifacts with groupId \"com.guardsquare.*\",\n        // supported since gradle 5.1.\n        content {\n            includeGroupByRegex(\"com\\\\.guardsquare.*\")\n        }\n        authentication {\n            create&lt;BasicAuthentication&gt;(\"basic\")\n        }\n    }\n}\n\ndependencies {\n    implementation(\"com.guardsquare:dexguard-attestation-client:9.10.5\")\n}\n</code></pre> app/build.gradle<pre><code>repositories {\n    maven {\n        credentials {\n            username = \"maven\"\n            password = \"${dexguardMavenToken}\"\n        }\n        url \"https://maven.guardsquare.com\"\n        // Only search for artifacts with groupId \"com.guardsquare.*\",\n        // supported since gradle 5.1.\n        content {\n            includeGroupByRegex \"com\\\\.guardsquare.*\"\n        }\n        authentication {\n            basic(BasicAuthentication)\n        }\n    }\n}\n\ndependencies {\n    implementation(\"com.guardsquare:dexguard-attestation-client:9.10.5\")\n}\n</code></pre> app/build.gradle.kts<pre><code>repositories {\n    flatDir { dirs(\"/path/to/DexGuard/lib\") }\n}\ndependencies {\n    implementation(mapOf(\"name\" to \"dexguard-attestation-client\", \"ext\"  to \"aar\"))\n}\n</code></pre> app/build.gradle<pre><code>repositories {\n    flatDir { dirs \"/path/to/DexGuard/lib\" }\n}\ndependencies {\n    implementation(name: 'dexguard-attestation-client', ext: 'aar')\n}\n</code></pre> <p>Next, enable app attestation by adding the <code>-appattestation</code> option to your DexGuard configuration. Make sure to also add your v2 API key for ThreatCast if you haven't done so already.</p> DexGuard configuration file<pre><code>-threatcastapikey YOUR_V2_API_KEY\n-appattestation\n</code></pre> <p>After these steps, everything is in place to start using app attestation in your application.</p> <p>Given the above minimal configuration, DexGuard will implicitly inject all RASP checks except OS integrity, debug blocker, and certificate tamper (unless <code>-raspcertificatehash</code> is specified) into your application. We do this to make sure the verdict you receive from app attestation is of the highest quality possible using all of the currently available capabilities without relying on having an optimal RASP configuration. The checks are injected in such a way that they will not affect performance in a perceivable way.</p> <p>App attestation is currently not supported for libraries.</p>"},{"location":"features/attestation.html#implementation","title":"Implementation","text":"<p>Using app attestation involves the following steps:</p> <ol> <li>Fetch an attestation token from the ThreatCast server.</li> <li>Attach the attestation token to your API requests.</li> <li>Analyze the attestation token on your application server.</li> </ol> <p>See the AppAttestation sample in your DexGuard distribution for an illustration of these steps.</p> <p>Let's have a closer look at each of these steps.</p>"},{"location":"features/attestation.html#fetching-an-attestation-token","title":"Fetching an attestation token","text":"<p>DexGuard automatically takes care of the data collection on the device, but analysis of the data needs to be explicitly requested from the ThreatCast server.</p> <p>This is done using the <code>getToken</code> method provided in the attestation client. This <code>getToken</code> method sends all the collected data to the ThreatCast server, prompts analysis of the data, and returns the encrypted attestation token.</p> What happens in case the ThreatCast server is unreachable? <p>The <code>getToken</code> network calls have a timeout of 5 seconds. If no token is returned by the ThreatCast server within this duration, a locally-generated server offline token is returned. The server-side SDK should be used to verify on your server whether ThreatCast was indeed unreachable.</p> <p>Two APIs for the <code>getToken</code> method are available in the <code>com.guardsquare.dexguard.attestation</code> package: <pre><code>String AppAttestation.getToken(Context context)\nString AppAttestation.getToken(Context context, String requestHash)\n</code></pre> The second API allows you to specify a unique hash for the payload when requesting a token, such that the token is bound to the payload.</p> <p>In case you are also implementing attestation on iOS and would like the code to look as similar as possible, you can also consider using the following alternative APIs, which are identical to the above, but follow the naming convention used for native code. <pre><code>String AppAttestation.GSGetAttestationToken(Context context)\nString AppAttestation.GSGetAttestationTokenWithRequestHash(Context context, String requestHash)\n</code></pre></p> <p>Payload binding allows your server to confirm that a token has not been replayed.</p> <p>The hash that is generated for payload binding must be unique to the network request and your server must be able to generate the same unique hash on its end by using the contents of the received network request.</p> <p>The attached token will include this hash so that your server can decode it and verify it against the hash it calculates itself. This ensures that the token can only be used to validate that specific payload and has not been reused multiple times.</p>"},{"location":"features/attestation.html#sending-the-attestation-token-to-your-application-server","title":"Sending the attestation token to your application server","text":"<p>In order to always have an up-to-date token available when your app makes an API request, it is advised to add calls to <code>getToken</code> at all points in your app where you want to attest such a request.</p> <p>Token validity should be checked against the expiration timestamp.</p> <p>Every token that is received by your server will contain an expiry time within the decoded and decrypted attestation token.  Your server should check this value on the token to ensure it is not expired.</p> <p>Don't request tokens on the main thread!</p> <p>Since <code>getToken</code> calls are network requests to the ThreatCast server, they must be made on a background thread to prevent blocking the main thread. If they are made in the main thread, a <code>NetworkOnMainThreadException</code> will be thrown. Please make sure to thoroughly test your app and API boundaries to ensure these calls are always made on background threads.</p> <p>You cannot request a token from an Application class!</p> <p>In an Application class, i.e. a class that extends android.app.Application, the context is not fully initialized to perform a token request. Thus, a call to <code>getToken</code> will fail and an exception will be thrown.</p> <p>The token retrieved by the <code>getToken</code> call now needs to be attached to your app's API requests in order to be verified on the application server. Only then can your server verify whether the app that performs the request is permitted to perform some action, such as access certain data.</p> <p>You can attach these tokens either using a simple header in the network request, or by adding the token to the payload of the API request.</p>"},{"location":"features/attestation.html#debugging-app-attestation","title":"Debugging app attestation","text":"<p>Your DexGuard distribution also includes a debug attestation client you may use to test and debug your attestation setup. You can use this by including the debug option <code>-useattestationdebugclient</code> in your configuration, in addition to the <code>-appattestation</code> option.</p> DexGuard configuration file<pre><code>-useattestationdebugclient\n</code></pre> <p>The debug client will output runtime logs about when requests to your server are made and received, as well as the size of the requests. After debugging, you should remove the configuration option and rebuild your application.</p> Logging the token <p>If you choose to log the returned token, Android runtime logs will truncate the token by default due to the maximum limit on logcat messages. You will need to ensure any debug logging produces the full token.</p> <p>Don't use the debug client in your release builds!</p> <p>The app will produce sensitive logs about the attestation requests, which should not be exposed to customers.</p>"},{"location":"features/attestation.html#shell","title":"Shell attestation client","text":"<p>The <code>dexguard-attestation-client.aar</code> artifact does not contain the actual attestation implementations. The artifact is a shell that is replaced when processing with DexGuard (assuming <code>-dontobfuscate</code> isn't set).</p> <p>Warning</p> <p>Using the <code>dexguard-attestation-client.aar</code> artifact with an unprotected app is still possible but no attestation will be performed.</p> <p>Warnings have been set up to make sure that you are aware that you are using the shell library:</p> <ul> <li>Logs will be printed to logcat every time you invoke a <code>getToken</code> call.</li> <li>A toast will be displayed the first time it is invoked.</li> </ul> <p>You can remove the toast by adding the following meta-data to your <code>application</code> tag of the AndroidManifest.xml file. By setting this metadata you explicitly accept the fact that you are using a shell library.</p> <p>Example: <pre><code>&lt;application\n        android:label=\"@string/app_name\"\n        [...]&gt;\n\n        &lt;meta-data android:name=\"hideAttestationShellWarning\" android:value=\"true\"/&gt;\n\n        [...]\n&lt;/application&gt;\n</code></pre></p> <p>Note: The metadata will automatically be removed from your release build when including one of our default release configurations.</p>"},{"location":"features/attestation.html#security-considerations","title":"Security considerations","text":""},{"location":"features/attestation.html#ssl-pinning","title":"SSL Pinning","text":"<p>It is advised to use SSL pinning on the APIs your application will call on your server. See the Android documentation on this for more information.</p>"},{"location":"features/attestation.html#a11y-attestation-security-consideration","title":"Accessibility malware protection","text":"<p>When implementing app attestation for protection against malicious accessibility services, it is vital that you launch your sensitive activities only after validating the token! As soon as an activity is launched, malicious accessibility services may have access to all displayed information!</p>"},{"location":"features/attestation.html#pseudocode-example","title":"Pseudocode example","text":"<p>Below pseudocode demonstrates the flow we suggest to adopt.</p> <pre><code>async launchSensitiveActivity(val sensitiveActivityIntent: Intent) {\n    // 1. Get the attestation token using the attestation API\n    val token = getToken()\n\n    // 2. Forward the token to your application server.\n    val malwareInstalled = validateToken(token)\n\n    // 3. Only launch your activity if your policy was validated.\n    if (!malwareInstalled) startActivity(sensitiveActivityIntent)\n}\n\nasync validateToken(val token: Token) : Boolean {\n    // This method forwards the token to your application server,\n    // and returns whether your malware policy was violated or not. \n}\n</code></pre> <p>A setup such as this guarantees that sensitive activities are not started unless your defined policy is validated.</p> <p>Keep in mind that the <code>getToken</code> and <code>validateToken</code> calls are asynchronous networking calls which cannot be performed on the main thread.</p>"},{"location":"features/hardware.html","title":"OS Integrity","text":""},{"location":"features/hardware.html#introduction","title":"Introduction","text":"<p>OS integrity is a stricter form of environment integrity checking that is based on key attestation. It allows to:</p> <ul> <li>Verify that the device's operating system has not been altered or tampered with.</li> <li>Verify that the device's information comes from a trusted (hardware) source.</li> </ul> <p>Key attestation provides reliable information on the integrity of the device's bootloader. This integrity is invalidated by operations that require flashing a new boot image, which allows it to be used as a detection for KernelSU, Magisk, custom ROMs and others. However, due to the variety of the devices running Android, the OS integrity check needs to be carefully configured in order to match the use case of your application.</p> <p>The remainder of this page contains information on the scenarios that trigger the OS integrity check and how to optimally configure it for your application.</p>"},{"location":"features/hardware.html#enabling-the-check","title":"Enabling the check","text":"<p>The OS integrity check can be enabled using the <code>-raspchecks</code> configuration option. Note that the OS integrity checker is only injected in entrypoints and cannot be sprayed.</p> Enabling the OS integrity check<pre><code>-raspchecks osintegrity\n</code></pre> Enabling the OS integrity check when using a wildcard rule for the detector list<pre><code># Note that the OS integrity check needs to be explicitly specified.\n-raspchecks *,osintegrity\n</code></pre> <p>The default reaction of the OS integrity check is crashing the application. Note that this behavior can be overwritten, and custom reactions are also supported. Please refer to the RASP page for more information.</p>"},{"location":"features/hardware.html#configuring-the-check","title":"Configuring the check","text":"<p>The OS integrity check uses the device KeyStore to retrieve a certificate chain. It then verifies the validity of each certificate in the chain, and analyzes the attestation data to verify the integrity of the bootloader.</p> <p>Any failures during the retrieval of a certificate chain or the verification of attestation data will trigger a detection. This is intentional, as it prevents malicious users from exploiting corner cases to bypass the check. However, this also means that the check may flag legitimate devices that don\u2019t fully meet the criteria required for the check.</p> <p>As the default strictness level may not be ideal for all applications, we recommend carefully configuring the check to better suit your specific requirements. This can be achieved with the following configuration option:</p> OS integrity allowlistDeprecated: rasp flags <pre><code>-osintegrityallow option1,option2...\n</code></pre> <pre><code># The `flags` parameter is the sum of the flag values for the enabled flags.\n-raspflags osintegrity &lt;flags&gt;\n</code></pre> <p>A summary of the available configuration options for the OS integrity check is presented in the table below.</p> Case where a detection should not be triggered Configuration name Flag value Failed to retrieve a certificate chain from the Secure Element keystore. secureelementkeystorefailure 1 Failed to retrieve a certificate chain from the keystore. certificatechainfailure 2 The attestation data in the certificate chain is corrupted. corruptcertificatechain 4 The OS integrity check failed unexpectedly. unexpectedfailure 8 Key attestation is not supported. keyattestationnotsupported 16 Key attestation returns an empty certificate chain. emptycertificatechain 32 Certificate chain contains revoked certificates. revokedcertificate 64 Hardware attestation is not supported. hardwareattestationnotsupported 128 Root certificate is a well known AOSP certificate. wellknownaospcertificate 256 The package name in the attestation data is \"UnknownPackage\". unknownpackage 512 <p>Use ThreatCast to monitor the OS integrity check before enabling app crashing.</p> <p>We recommend a strategy where you initially release in a monitoring-only mode,   using ThreatCast, to prevent any impact to your users.   The threat information displayed in ThreatCast will directly correspond to   the items listed in the table above.   You can use the gathered information during this initial monitoring period to   tune the configuration of the check before enabling app crashing for it.</p> <p>The following sections explain the purpose of each option and provide guidance on when to enable them.</p>"},{"location":"features/hardware.html#key-attestation-support","title":"Key attestation support","text":""},{"location":"features/hardware.html#key-attestation-is-not-supported","title":"Key attestation is not supported","text":""},{"location":"features/hardware.html#condition","title":"Condition","text":"<p>The Key attestation API used by the OS integrity check is supported on devices running Android 7.0 (API 24) and up. The OS integrity check will trigger a detection if key attestation is not supported by the Android OS.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection","title":"When to allowlist this detection","text":"<p>The OS integrity check aims to provide a verdict to your application on whether the device it is running on is secure. Failing to do so will result in the check being triggered. However, if your application supports Android 6 or below, you might want to avoid triggering the check so that users with Android 6 devices or lower are not impacted. Adding this check to your allowlist will avoid triggering a detection in this case.</p>"},{"location":"features/hardware.html#hardware-attestation-is-not-supported","title":"Hardware attestation is not supported","text":""},{"location":"features/hardware.html#condition_1","title":"Condition","text":"<p>Key attestation provides two levels of security: software-level attestation (or software attestation), and hardware-level attestation (or hardware attestation). Software attestation uses keys that are managed in software and thus relies solely on software-based protections. Hardware attestation, on the other hand, uses hardware-backed keys stored in a secure hardware module like the Trusted Execution Environment (TEE) or Secure Element (StrongBox). As such, hardware attestation provides stronger security guarantees about the device information stored in the attestation data. The OS integrity check will trigger a detection if hardware attestation is not supported by the device.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_1","title":"When to allowlist this detection","text":"<p>The default behavior of the OS integrity check prevents key attestation downgrade attacks. Malicious users can trick the OS integrity check into thinking that hardware attestation is not available, and transition to using the less secure software based check. However, support for hardware attestation is not a strict requirement for Android device manufacturers. Since many devices (e.g., those with low- to mid-grade specs or older models) do not support hardware attestation, you might want to avoid triggering the check in this case by adding the check to your allowlist.</p>"},{"location":"features/hardware.html#failed-to-retrieve-a-certificate-chain-from-the-keystore","title":"Failed to retrieve a certificate chain from the keystore","text":""},{"location":"features/hardware.html#condition_2","title":"Condition","text":"<p>The OS integrity check will trigger a detection if the operations on the keystore fail.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_2","title":"When to allowlist this detection","text":"<p>The default behavior of the OS integrity check prevents malicious users from bypassing the check by preventing operations that try to access the keystore. However, in some devices, flashing a custom ROM or unlocking the bootloader can \"break\" the keystore, such that it remains in a \"broken\" state even if the user reverts these actions. You can thus opt to disable triggering the check in this case by adding the check to your allowlist.</p>"},{"location":"features/hardware.html#failed-to-retrieve-a-certificate-chain-from-the-secure-element-keystore","title":"Failed to retrieve a certificate chain from the Secure Element keystore","text":""},{"location":"features/hardware.html#condition_3","title":"Condition","text":"<p>When a device claims to have a Secure Element (StrongBox) keystore, the OS integrity check will enforce retrieving the certificate chain from a StrongBox-backed keystore. If it fails to retrieve a certificate chain, the OS integrity check will trigger a detection.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_3","title":"When to allowlist this detection","text":"<p>The default behavior of the OS integrity check prevents malicious users from key attestation downgrade attacks, which can make the check rely on a less secure non StrongBox-backed keystore. Allowlisting the check in this case will allow the OS integrity check to retry retrieving a certificate chain from the keystore without enforcing it to be a StrongBox-backed keystore.</p>"},{"location":"features/hardware.html#certificate-chain-verifications","title":"Certificate chain verifications","text":""},{"location":"features/hardware.html#key-attestation-returns-an-empty-certificate-chain","title":"Key attestation returns an empty certificate chain","text":""},{"location":"features/hardware.html#condition_4","title":"Condition","text":"<p>The OS integrity check will trigger a detection if the retrieved certificate chain is empty.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_4","title":"When to allowlist this detection","text":"<p>The default behavior of the OS integrity check prevents malicious users from bypassing the check by tampering with the keystore. We are not aware of any legitimate reasons that would lead to the certificate chain to be empty. However, you can add the check to your allowlist to disable triggering the detection in this case if it impacts benign users.</p>"},{"location":"features/hardware.html#certificate-chain-contains-revoked-certificates","title":"Certificate chain contains revoked certificates","text":""},{"location":"features/hardware.html#condition_5","title":"Condition","text":"<p>The OS integrity check verifies the validity of each certificate in the chain, which includes checking for revoked certificates. Certificates may be revoked when device keys are extracted from the keystore and leaked on the internet. These keys can then be used to spoof or manipulate the attestation response. We maintain a custom Certificate Revocation List (CRL) which includes Google's revocation list, as well as other sources on the internet.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_5","title":"When to allowlist this detection","text":"<p>At the moment, we have insufficient information on whether keys from a device are shared between the same device model, manufacturer, etc. Therefore, triggering the check could punish legitimate devices whose keys have been leaked from other users. You can add the check to your allowlist to disable triggering the detection in this case.</p>"},{"location":"features/hardware.html#root-certificate-is-a-well-known-aosp-certificate","title":"Root certificate is a well known AOSP certificate","text":""},{"location":"features/hardware.html#condition_6","title":"Condition","text":"<p>When hardware attestation is supported by the device, the OS integrity check will trigger a detection if the root certificate in the chain is not signed by Google.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_6","title":"When to allowlist this detection","text":"<p>If a device is not compatible with Google Play (see Google Play supported devices), the root certificate will not necessarily be signed by Google. A common alternative for the root certificate among our test devices was the AOSP certificate. You can thus add the check to your allowlist to consider this as an alternative for the root certificate in the OS integrity check. Note, however, that the private key of the AOSP certificate is well known and can be used to forge false attestation data.</p>"},{"location":"features/hardware.html#the-attestation-data-in-the-certificate-chain-is-corrupted","title":"The attestation data in the certificate chain is corrupted","text":""},{"location":"features/hardware.html#condition_7","title":"Condition","text":"<p>The OS integrity check will trigger in case there are any exceptions in parsing the attestation data from the certificate chain.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_7","title":"When to allowlist this detection","text":"<p>The default behavior of the OS integrity check prevents malicious users from bypassing the check by corrupting the attestation data. We are not aware of any legitimate reasons that would lead to this situation. However, you can add the check to your allowlist to disable triggering the detection in this case if it impacts benign users.</p>"},{"location":"features/hardware.html#the-package-name-in-the-attestation-data-is-unknownpackage","title":"The package name in the attestation data is \"UnknownPackage\"","text":""},{"location":"features/hardware.html#condition_8","title":"Condition","text":"<p>The attestation data in the certificate chain contains the calling app's package name. If this doesn't match the package name of the app, the OS integrity check will trigger.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_8","title":"When to allowlist this detection","text":"<p>Some devices may fail to fetch the package name during generation of the certificate chain. In this case, the package name is set to \"UnknownPackage\", which would trigger the check. You can set the flag to disable triggering the check in this case. If you add this check to your allowlist, we recommend additionally enabling RASP checks for virtual environment detection, to ensure that the package name cannot be tampered with.</p>"},{"location":"features/hardware.html#the-os-integrity-check-failed-unexpectedly","title":"The OS integrity check failed unexpectedly","text":""},{"location":"features/hardware.html#condition_9","title":"Condition","text":"<p>The OS integrity check will trigger a detection for any failures that are not explicitly checked for.</p>"},{"location":"features/hardware.html#when-to-allowlist-this-detection_9","title":"When to allowlist this detection","text":"<p>The OS integrity checker ensures a detection is triggered when the check fails to be performed. This prevents malicious users from introducing unexpected failures to avoid any of the required verifications. If you suspect that the OS integrity check falsely triggers in this case, and the devices in which it triggers have not been tampered with, you can contact support to report the issue. In case this impacts benign users of your application, you can add the check to your allowlist to disable triggering the detection in this case. Note that this flag only affects triggering the check for unexpected failures, and failures that are explicitly checked for will still trigger a detection.</p>"},{"location":"features/hardware.html#limitations","title":"Limitations","text":"<p>The OS integrity check is currently unable to differentiate between legitimate and malicious custom ROMs. Legitimate custom ROMs are those used by users who want to keep up to date with newer Android versions when the manufacturer no longer provide updates, or to change the look and feel of their device. These ROMs may not necessarily provide root access, but will trigger the OS integrity check regardless due to the bootloader being unlocked, or the root certificate not being signed by Google.</p>"},{"location":"features/malware.html","title":"Malware protection","text":""},{"location":"features/malware.html#introduction","title":"Introduction","text":"<p>DexGuard can protect your application against common malware attacks. While malware is often forgotten when considering mobile application security, it does pose a significant threat in the mobile landscape. We've documented the threats posed by malware attacks, and their behaviour in detail in the Guardsquare Security Research Center.</p> <p>DexGuard aims to block these malware attacks and inform the end-user who can then take action. In this regard, DexGuard's malware protections are different from DexGuard's RASP checks. Where RASP checks are able to detect and prevent malicious end-users from (ab)using your application, in the case of malware, the end-users are not necessarily attackers, but rather victims. Hence, rather than preventing the end-user from using the application, DexGuard aims to protect and inform the end-user.</p> <p>The most minimal configuration to enable DexGuard malware protection is:</p> <pre><code>-malwareprotect *\n</code></pre> <p>This will enable all malware detectors and target all activities and fragments (for <code>a11y</code> and <code>screenrecording</code>).</p> <p>The remainder of this page contains instructions on how to enable DexGuard's protections against the following types of malware:</p> <ul> <li> <p> Screen spying</p> <p>Protect against screen spying. You can find a detailed explanation in our article on screen recording attacks.</p> </li> <li> <p> Accessibility services</p> <p>Protect against malicious accessibility service applications. You can find a detailed explanation in our article on malicious accessibility services.</p> </li> <li> <p> Overlays</p> <p>Protect against overlays.   You can find a detailed explanation in our article on UI injections attacks.</p> </li> <li> <p> Activity injections</p> <p>Protect against injection of malicious activities. You can find a detailed explanation in our article on UI injections attacks.</p> </li> </ul>"},{"location":"features/malware.html#limitations","title":"App-specific limitations","text":"<p>These malware checks have been developed for and tested with the Android View based layouts. While this doesn't mean they won't work for apps developed with a different UI framework like Jetpack Compose, or a hybrid app framework like React Native or Flutter, we can only guarantee compatibility with the standard Android View elements.</p> <p>The following checks rely on having at least an activity, so they are likely compatible with different frameworks but should be tested to make sure:</p> <ul> <li>Screen spying prevention</li> <li>Malicious accessibility service detection</li> <li>Overlay prevention (Only for API levels &gt;= 31)</li> </ul> <p>Another limitation that may apply when using other frameworks is the ability to target activities to be protected. This requires your app to consist of multiple activities to represent the different \"screens\" of your application. Some UI frameworks, like Jetpack Compose, as well as almost all hybrid app frameworks, only use a single activity and handle the concept of a \"screen\" in a way that is specific to the framework. If your application does not use multiple activities to represent its \"screens\", DexGuard can only protect that one activity, and all of your \"screens\" as a consequence.</p>"},{"location":"features/malware.html#screen-spying","title":"Screen spying","text":"<p>This malware attack aims to spy on the user and steal sensitive data by abusing the screen capture capability.</p> <p>For more information on how the attack works and what the defenses look like, refer to our article on screen recording attacks.</p> <p>To apply defenses against screen spying, you can specify the following option:</p> <pre><code>-malwareprotect screenrecording\n</code></pre> <p>This configuration option will apply the protection to all activities and fragments of your application. Any fragments hosted in protected activities and fragments will be protected as well. In case you want the protection to also apply to all dialogs shown in protected activities and/or fragments, you need to manage the dialog using a DialogFragment.</p> <p>Nested fragments</p> <ul> <li>When you protect an activity, all of its nested DialogFragments will automatically be protected as well.</li> <li>When you protect a fragment, none of its nested DialogFragments will automatically be protected. For this reason, be sure to explicitly configure all DialogFragments you want to protect against screenrecording.</li> </ul> <p>Disables screenshots and screen recordings</p> <p>This protection prevents end-users from taking screenshots or screen recordings of the protected activities!</p> <p>To apply the protection only to a specific set of activities and/or fragments, you can specify a list of class specifications with the option:</p> <pre><code>-malwareprotect screenrecording class myPackage.Activity,myPackage.Fragment,...\n</code></pre> <p>With this configuration, end users will still be able to take screenshots of the other activities and/or fragments in your application.</p>"},{"location":"features/malware.html#a11y","title":"Malicious accessibility services","text":"What are accessibility services? <p>Accessibility services are applications designed to assist users with disabilities or special needs in using technology more effectively. These services work by providing enhancements or modifications to existing device interfaces, making them more accessible through various means. They can offer support for a wide range of needs, including visual, auditory, physical, and cognitive impairments. Here are some key features and functions of accessibility service apps:</p> <ul> <li>Screen readers read out the text displayed on the screen, helping users with reading difficulties or visual impairments.</li> <li>Color and contrast managers to help users with color blindness or contrast sensitivity.</li> <li>Switch access controllers allow users to control their device using keyboards, switches or other adaptive devices.</li> </ul> <p>Malicious accessibility services pose significant risks to the end-user, since accessibility services typically require more extensive permissions compared to standard applications. This elevated level of access is necessary because these services often need to interact closely with the operating system and other apps to provide their functionality.</p> <p>Malware abuses these additional permissions to gain unauthorized access to the user's data and possibly other resources managed by your app.</p> <p>Since accessibility services may serve a legitimate and important purpose, DexGuard can't just disallow any and all accessibility services. For that reason, DexGuard will inject code to identify suspicious accessibility services.</p> <p>For more information on how these type of attacks work and how we can protect against them, refer to our article on malicious accessibility services.</p>"},{"location":"features/malware.html#configuring-protection","title":"Configuring protection","text":"<p>This protection requires The QUERY_ALL_PACKAGES permission </p> <p>Your application requires the QUERY_ALL_PACKAGES permission because the check needs to scan the system for potentially malicious applications. If your application lacks this permission, you can not use this protection feature.</p> <p>The information an application can obtain with this permission is considered personal and sensitive. Therefore, this permission has to be requested from Google Play. For more information on this process and whether your application meets the acceptance criteria, refer to the official Google support page.</p> <p>To protect against malicious accessibility services, you can specify the following option:</p> <pre><code>-malwareprotect a11y\n</code></pre> <p>This configuration option will apply the protection to all activities and fragments of your application. To apply the protection only to a specific set of activities and/or fragments, you can specify a list of class specifications with the option:</p> <pre><code>-malwareprotect a11y class myPackage.Activity,myPackage.Fragment,...\n</code></pre> <p>DexGuard will identify accessibility services as suspicious if they have not been installed from a trusted app store. By default, DexGuard will use the following list of trusted app stores:</p> <ul> <li><code>com.android.vending</code></li> <li><code>com.google.android.feedback</code></li> <li><code>com.amazon.venezia</code></li> <li><code>com.sec.android.app.samsungapps</code></li> <li><code>com.huawei.appmarket</code></li> <li><code>com.miui.packageinstaller</code></li> <li><code>com.xiaomi.market</code></li> <li><code>com.xiaomi.mipicks</code></li> <li><code>com.oppo.market</code></li> <li><code>com.bbk.appstore</code></li> <li><code>com.vivo.appstore</code></li> <li><code>com.heytap.market</code></li> </ul> <p>In order to configure the list of trusted app stores, you can specify the <code>-malwareallowstores</code> option, followed by the list of package names. For example, <pre><code>-malwareallowstores com.android.vending,com.google.android.feedback\n</code></pre> Specifying the above option will override DexGuard's pre-defined list.</p> What does a11y mean? <p>a11y is a numeronym, a term derived from the word accessibility. The 11 represents the 11 letters between the a and the y in the word accessibility. This shorthand is commonly used in the context of discussions about accessibility in technology, design, and other fields.</p> <p>This protection injects scans for malicious accessibility services installed on the user's device. The user is warned using a dialog and a toast, showing a warning message, notifying the user of the detection of potential malware.</p> <p>The default warning message is in English, which may not be ideal given your user demographic. Therefore, the message is configurable by specifying a string resource (by name) to show, which also allows you to provide different localizations for this message. This configuration option is currently not available for library projects.</p> <pre><code>-malwaremessage a11y string/my_string_resource\n</code></pre> <p>ThreatCast integration</p> <p>When you have ThreatCast enabled for your app, detections of malicious accessibility services are sent to your dashboard, so you can get an overview of how many of your users are affected by these types of malware.</p> <p>Sample accessibility services on some emulators</p> <p>Some Android Studio emulators come with a set of sample accessibility services pre-installed. These accessibility services do not appear on any actual devices and are just there as an example of how to use the APIs. However, these services are installed in a way very similar to how many malicious accessibility services are installed. This causes our malicious accessibility services malware check to trigger when any of these sample services are enabled. These are known false positives that only happen on some emulators.</p>"},{"location":"features/malware.html#making-the-app-crash","title":"Making the app crash","text":"<p>For RASP checks designed to detect malicious users tampering with your app, crashing the app by default is a solid strategy. This prevents the malicious user from continuing his reverse engineering efforts. For malware detections, this doesn't always make sense.  Malware using accessibility services is different, however. This type of malware can actually perform operations within your app the user may not even be aware of or can prevent. In these cases, you may want to crash to prevent the malware from performing actions on behalf of the user.</p> <p>This is not enabled by default but can be enabled with the following option:</p> <pre><code>-malwarecrashon a11y\n</code></pre>"},{"location":"features/malware.html#how-to-configure-a-custom-callback","title":"How to configure a custom callback","text":"<p>For similar reasons as mentioned above, since malicious accessibility services can interact with the app directly, you may want to be notified of detections using a callback, so you can have your app react appropriately to this threat. You can implement a callback method in your application and configure it as a callback with the following option:</p> <pre><code>-malwarecallback a11y class MyClass {\n    public static void myCallback(long);\n}\n</code></pre> <p>Upon detection of malware, DexGuard will call this method.</p> <p>If you would like to provide some visual feedback that is different from the default warnings DexGuard provides, you can specify a callback that takes a Context object as its first argument.</p> <pre><code>-malwarecallback a11y class MyClass {\n    public static void myCallback(android.content.Context, long);\n}\n</code></pre> <p>You can not reuse your RASP callback for your malware protections.</p> <p>Descriptive names for callback functions are not allowed since they can lead to a callback being easily located and then bypassed.</p> <p>In order to disable the default warnings, you need to specify the following option, <pre><code>-malwarewarnon !a11y\n</code></pre></p> <p>For more examples on the visual feedback you can provide in your callback methods, see visual feedback examples</p>"},{"location":"features/malware.html#optionally-check-for-non-system-accessibility-services-with-admin-privileges","title":"Optionally check for non-system accessibility services with admin privileges","text":"<p>Accessibility services, when part of the system, can have admin privileges. This should not be the case for services that are not system apps. Malware generally would like to have as many privileges as possible so it can do more on the user's device. For this reason, having an accessibility service with admin privileges that is not a system app could potentially be very dangerous. However, assuming these apps are malware is a heuristic, for this reason we don't perform this check by default. To enable the check, you can specify the below option in combination with <code>-malwareprotect a11y</code>:</p> <pre><code>-malwarea11ydeviceadmin\n</code></pre>"},{"location":"features/malware.html#malware-attestation","title":"Configurable protection against a11y threats","text":"<p>If your goal is to protect your users from specific malware exploiting accessibility services, you will need to set up App Attestation. With App Attestation, you can define a policy to check:</p> <ol> <li>Whether any of the installed accessibility services are known malware.</li> <li>Whether the installed accessibility services were installed from trusted App stores.</li> </ol> Configuring a11y protection on the attestation dashboard <p>If either of these requirements is false, the attestation token will indicate a break of policy. In that case, you can implement an appropriate reaction strategy.</p> <p>More details and guidance can be found on the App Attestation page.</p>"},{"location":"features/malware.html#overlays","title":"Overlays","text":"<p>Experimental feature</p> <p>Overlay protection is a new experimental feature. This feature adds detection logic and UI reactions to your  application aimed at reducing the opportunity for malware to trick the user with overlays. As the requirements for  every application may be different, we invite you to provide feedback if the feature does not solve the problem you have or does not fully conform to your requirements.</p> <p>This type of malware attack aims to trick the user into performing actions on or inserting information into an activity by hiding what is happening underneath an overlay that displays something the user would expect or trusts.</p> <p>For more information on how the attack works and what the defenses look like, refer to our article on UI injection attacks.</p> <p>To inject defenses against overlay attacks, you can specify the following option:</p> <pre><code>-malwareprotect overlays\n</code></pre> <p>This option will apply the protection to all your application's activities and fragments. By default, DexGuard will apply the protection to all fragments displayed in an activity that has been configured for protection. In case you want the protection to also apply to all dialogs shown in an activity, you need to manage the dialog using a DialogFragment.</p> <p>To protect only a subset of activities and/or fragments, you can use class specifications to target those activities and/or fragments:</p> <pre><code>-malwareprotect overlays class myPackage.Activity,myPackage.Fragment,...\n</code></pre> <p>The protection varies depending on the user's Android version. On Android API Level &gt;= 31 DexGuard's malware protection will hide overlays that appear on top of your application. This requires the <code>HIDE_OVERLAY_WINDOWS</code> permission, which DexGuard adds to your manifest if it's not already specified. On lower API levels, the malware protection will try to warn the user by showing a toast and a dialog containing a warning message and block any interaction with UI elements that may be covered by transparent overlays.</p> <p>Nested fragments</p> <ul> <li>When you protect an activity, all of its nested fragments will automatically be protected as well.</li> <li>When you protect a fragment, none of its nested fragments will automatically be protected on API level &lt;31. For this reason, be sure to configure all fragments you want to protect against overlays.</li> </ul> <p>The default warning message is in English, which may not be ideal given your user demographic. Therefore, the message is configurable by specifying a string resource (by name) to show, which also allows you to provide different localizations for this message. This configuration option is currently not available for library projects.</p> <pre><code>-malwaremessage overlays string/my_string_resource\n</code></pre> <p>Known false positives</p> <p>While the check can accurately detect when an overlay is present while the user taps the screen, it is unable to determine where the overlay came from. This means that the check may trigger even in cases where no malware is present, so keep this in mind when writing your custom warning messages! Known cases of when false positives will trigger:</p> <ul> <li>When a toast is on the screen (try to avoid showing toasts in protected activities).</li> <li>When using picture in picture mode.</li> <li>When the activity itself shows an overlay (try to avoid this in protected activities).</li> <li>When another app shows a legitimate overlay, like when a messenger app shows a popup with an incoming message, or   when watching a video in the corner of your screen while operating your app.</li> </ul>"},{"location":"features/malware.html#activity-injections","title":"Activity injections","text":"<p>Experimental feature</p> <p>Activity injection protection is a new experimental feature. This feature adds detection logic and UI reactions to your application aimed at reducing the opportunity for malware to trick the user with activity injections. As the requirements for every application may be different, we invite you to provide feedback if the feature does not solve the problem you have or does not fully conform to your requirements.</p> <p>This type of malware attack inserts unauthorized activities above the legitimate application to capture sensitive information or mislead the user.</p> <p>For more information on how the attack works and what the defenses look like, refer to our article on UI injection attacks.</p> <p>To inject defenses against injected activities, specify the following option:</p> <pre><code>-malwareprotect activityinjection\n</code></pre> <p>This option will apply the protection to all your application's activities and fragments. We recommend to apply this check only to a specific subset of security sensitive activities and/or fragments to reduce the impact of potential false positives.</p> <p>You can achieve this by adding class specifications to target those activities and/or fragments:</p> <pre><code>-malwareprotect activityinjection class myPackage.Activity,myPackage.Fragment,...\n</code></pre> <p>When activity injection is detected, the malware protections will attempt to warn the user by trying to force your app back to the foreground and showing a warning message in a toast and dialog.</p> <p>Limitations with bringing your app's activity back to the front</p> <p>Starting with Android 10 (API level 29), Android imposes restrictions on starting activities from the background. This affects whether DexGuard's activity injection protection can bring your app back to the front. It will always try, but may not succeed when running on Android 10 or later. This does not affect the toast, which will always show. The dialog will be shown when the user returns to your app.</p> <p>The default warning message is in English, which may not be ideal given your user demographic. Therefore, the message is configurable by specifying a string resource (by name) to show, which also allows you to provide different localizations for this message. This configuration option is currently not available for library projects.</p> <pre><code>-malwaremessage activityinjection string/my_string_resource\n</code></pre> <p>Be aware of false positives!</p> <p>This protection will trigger when the user opens another app by clicking on a notification or a button in the notification tray, even though this may not be initiated by malware!</p> <p>Keep this in mind when writing your custom warning message and when deciding which activities to apply this protection for.</p>"},{"location":"indepth/apkexpansionfiles.html","title":"APK Expansion Files","text":"<p>Google Play allows you to attach two large expansion files that supplement your APK. DexGuard can protect Android native libraries in these expansion files by obfuscating and encrypting them. These expansion files are delivered as opaque binary blobs (OBB format) to your application.</p>"},{"location":"indepth/apkexpansionfiles.html#configuration","title":"Configuration","text":"<p>To protect native libraries inside expansion files using DexGuard, an <code>-injars</code> rule should be added to the DexGuard configuration file for the input expansion file and a corresponding <code>-outjars</code> rule for the protected expansion file:</p> <pre><code>-injars in.obb\n-outjars out.obb\n</code></pre> <p>Importantly, DexGuard expects the input expansion file to be a renamed ZIP archive with the <code>.obb</code> extension.</p> <p>By default, only JNI bridge obfuscation is applied. You can additionally specify to encrypt native libraries using the <code>-encryptnativelibraries</code> rule. Contrary to APKs, native libraries inside expansion files can appear in an arbitrary location. For example, to encrypt a native library appearing in the root of an expansion file, use the following rule:</p> <pre><code>-encryptnativelibraries libsecret.so\n</code></pre> <p>You can find a working sample project for APK expansion files in <code>samples/advanced/OBB</code>.</p> <p>Warning</p> <p>DexGuard cannot adapt native library file contents if there exist native libraries with the same simple name  but different contents between the expansion files and/or the APK. In this case, you can use the <code>dexguard-release-conservative.pro</code> default configuration to not adapt the  native library contents. The native libraries can still be encrypted.</p>"},{"location":"indepth/attributes.html","title":"Attributes","text":"<p>Class files essentially define classes, their fields, and their methods. A lot of essential and non-essential data are attached to these classes, fields, and methods as attributes. For instance, attributes can contain bytecode, source file names, line number tables, etc.</p> <p>DexGuard's obfuscation step removes attributes that are generally not necessary for executing the code. With the <code>-keepattributes</code> option, you can specify a filter for attributes that you do want to keep, for instance if your code accesses them through reflection, or if you want to preserve some compilation or debugging information. The filter works like any filter in DexGuard.</p> <p>The following wildcards are supported:</p> Wildcard Meaning <code>?</code> matches any single character in an attribute name. <code>*</code> matches any part of an attribute name. <p>An attribute name that is preceded by an exclamation mark '!' is excluded from further attempts to match with subsequent attribute names in the filter. Make sure to specify filters correctly, since they are not checked for potential typos.</p> <p>For example, the following setting preserves the optional attributes that are typically necessary when processing code that is intended to be used as a library:</p> <pre><code>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,\n                SourceFile,LineNumberTable,*Annotation*,EnclosingMethod\n</code></pre> <p>The Java bytecode specifications currently specify the following list of attributes.</p>"},{"location":"indepth/attributes.html#optional-attributes","title":"Optional attributes","text":"<p>DexGuard's obfuscation step by default discards the following optional attributes. You can keep them with the <code>-keepattributes</code> option.</p> <code>SourceFile</code> Specifies the name of the source file from which the class file was   compiled. If present, this name is reported in stack traces. <code>SourceDir</code>(J++ extension) Specifies the name of the source directory from which the class file was   compiled. <code>Record</code> (Java 14 or higher) Specifies the components of a record class. Code may access this information   by reflection. <code>InnerClasses</code> Specifies the relationship between a class and its inner classes and outer   classes. Other than this and the naming convention with a '\\$' separator   between the names of inner classes and outer classes, inner classes are just   like ordinary classes. Compilers may need this information to find classes   referenced in a compiled library. Code may access this information by   reflection, for instance to derive the simple name of the class. <code>PermittedSubclasses</code> (Java 15 or higher) Specifies the allowed extensions or implementations of sealed classes or   interfaces. <code>EnclosingMethod</code>(Java 5 or higher) Specifies the method in which the class was defined. Compilers may need this   information to find classes referenced in a compiled library. Code may   access this information by reflection, for instance to derive the simple   name of the class. <code>Deprecated</code> Indicates that the class, field, or method is deprecated. <code>Synthetic</code> Indicates that the class, field, or method was generated by the compiler. <code>Signature</code>(Java 5 or higher) Specifies the generic signature of the class, field, or method. Compilers   may need this information to properly compile classes that use generic types   from compiled libraries. Code may access this signature by reflection. <code>MethodParameters</code>(Java 8 or higher) Specifies the names and access flags of the parameters of the method. Code   may access this information by reflection. <code>Exceptions</code> Specifies the exceptions that a method may throw. Compilers may use this   information to enforce catching them. <code>LineNumberTable</code> Specifies the line numbers of the method. If present, these line numbers are   reported in stack traces. <code>LocalVariableTable</code> Specifies the names and types of local variables of the method. If present,   some IDEs may use this information for helping with auto-completion. <code>LocalVariableTypeTable</code>(Java 5 or higher) Specifies the names and generic types of local variables of the method. If   present, some IDEs may use this information for helping with   auto-completion. <code>RuntimeVisibleAnnotations</code>(Java 5 or higher) Specifies the annotations that are visible at run-time, for classes, fields,   and methods. Compilers and annotation processors may use these annotations.   Code may access them by reflection. <code>RuntimeInvisibleAnnotations</code>(Java 5 or higher) <p>Specifies the annotations that are visible at compile-time, for classes,   fields, and methods. Compilers and annotation processors may use these   annotations.</p> <code>RuntimeVisibleParameterAnnotations</code>(Java 5 or higher) <p>Specifies the annotations that are visible at run-time, for method   parameters. Compilers and annotation processors may use these annotations.   Code may access them by reflection.</p> <code>RuntimeInvisibleParameterAnnotations</code>(Java 5 or higher) <p>Specifies the annotations that are visible at compile-time, for method   parameters. Compilers and annotation processors may use these annotations.</p> <code>RuntimeVisibleTypeAnnotations</code>(Java 8 or higher) Specifies the annotations that are visible at run-time, for generic types,   instructions, etc. Compilers and annotation processors may use these   annotations. Code may access them by reflection. <code>RuntimeInvisibleTypeAnnotations</code>(Java 8 or higher) <p>Specifies the annotations that are visible at compile-time, for generic   types, instructions, etc. Compilers and annotation processors may use these   annotations.</p> <code>AnnotationDefault</code>(Java 5 or higher) Specifies a default value for an annotation."},{"location":"indepth/attributes.html#essential-attributes","title":"Essential attributes","text":"<p>DexGuard automatically keeps the following essential attributes, processing them as necessary. We're listing them for the sake of completeness:</p> <code>ConstantValue</code> Specifies a constant integer, float, class, string, etc.   <code>Code</code> Specifies the actual bytecode of a method. <code>StackMap</code>(Java Micro Edition) Provides preverification information. The Java Virtual Machine can use this   information to speed up the verification step when loading a class. <code>StackMapTable</code>(Java 6 or higher) Provides preverification information. The Java Virtual Machine can use this   information to speed up the verification step when loading a class. <code>BootstrapMethods</code>(Java 7 or higher) Specifies the methods to bootstrap dynamic method invocations. <code>Module</code>(Java 9 or higher) Specifies the dependencies of a module. <code>ModuleMainClass</code>(Java 9 or higher) Specifies the main class of a module. <code>ModulePackages</code>(Java 9 or higher) Specifies the packages of a module. <code>NestHost</code>(Java 11 or higher) Specifies the host class of a nest, for example an outer class. <code>NestMembers</code>(Java 11 or higher) Specifies the members of a nest, for example the inner classes."},{"location":"indepth/codepush.html","title":"Code Push","text":"<p>This page explains how you can apply DexGuard protection to your CodePush update.  This is a separate step from protecting the app you upload to the Play Store or App store and requires no changes to its configuration or setup. Both React Native (JS &amp; Hermes) and Cordova Code Push updates are supported. You can find samples for the Android case in the <code>samples/advanced/CodePush</code> directory.</p> <p>Only JavaScript/Hermes supported</p> <p>Right now, only the JavaScript/Hermes part of the Code Push update can be protected by DexGuard. Asset and resource files are not supported at the moment.</p> <p>iOS apps</p> <p>While DexGuard can only process Android apps (and not iOS apps), it can process Code Push updates for both Android and iOS. The steps for both are very similar and any differences are indicated by tabs on this page.</p> <p>iXGuard does not support Hermes Code Push</p> <p>Hermes Code Push is only supported in DexGuard </p>"},{"location":"indepth/codepush.html#dexguard-standalone","title":"DexGuard standalone","text":"<p>You can process your Code Push update by calling DexGuard on the command line. First, you must generate the Code Push update.</p> AndroidiOS React NativeCordova <pre><code>react-native bundle \\\n    --platform android \\\n    --entry-file index.js \\\n    --bundle-output CodePush/index.android.bundle \\\n    --assets-dest CodePush\n</code></pre> <p>Make sure the <code>CodePush</code> directory exists before you execute this command.</p> <pre><code>cordova prepare android\n</code></pre> React NativeCordova <pre><code>react-native bundle \\\n    --platform ios \\\n    --entry-file index.js \\\n    --bundle-output CodePush/index.ios.bundle \\\n    --assets-dest CodePush\n</code></pre> <p>Make sure the <code>CodePush</code> directory exists before you execute this command.</p> <pre><code>cordova prepare ios\n</code></pre> <p>Once the Code Push update has been generated, you can call DexGuard to process it. If your code push update consists of JavaScript code, you need to pass a JavaScript configuration:</p> React Native JavaScriptCordova <pre><code>java -jar &lt;dexguard-dir&gt;/lib/dexguard.jar \\\n    -injars CodePush \\\n    -outjars CodePush-protected \\\n    -obfuscatejavascript **.bundle \\\n    -javascriptconfiguration javascript.yml\n</code></pre> <pre><code>java -jar &lt;dexguard-dir&gt;/lib/dexguard.jar \\\n    -injars platforms/android/app/src/main/assets/www \\\n    -outjars www-protected \\\n    -obfuscatejavascript **.js,**.html \\\n    -javascriptconfiguration javascript.yml\n</code></pre> <p>If your Code Push update consists of Hermes bytecode, you need to pass a Code Push mapping.</p> React Native Hermes <pre><code>java -jar &lt;dexguard-dir&gt;/lib/dexguard.jar \\\n    -injars CodePush \\\n    -outjars CodePush-protected \\\n    -applycodepushmapping codepushmapping.txt\n</code></pre> <p>This Code Push mapping is generated by DexGuard during your initially build of your application. If you built your application using Gradle, this mapping is by default stored in the 'build/outputs/dexguard/mapping/' directory. If you built your application using DexGuard standalone, you needed to specify an output location for this file with the <code>-printcodepushmapping</code> rule. </p> <p>Code Push mapping</p> <p>Note that you must protect your Hermes Code Push update if you protected your initial Hermes asset. If you no longer have access to this mapping file, a Code Push update will not work and you'll have to rebuild your application from scratch.</p> <p>DexGuard will generate the protected Code Push update to the path specified in <code>-outjars</code>. You can then simply upload it to the app center.</p> React NativeCordova <pre><code>appcenter codepush release \\\n    -a &lt;ownerName&gt;/&lt;appName&gt; \\\n    -c CodePush-protected \\\n    -t &lt;version&gt; \\\n    -d &lt;deployment&gt;\n</code></pre> <pre><code>appcenter codepush release \\\n    -a &lt;ownerName&gt;/&lt;appName&gt; \\\n    -c www-protected \\\n    -t &lt;version&gt; \\\n    -d &lt;deployment&gt;\n</code></pre>"},{"location":"indepth/codepush.html#using-the-dexguard-gradle-plugin","title":"Using the DexGuard gradle plugin","text":"<p>Alternatively, the DexGuard gradle plugin provides a <code>processCodePushUpdateWithDexGuard</code> task  which can do all of these things for you. To gain access to this task you simply extend your DexGuard configuration with a <code>codePush</code> block.  In this block you have to tell DexGuard where it can find the code push update and which  JavaScript configuration or codepushmapping you want to process the update with.  </p> KotlinGroovy <pre><code>dexguard {\n  path = \"/path/to/DexGuard\"\n  license = \"/path/to/dexguard-license.txt\"\n  configurations {\n    register(\"release\") {\n      defaultConfiguration(\"dexguard-release.pro\")\n      configuration(\"dexguard-project.txt\")\n      configuration(\"proguard-project.txt\")\n    }\n  }\n  codePush {\n    inputLocation = \"/path/to/CodePush\"\n    // Use 'configuration' if you are processing JavaScript.\n    configuration = \"/path/to/javascript.yml\"\n    // Use 'codepushMapping' if you are processing Hermes bytecode.\n    codepushMapping = \"/path/to/codepushmapping.txt\"\n  }\n}\n</code></pre> <pre><code>dexguard {\n  path = '/path/to/DexGuard'\n  license = '/path/to/dexguard-license.txt'\n  configurations {\n    release {\n      defaultConfiguration 'dexguard-release.pro'\n      configuration 'dexguard-project.txt'\n      configuration 'proguard-project.txt'\n    }\n  }\n  codePush {\n    inputLocation = '/path/to/CodePush'\n    // Use 'configuration' if you are processing JavaScript.\n    configuration = '/path/to/javascript.yml'\n    // Use 'codepushMapping' if you are processing Hermes bytecode.\n    codepushMapping = '/path/to/codepushmapping.txt'\n  }\n}\n</code></pre> <p>Once you have configured the task, you can execute it with the following command:</p> Linux/macOSWindows <pre><code>./gradlew processCodePushUpdateWithDexGuard\n</code></pre> <pre><code>gradlew processCodePushUpdateWithDexGuard\n</code></pre> <p>The task will place your protected Code Push update in the <code>outputs/dexguard/codepush</code> directory.</p>"},{"location":"indepth/codepush.html#limitations","title":"Limitations","text":""},{"location":"indepth/codepush.html#cordova","title":"Cordova","text":"<p>When using the DexGuard Cordova plugin you can encrypt the app's asset files. This is not supported when processing your code push updates. You can still encrypt the assets when protecting your app (for upload to the Play store), but once these assets are updated as part of a code push update the encryption will be removed.</p>"},{"location":"indepth/codepush.html#react-native","title":"React Native","text":"<p>When processing the app you cannot encrypt any asset or resource file, this includes the JavaScript bundle file. The same is true when processing the Code Push update, encrypting any of the asset or resource files is unsupported.</p>"},{"location":"indepth/codepush.html#organizational-tips","title":"Organizational tips","text":""},{"location":"indepth/codepush.html#put-your-dexguard-options-in-a-file","title":"Put your DexGuard options in a file","text":"<p>You can simplify the command you have to type by storing the DexGuard options in a file, <code>dexguard-codepush.txt</code> for example.</p> React Native JavaScriptReact Native HermesCordova <pre><code>-injars CodePush\n-outjars CodePush-protected\n\n-obfuscatejavascript **.bundle\n-javascriptconfiguration javascript.yml\n</code></pre> <pre><code>-injars CodePush\n-outjars CodePush-protected\n\n-applycodepushmapping codepushmapping.txt\n</code></pre> <pre><code>-injars platforms/android/app/src/main/assets/www\n-outjars www-protected\n\n-obfuscatejavascript **.js,**.html\n-javascriptconfiguration javascript.yml\n</code></pre> <p>You can then call DexGuard and pass in this file.</p> <pre><code>java -jar &lt;dexguard-dir&gt;/lib/dexguard.jar -include dexguard-codepush.txt\n</code></pre>"},{"location":"indepth/codepush.html#share-your-configuration","title":"Share your configuration","text":"<p>You may have noticed that you have to configure JavaScript obfuscation when processing both your app and code push update. It is possible to share this configuration, simply put the common parts in a separate file, <code>dexguard-javascript.txt</code> for example.</p> React- NativeCordova <pre><code>-obfuscatejavascript **.bundle\n-javascriptconfiguration javascript.yml\n</code></pre> <pre><code>-obfuscatejavascript **.js,**.html\n-javascriptconfiguration javascript.yml\n</code></pre> <p>You can then include this file when processing your app and Code Push update</p> Processing app (build.gradle)Processing Code Push update <pre><code>dexguard {\n    ...\n    configurations {\n        release {\n            defaultConfiguration 'dexguard-release.pro'\n            configuration 'dexguard-project.txt'\n            configuration 'dexguard-javascript.txt'\n        }\n    }\n}\n</code></pre> <pre><code>java -jar &lt;dexguard-dir&gt;/lib/dexguard.jar \\\n    -include dexguard-codepush.txt \\\n    -include dexguard-javascript.txt\n</code></pre> <p>Alternatively, you can also include the <code>dexguard-javascript.txt</code> configuration file in your configurations directory using the <code>-include</code> option. Below is an example of this in <code>dexguard-codepush.txt</code>.</p> React NativeCordova <pre><code>-injars CodePush\n-outjars CodePush-protected\n-include dexguard-javascript.txt\n</code></pre> <pre><code>-injars platforms/android/app/src/main/assets/www\n-outjars www-protected\n-include dexguard-javascript.txt\n</code></pre> <p>Differing paths</p> <p>Be warned that the files have a different path in the app than they have in the Code Push update, so the rules to target them might differ!</p> <p>For example, when using Cordova and trying to obfuscate the <code>index.js</code> file you would use the following rule for the app <pre><code>-obfuscatejavascript assets/www/js/index.js\n</code></pre> and this rule for the Code Push update <pre><code>-obfuscatejavascript www/js/index.js\n</code></pre></p> AndroidiOS <p>For React Native you would use this rule for the app <pre><code>-obfuscatejavascript assets/index.android.bundle\n</code></pre> and the rule below for the code push update (assuming the root directory we used in our examples above) <pre><code>-obfuscatejavascript CodePush/index.android.bundle\n</code></pre></p> <p>For React Native you would use this rule for the app <pre><code>-obfuscatejavascript assets/index.ios.bundle\n</code></pre> and the rule below for the Code Push update (assuming the root directory we used in our examples above) <pre><code>-obfuscatejavascript CodePush/index.ios.bundle\n</code></pre></p> <p>The rules given as an example on this page work for both apps and Code Push updates due to the use of wildcards.</p>"},{"location":"indepth/examples.html","title":"Examples","text":"<p>The DexGuard default configurations already provide support for the following libraries:</p> <ul> <li>ActionBarSherlock</li> <li>Amazon Ads</li> <li>Apache logging</li> <li>ButterKnife</li> <li>Cordova</li> <li>Cordova Crosswalk</li> <li>Couchbase Lite</li> <li>Crashlytics</li> <li>Dagger</li> <li>Droidsonroids Gif</li> <li>Ektorp</li> <li>Eyes-two</li> <li>Facebook API</li> <li>Facebook Conceal</li> <li>Facebook Fresco</li> <li>Glide</li> <li>Google API</li> <li>Google Cloud Messaging</li> <li>Google GData</li> <li>Google Play Services</li> <li>Google Play market LVL</li> <li>Google Play market expansion</li> <li>Greenrobot EventBus</li> <li>Guava</li> <li>IOCipher</li> <li>Jackson</li> <li>Java Mail</li> <li>JNA</li> <li>LibGDX</li> <li>LogBack</li> <li>MediaPlayerSDK</li> <li>MorphoSmart</li> <li>Nuance Vocalizer</li> <li>OkHttp</li> <li>OkIo</li> <li>OrmLite</li> <li>Otto</li> <li>Paypal card.io</li> <li>React Native</li> <li>Realm</li> <li>Retrofit</li> <li>RoboGuice</li> <li>RxJava</li> <li>SQLCipher</li> <li>Tapjoy</li> <li>Tess-two</li> <li>ZBar</li> </ul> <p>You can browse through this section if you are creating a build process from scratch, or if your project requires further customization.</p>"},{"location":"indepth/examples.html#android","title":"A simple Android application","text":"<p>The DexGuard default configurations already specify these settings for you.</p> <p>If you're constructing a build process from scratch: these options shrink, optimize, and obfuscate all public activities, services, broadcast receivers, and content providers from the compiled classes and external libraries:</p> <pre><code>-injars      bin/classes\n-injars      bin/resources.ap_\n-injars      libs\n-outjars     bin/application.apk\n-libraryjars /usr/local/android-sdk/platforms/android-28/android.jar\n\n-dalvik\n-repackageclasses 'x'\n-allowaccessmodification\n\n-keepresourcefiles         AndroidManifest.xml\n-adaptresourcefilecontents AndroidManifest.xml,resources.arsc,\n                           !res/raw**,res/**.xml\n-dontcompress resources.arsc,**.jpg,**.jpeg,**.png,**.gif\n\n-keepresourcexmlattributenames\n    manifest/installLocation,\n    manifest/versionCode,\n    manifest/application/*/intent-filter/*/name\n\n-keepattributes *Annotation*\n\n-keep public class * extends android.view.View {\n    public &lt;init&gt;(android.content.Context);\n    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);\n    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);\n    public void set*(...);\n}\n\n-keepclasseswithmembers class * {\n    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);\n}\n\n-keepclasseswithmembers class * {\n    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);\n}\n\n-keepclassmembers class * extends android.content.Context {\n   public void *(android.view.View);\n   public void *(android.view.MenuItem);\n}\n\n-keepclassmembers class * implements android.os.Parcelable {\n    static ** CREATOR;\n}\n\n-keepclassmembers class **.R$* {\n    public static &lt;fields&gt;;\n}\n\n-keepclassmembers class * {\n    @android.webkit.JavascriptInterface &lt;methods&gt;;\n}\n</code></pre> <p>We're specifying the input, the output, and the underlying run-time. We're targeting the Android run-time and the Dalvik virtual machine, with the <code>-dalvik</code> option.</p> <p>With <code>-keepresourcefiles</code>, we're keeping the Android manifest file as the main entry point of the application. DexGuard can then determine which resources and which code are required and how they can be optimized and obfuscated.</p> <p>With <code>-adaptresourcefilecontents</code>, we're adapting the obfuscated names inside the Android manifest file and the various binary resource files.</p> <p>The <code>-dontcompress</code> option specifies which files should not be compressed inside apk files, typically because they are already compressed themselves. The DexGuard plugins provide a long list of such files.</p> <p>Inside the Android manifest file, we're keeping some attribute names. The Android runtime somewhat arbitrarily requires them to launch the application. Names of other attributes that have numeric identifiers can be discarded.</p> <p>We're keeping annotations, since they might be used by custom <code>RemoteViews</code> and by various frameworks.</p> <p>We're keeping any custom <code>View</code> extensions and other classes with typical constructors, since they might be referenced from XML layout files.</p> <p>We're also keeping possible <code>onClick</code> handlers in custom <code>Context</code> extensions, since they might be referenced from XML layout files.</p> <p>We're also keeping the required static fields in <code>Parcelable</code> implementations, since they are accessed by introspection.</p> <p>We're keeping the static fields of referenced inner classes of auto-generated <code>R</code> classes, just in case your code is accessing those fields by introspection. Note that the compiler already inlines primitive fields, so DexGuard can generally remove all these classes entirely anyway (because the classes are not referenced and therefore not required).</p> <p>Finally, we're keeping annotated Javascript interface methods, so they can be exported and accessed by their original names. Javascript interface methods that are not annotated (in code targeted at Android versions older than 4.2) still need to be preserved manually.</p> <p>If you're using additional Google APIs, you'll have to specify those as well, for instance:</p> <pre><code>-libraryjars /usr/local/java/android-sdk/extras/android/support/v4/android-support-v4.jar\n-libraryjars /usr/local/java/android-sdk/add-ons/addon-google_apis-google-21/libs/maps.jar\n</code></pre> <p>If you're using Google's optional License Verification Library, you can obfuscate its code along with your own code. You do have to preserve its <code>ILicensingService</code> interface for the library to work:</p> <pre><code>-keep public interface com.android.vending.licensing.ILicensingService\n</code></pre> <p>If you're using the Android Compatibility library, you should add the following line, to let DexGuard know it's ok that the library references some classes that are not available in all versions of the API:</p> <pre><code>-dontwarn android.support.**\n</code></pre> <p>If applicable, you should add options for processing native methods, callback methods, enumerations, Android resources, and resource files. You may also want to add options for producing useful stack traces and to remove logging. You can find a complete sample configuration in <code>extras/android.pro</code> in the DexGuard distribution.</p> <p>Working sample project: <code>samples/setup/HelloDexGuard</code></p>"},{"location":"indepth/examples.html#scala","title":"Applications with the Scala runtime","text":"<p>These additional options shrink, optimize, and obfuscate Scala applications in <code>bin/classes</code>:</p> <pre><code>-injars      bin/classes\n-injars      bin/resources.ap_\n-injars      libs\n-injars      /usr/local/scala-2.9.1/lib/scala-library.jar\n-outjars     bin/application.apk\n-libraryjars /usr/local/android-sdk/platforms/android-28/android.jar\n\n// ... Add the standard settings for Android applications ...\n\n-dontwarn scala.**\n\n-keep class * implements org.xml.sax.EntityResolver\n\n-keepclassmembers class * {\n    ** MODULE$;\n}\n\n-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinPool {\n    long eventCount;\n    int  workerCounts;\n    int  runControl;\n    scala.concurrent.forkjoin.ForkJoinPool$WaitQueueNode syncStack;\n    scala.concurrent.forkjoin.ForkJoinPool$WaitQueueNode spareStack;\n}\n\n-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinWorkerThread {\n    int base;\n    int sp;\n    int runState;\n}\n\n-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinTask {\n    int status;\n}\n\n-keepclassmembernames class scala.concurrent.forkjoin.LinkedTransferQueue {\n    scala.concurrent.forkjoin.LinkedTransferQueue$PaddedAtomicReference head;\n    scala.concurrent.forkjoin.LinkedTransferQueue$PaddedAtomicReference tail;\n    scala.concurrent.forkjoin.LinkedTransferQueue$PaddedAtomicReference cleanMe;\n}\n</code></pre> <p>The configuration is an extension of the configuration for processing activities, because Scala is compiled to ordinary Java bytecode. However, the example processes the Scala runtime library as well. The processed jar can be an order of magnitude smaller and a few times faster than the original code (for the Scala code examples, for instance).</p> <p>The <code>-dontwarn</code> option tells DexGuard not to complain about some artefacts in the Scala runtime, the way it is compiled by the <code>scalac</code> compiler (at least in Scala 2.9.1 and older). Note that this option should always be used with care.</p> <p>The additional <code>-keep</code> options make sure that some classes and some fields that are accessed by means of introspection are not removed or renamed.</p> <p>If applicable, you should add options for processing native methods, callback methods, enumerations, serializable classes, bean classes, annotations, and resource files.</p>"},{"location":"indepth/examples.html#library","title":"A typical library","text":"<p>The DexGuard default configurations already specify these settings for you.</p> <p>If you're constructing a build process from scratch: these options shrink, optimize, and obfuscate an entire library, keeping all public and protected classes and class members, native method names, and serialization code. The processed version of the library can then still be used as such, for developing code based on its public API.</p> <pre><code>-injars       in.jar\n-outjars      out.jar\n-libraryjars  /usr/local/android-sdk/platforms/android-28/android.jar\n-printmapping out.map\n\n-keepresourcefiles **\n-keepresources */*\n\n-keep public class * {\n    public protected *;\n}\n\n-keepparameternames\n-renamesourcefileattribute SourceFile\n-keepattributes Signature,Exceptions,*Annotation*,\n                InnerClasses,PermittedSubclasses,EnclosingMethod,\n                Deprecated,SourceFile,LineNumberTable\n\n-keepclasseswithmembernames,includedescriptorclasses class * {\n    native &lt;methods&gt;;\n}\n\n-keepclassmembers,allowoptimization enum * {\n    public static **[] values();\n    public static ** valueOf(java.lang.String);\n}\n\n-keepclassmembers class * implements java.io.Serializable {\n    static final long serialVersionUID;\n    private static final java.io.ObjectStreamField[] serialPersistentFields;\n    private void writeObject(java.io.ObjectOutputStream);\n    private void readObject(java.io.ObjectInputStream);\n    java.lang.Object writeReplace();\n    java.lang.Object readResolve();\n}\n</code></pre> <p>This configuration should preserve everything a developer ever needs to access in the library: all Android resources and all public and protected classes, fields, and methods. We could refine the wildcards if we only want to include part of the resources (only one language, for instance) or part of the code (only a few packages, for instance).</p> <p>If there are any non-public classes, fields, or methods that are invoked dynamically, we should be specify them using additional <code>-keep</code> options.</p> <p>The \"Signature\" attribute is required to be able to access generic types.</p> <p>The \"Exceptions\" attribute has to be preserved, so the compiler knows which exceptions methods may throw.</p> <p>The \"InnerClasses\" attribute (or more precisely, its source name part) has to be preserved too, for any inner classes that can be referenced from outside the library. The <code>javac</code> compiler would be unable to find the inner classes otherwise.</p> <p>The \"PermittedSubclasses\" attribute defines sealed classes, which developers can't extend further.</p> <p>The \"EnclosingMethod\" attribute marks classes that are defined inside methods.</p> <p>The \"Deprecated\" attribute marks any deprecated classes, fields, or methods, which may be useful for developers to know.</p> <p>The <code>-keepparameternames</code> option keeps the parameter names in the \"LocalVariableTable\" and \"LocalVariableTypeTable\" attributes of public library methods. Some IDEs can present these names to the developers who use the library.</p> <p>Finally, we're keeping the \"Deprecated\" attribute and the attributes for producing useful stack traces.</p> <p>We've also added some options for for processing native methods, enumerations, serializable classes, and annotations, which are all discussed in their respective examples.</p>"},{"location":"indepth/examples.html#instantapp","title":"Creating an Instant App","text":"<p>DexGuard can automatically transform a traditional installed app into an Instant App. You only need to specify the Instant app features. For example, if your Android manifest specifies two activities, HelloActivity and GoodbyeActivity, you can create Instant app feature apks and a base apk for them:</p> <pre><code>-instantappfeature hello com.example.HelloActivity   https://example.com/hello\n-instantappfeature bye   com.example.GoodbyeActivity https://example.com/bye\n</code></pre> <p>You can freely choose the feature names. The activities should be present in the Android manifest. You can also freely choose the URLs through which you can access the features when they are installed.</p>"},{"location":"indepth/examples.html#native","title":"Processing native methods","text":"<p>The default configuration of the DexGuard plugins already specifies these settings for you.</p> <p>If your application contains native methods, you'll want to preserve their names and their classes' names, so they can still be linked to the native library. The following additional option will ensure that:</p> <pre><code>-keepclasseswithmembernames,includedescriptorclasses class * {\n    native &lt;methods&gt;;\n}\n</code></pre> <p>Note the use of <code>-keepclasseswithmembernames</code>. We don't want to preserve all classes or all native methods; we just want to keep the relevant names from being obfuscated. The modifier <code>includedescriptorclasses</code> additionally makes sure that the return types and parameter types aren't renamed either, so the entire signatures remain compatible with the native libraries.</p> <p>DexGuard doesn't look at your native code, so it won't automatically preserve the classes or class members that are invoked by the native code. These are entry points, which you'll have to specify explicitly. Callback methods are discussed below as a typical example.</p> <p>Working sample project: <code>samples/features/NativeLibraryEncryption</code></p>"},{"location":"indepth/examples.html#callback","title":"Processing callback methods","text":"<p>If your application contains callback methods, which are called from external code (native code, scripts,...), you'll want to preserve them, and probably their classes too. They are just entry points to your code, much like, say, the main method of an application. If they aren't preserved by other <code>-keep</code> options, something like the following option will keep the callback class and method:</p> <pre><code>-keep class com.example.MyCallbackClass {\n    void myCallbackMethod(java.lang.String);\n}\n</code></pre> <p>This will preserve the given class and method from being removed or renamed.</p>"},{"location":"indepth/examples.html#enumerations","title":"Processing enumeration classes","text":"<p>The DexGuard default configurations already specify these settings for you.</p> <p>If your application contains enumeration classes, you'll have to preserve some special methods. Enumerations were introduced in Java 5. The java compiler translates enumerations into classes with a special structure. Notably, the classes contain implementations of some static methods that the run-time environment accesses by introspection (Isn't that just grand? Introspection is the self-modifying code of a new generation). You have to specify these explicitly, to make sure they aren't removed or obfuscated:</p> <pre><code>-keepclassmembers,allowoptimization enum * {\n    public static **[] values();\n    public static ** valueOf(java.lang.String);\n}\n</code></pre>"},{"location":"indepth/examples.html#serializable","title":"Processing serializable classes","text":"<p>More complex applications may contain classes that are serialized. Depending on the way in which they are used, they may require special attention:</p> <ul> <li>Often, serialization is simply a means of transporting data, without   long-term storage. Classes that are shrunk and obfuscated should then   continue to function fine with the following additional options:</li> </ul> <pre><code>-keepclassmembers class * implements java.io.Serializable {\n  private static final java.io.ObjectStreamField[] serialPersistentFields;\n  private void writeObject(java.io.ObjectOutputStream);\n  private void readObject(java.io.ObjectInputStream);\n  java.lang.Object writeReplace();\n  java.lang.Object readResolve();\n}\n</code></pre> <p>The <code>-keepclassmembers</code> option makes sure   that any serialization methods are kept. By using this option instead of   the basic <code>-keep</code> option, we're not forcing preservation of all   serializable classes, just preservation of the listed members of classes   that are actually used.</p> <ul> <li>Sometimes, the serialized data are stored, and read back later into newer   versions of the serializable classes. One then has to take care the classes   remain compatible with their unprocessed versions and with future processed   versions. In such cases, the relevant classes will most likely have   <code>serialVersionUID</code> fields. The following options should then be sufficient   to ensure compatibility over time:</li> </ul> <pre><code>-keepnames class * implements java.io.Serializable\n\n-keepclassmembers class * implements java.io.Serializable {\n  static final long serialVersionUID;\n  private static final java.io.ObjectStreamField[] serialPersistentFields;\n  !static !transient &lt;fields&gt;;\n  private void writeObject(java.io.ObjectOutputStream);\n  private void readObject(java.io.ObjectInputStream);\n  java.lang.Object writeReplace();\n  java.lang.Object readResolve();\n}\n</code></pre> <p>The <code>serialVersionUID</code> and <code>serialPersistentFields</code> lines makes sure those   fields are preserved, if they are present. The <code>&lt;fields&gt;</code> line preserves   all non-static, non-transient fields, with their original names. The   introspection of the serialization process and the de-serialization   process will then find consistent names.</p> <ul> <li>Occasionally, the serialized data have to remain compatible, but the classes   involved lack <code>serialVersionUID</code> fields. I imagine the original code will   then be hard to maintain, since the serial version UID is then computed from   a list of features the serializable class. Changing the class ever so   slightly may change the computed serial version UID. The list of features is   specified in the section on Stream Unique   Identifiers   of Sun's Java Object Serialization   Specification.   The following directives should at least partially ensure compatibility with   the original classes:</li> </ul> <pre><code>-keepnames class * implements java.io.Serializable\n\n-keepclassmembers class * implements java.io.Serializable {\n  static final long serialVersionUID;\n  private static final java.io.ObjectStreamField[] serialPersistentFields;\n  !static !transient &lt;fields&gt;;\n  !private &lt;fields&gt;;\n  !private &lt;methods&gt;;\n  private void writeObject(java.io.ObjectOutputStream);\n  private void readObject(java.io.ObjectInputStream);\n  java.lang.Object writeReplace();\n  java.lang.Object readResolve();\n}\n</code></pre> <p>The new options force preservation of the elements involved in the UID   computation. In addition, the user will have to manually specify all   interfaces of the serializable classes (using something like \"<code>-keep   interface MyInterface</code>\"), since these names are also used when computing   the UID. A fast but sub-optimal alternative would be simply keeping all   interfaces with \"<code>-keep interface *</code>\".</p> <ul> <li>In the rare event that you are serializing lambda expressions in Java 8 or   higher, you need to preserve some methods and adapt the hard-coded names of   the classes in which they occur:</li> </ul> <pre><code>-keepclassmembers class * {\n  private static synthetic java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);\n}\n\n-keepclassmembernames class * {\n  private static synthetic *** lambda$*(...);\n}\n\n-adaptclassstrings com.example.Test\n</code></pre> <p>This should satisfy the reflection in the deserialization code of   the Java run-time.</p> <p>Note that the above options may preserve more classes and class members than strictly necessary. For instance, a large number of classes may implement the <code>Serialization</code> interface, yet only a small number may actually ever be serialized. Knowing your application and tuning the configuration often produces more compact results.</p>"},{"location":"indepth/examples.html#beans","title":"Processing bean classes","text":"<p>If your application makes extensive use of introspection on bean classes to find bean editor classes, or getter and setter methods, then configuration may become painful. There's not much else you can do than making sure the bean class names, or the getter and setter names don't change. For instance:</p> <pre><code>-keep public class com.example.MyBean {\n    public void setMyProperty(int);\n    public int getMyProperty();\n}\n\n-keep public class com.example.MyBeanEditor\n</code></pre> <p>If there are too many elements to list explicitly, wildcards in class names and method signatures might be helpful. This example preserves all possible setters and getters in classes in the package <code>mybeans</code>:</p> <pre><code>-keep class mybeans.** {\n    void set*(***);\n    void set*(int, ***);\n\n    boolean is*();\n    boolean is*(int);\n\n    *** get*();\n    *** get*(int);\n}\n</code></pre> <p>The '<code>***</code>' wildcard matches any type (primitive or non-primitive, array or non-array). The methods with the '<code>int</code>' arguments matches properties that are lists.</p>"},{"location":"indepth/examples.html#annotations","title":"Processing annotations","text":"<p>The default configuration of the DexGuard plugins already specifies these settings for you.</p> <p>If your application uses annotations, you may want to preserve them in the processed output. Annotations are represented by attributes that have no direct effect on the execution of the code. However, their values can be retrieved through introspection, allowing developers to adapt the execution behavior accordingly. By default, DexGuard treats annotation attributes as optional, and removes them in the obfuscation step. If they are required, you'll have to specify this explicitly:</p> <pre><code>-keepattributes *Annotation*\n</code></pre> <p>For brevity, we're specifying a wildcarded attribute name, which will match <code>RuntimeVisibleAnnotations</code>, <code>RuntimeInvisibleAnnotations</code>, <code>RuntimeVisibleParameterAnnotations</code>, <code>RuntimeInvisibleParameterAnnotations</code>, and <code>AnnotationDefault</code>. Depending on the purpose of the processed code, you could refine this selection, for instance not keeping the run-time invisible annotations (which are only used at compile-time).</p> <p>Some code may make further use of introspection to figure out the enclosing methods of anonymous inner classes. In that case, the corresponding attribute has to be preserved as well:</p> <pre><code>-keepattributes EnclosingMethod\n</code></pre>"},{"location":"indepth/examples.html#database","title":"Processing database drivers","text":"<p>Database drivers are implementations of the <code>Driver</code> interface. Since they are often created dynamically, you may want to preserve any implementations that you are processing as entry points:</p> <pre><code>-keep class * implements java.sql.Driver\n</code></pre> <p>This option also gets rid of the note that DexGuard prints out about <code>(java.sql.Driver)Class.forName</code> constructs, if you are instantiating a driver in your code (without necessarily implementing any drivers yourself).</p>"},{"location":"indepth/examples.html#gson","title":"Optimizing GSON code","text":"<p>DexGuard optimizes Gson code, by detecting which domain classes are serialized using the Gson library, and then replacing the reflection-based implementation by more efficient hard-coded serialization.</p> <p>The GSON optimization is enabled by default and doesn't require any additional configuration. If you've disabled optimization, the GSON library still relies on reflection on the fields of the classes that it serializes. You then need to preserve the parameterless constructor and the serialized fields from being removed, optimized, or obfuscated. For example:</p> <pre><code>-keepclassmembers class com.example.SerializedClass {\n    &lt;fields&gt;;\n    &lt;init&gt;();\n}\n</code></pre> <p>While creating the configuration, you can specify the option <code>-addconfigurationdebugging</code>, to get feedback on the necessary settings at run-time.</p> <p>Alternatively, you can make sure the fields are explicitly annotated with <code>@SerializedName</code>, so the names of the fields can be obfuscated. You can then keep all of them at the same time with:</p> <pre><code>-keepclasseswithmembers,allowobfuscation,includedescriptorclasses class * {\n    @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\n\n-keepclassmembers enum * {\n    @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\n</code></pre> <p>Working sample project: <code>samples/advanced/Gson</code></p>"},{"location":"indepth/examples.html#injection","title":"Processing dependency injection","text":"<p>The DexGuard default configurations already specify these settings for you.</p> <p>Your application may be using a framework for dependency injection, such as Spring. Such frameworks automatically assign instances of resource classes to fields and method parameters. They heavily rely on annotations and introspection, even accessing private class members directly. We then have to avoid that such fields or methods are removed or renamed. For example:</p> <pre><code>-keepclassmembers class * {\n    @javax.annotation.Resource *;\n}\n</code></pre> <p>The Spring framework has another similar annotation <code>@Autowired</code>:</p> <pre><code>-keepclassmembers class * {\n    @org.springframework.beans.factory.annotation.Autowired *;\n}\n</code></pre>"},{"location":"indepth/examples.html#dagger","title":"Processing Dagger code","text":"<p>The DexGuard default configurations already specify these settings for you.</p> <p>Your application may be using the Dagger library for its dependency injection.</p> <p>Dagger 1 relies heavily on reflection, so you may need some additional configuration to make sure it continues to work. DexGuard's default configuration already keeps some required classes:</p> <pre><code>-keepclassmembers,allowobfuscation class * {\n    @dagger.** *;\n}\n\n-keep class **$$ModuleAdapter\n-keep class **$$InjectAdapter\n-keep class **$$StaticInjection\n\n-if   class **$$ModuleAdapter\n-keep class &lt;1&gt;\n\n-if   class **$$InjectAdapter\n-keep class &lt;1&gt;\n\n-if   class **$$StaticInjection\n-keep class &lt;1&gt;\n\n-keepnames class dagger.Lazy\n</code></pre> <p>That way, Dagger can combine the corresponding pairs of classes, based on their names.</p> <p>Furthermore, if your code injects dependencies into some given classes with an annotation like <code>@Module(injects = { SomeClass.class }, ...)</code>, you need to preserve the specified names as well:</p> <pre><code>-keep class com.example.SomeClass\n</code></pre> <p>Dagger 2 no longer relies on reflection. You don't need to preserve any classes there.</p> <p>Working sample project: <code>samples/advanced/Dagger</code></p>"},{"location":"indepth/examples.html#butterknife","title":"Processing Butterknife code","text":"<p>If your application includes Butterknife to inject views, you also need a few lines of configuration, since Butterknife relies on reflection to tie together the code at runtime:</p> <pre><code>-keep @interface butterknife.*\n\n-keepclasseswithmembers class * {\n    @butterknife.* &lt;fields&gt;;\n}\n\n-keepclasseswithmembers class * {\n    @butterknife.* &lt;methods&gt;;\n}\n\n-keepclasseswithmembers class * {\n    @butterknife.On* &lt;methods&gt;;\n}\n\n-keep class **$$ViewInjector {\n    public static void inject(...);\n    public static void reset(...);\n}\n\n-keep class **$$ViewBinder {\n    public static void bind(...);\n    public static void unbind(...);\n}\n\n-if   class **$$ViewBinder\n-keep class &lt;1&gt;\n\n-keep class **_ViewBinding {\n    &lt;init&gt;(&lt;1&gt;, android.view.View);\n}\n\n-if   class **_ViewBinding\n-keep class &lt;1&gt;\n</code></pre> <p>These settings preserve the Butterknife annotations, the annotated fields and methods, and the generated classes and methods that Butterknife accesses by reflection.</p>"},{"location":"indepth/examples.html#restring","title":"Processing Restring code","text":"<p>If you application includes the Restring library to dynamically replace resource strings, you need some additional configuration. Restring relies on the names of resource strings (with <code>Resources#getResourceEntryName</code>) and the names of attributes in resource XML files (with <code>AttributeSet#getAttributeName</code>). Conservatively, you can keep all resource strings with their original names, and all attribute names:</p> <pre><code>-keepresources string/**\n-keepresourcexmlattributenames **\n</code></pre> <p>For more fine-tuned settings without the broad wildcards, you can inspect the <code>StringsLoader</code> implementation in your code or specify the option <code>-addconfigurationdebugging</code>, to get feedback on the necessary settings at run-time.</p>"},{"location":"indepth/examples.html#resources","title":"Processing Android resources","text":"<p>Your Android application typically contains resources and resource files. It will generally access them through their numeric IDs from <code>R</code> classes, for example <code>R.drawable.my_icon</code>. The shrinking, optimization, and obfuscation steps handle such use automatically. However, if your application accesses some resources by reflection, based on their name strings, you need to preserve these names from being obfuscated. For example, for <code>resources.getIdentifier(\"my_icon\", \"drawable\", package)</code>, you need to preserve the corresponding resource with its original name:</p> <pre><code>-keepresources drawable/my_icon\n</code></pre> <p>The <code>-keepresources</code> option preserves the specified resources. You can use wildcards. For a quick test, you can preserve all resources with their original names:</p> <pre><code>-keepresources */*\n</code></pre> <p>In some rare cases, your application may be referring to the resource files directly, by their names. You then need to preserve them with their original names. For example:</p> <pre><code>-keepresourcefiles res/drawable*/my_icon.png\n</code></pre> <p>The <code>-keepresourcefiles</code> option preserves the specified resource files, which are technically independent from the corresponding resources. With wild-cards:</p> <pre><code>-keepresourcefiles res/*/*\n</code></pre>"},{"location":"indepth/examples.html#resourcefiles","title":"Processing general resource files","text":"<p>If your application contains resource files, it may be necessary to adapt their names and/or their contents when the application is obfuscated. The following two options can achieve this automatically:</p> <pre><code>-adaptresourcefilenames    **.properties,**.gif,**.jpg\n-adaptresourcefilecontents **.properties,META-INF/MANIFEST.MF\n</code></pre> <p>The <code>-adaptresourcefilenames</code> option in this case renames properties files and image files in the processed output, based on the obfuscated names of their corresponding class files (if any). The <code>-adaptresourcefilecontents</code> option looks for class names in properties files and in the manifest file, and replaces these names by the obfuscated names (if any). You'll probably want to adapt the filters to suit your application.</p>"},{"location":"indepth/examples.html#manifestfiles","title":"Processing manifest files","text":"<p>As illustrated in the previous section, manifest files can be treated like ordinary resource files. DexGuard can adapt obfuscated class names in the files, but it won't make any other changes. If you want anything else, you should apply an external tool. For instance, if a manifest file contains signing information, you should sign the jar again after it has been processed.</p> <p>If you're merging several input jars into a single output jar, you'll have to pick one, typically by specifying filters:</p> <pre><code>-injars  in1.jar\n-injars  in2.jar(!META-INF/MANIFEST.MF)\n-injars  in3.jar(!META-INF/MANIFEST.MF)\n-outjars out.jar\n</code></pre> <p>The filters will let DexGuard copy the manifest file from the first jar and ignore any manifest files in the second and third input jars. Note that DexGuard will leave the order of the files in the jars unchanged; manifest files are not necessarily put first.</p>"},{"location":"indepth/examples.html#reflection","title":"Adding reflection for sensitive APIs","text":"<p>You can add reflection to obfuscate access to sensitive APIs, with the option <code>-accessthroughreflection</code>. For instance, this option replaces access to the standard cryptographic <code>SecretKey</code> class by equivalent reflective code:</p> <pre><code>-accessthroughreflection class javax.crypto.SecretKey {\n    byte] getEncoded();\n}\n</code></pre> <p>For better obfuscation, you'll typically want to encrypt the resulting strings:</p> <pre><code>-encryptstrings \"javax.crypto.SecretKey\", \"getEncoded\"\n</code></pre> <p>or simply all strings in the class from which the cryptographic class is called:</p> <pre><code>-encryptstrings class com.example.MySecretClass\n</code></pre> <p>Finally, you can add another layer of obfuscation by also encrypting the latter class:</p> <pre><code>-encryptclasses com.example.MySecretClass\n</code></pre> <p>Working sample project: <code>samples/features/Reflection</code></p>"},{"location":"indepth/examples.html#classencryption","title":"Encrypting classes","text":"<p>You can encrypt entire classes by specifying them with the option <code>-encryptclasses</code>. It accepts a filter, which can contain wildcards and negators. For example:</p> <pre><code>-encryptclasses com.example.MySecretClass, com.example.MySecretClass$*\n</code></pre> <p>This option instructs to encrypt the specified class and all of its inner classes. The latter classes are easy to forget, because they are defined in the same source file, but they may be important too.</p> <p>Working sample project: <code>samples/features/ClassEncryption</code></p>"},{"location":"indepth/examples.html#stringencryption","title":"Encrypting strings","text":"<p>There are a few alternative ways to specify which constant strings in the code should be encrypted, with the option <code>-encryptstrings</code>. The shortest way is to specify the strings literally:</p> <pre><code>-encryptstrings \"Some secret string\", \"Some other secret string\"\n</code></pre> <p>In this case, the option has a filter, which can contain wildcards and negators. Alternatively, you can specify <code>final String</code> fields, whose strings should be encrypted wherever they occur. For example:</p> <pre><code>-encryptstrings public class com.example.MyConstants {\n    public static final java.lang.String SECRET_KEY;\n}\n</code></pre> <p>Alternatively, you can specify methods whose constant strings should all be encrypted. For example:</p> <pre><code>-encryptstrings public class com.example.MySensitiveClass {\n    public void mySecretMethod();\n}\n</code></pre> <p>Finally, you can just specify classes whose constant strings should all be encrypted. For example:</p> <pre><code>-encryptstrings public class com.example.MySecretClass\n</code></pre> <p>In these last three cases, the options have class specifications that specify one or more classes, fields, or methods. These specifications support multiple elements and various wildcards.</p> <p>Working sample project: <code>samples/features/StringEncryption</code></p>"},{"location":"indepth/examples.html#stacktrace","title":"Producing useful obfuscated stack traces","text":"<p>The DexGuard default configurations already specify these settings for you.</p> <p>These options let obfuscated applications or libraries produce stack traces that can still be deciphered later on:</p> <pre><code>-printmapping out.map\n\n-renamesourcefileattribute SourceFile\n-keepattributes SourceFile,LineNumberTable\n</code></pre> <p>We're keeping all source file attributes, but we're replacing their values by the string \"SourceFile\". We could use any string.</p> <p>We're also keeping the line number tables of all methods.</p> <p>Whenever both of these attributes are present, the Java run-time environment will include line number information when printing out exception stack traces.</p> <p>The information will only be useful if we can map the obfuscated names back to their original names, so we're saving the mapping to a file <code>out.map</code>. The information can then be used by the ReTrace tool to restore the original stack trace.</p>"},{"location":"indepth/examples.html#repackaging","title":"Obfuscating package names","text":"<p>The DexGuard default configurations already specify these settings for you.</p> <p>Package names can be obfuscated in various ways, with increasing levels of obfuscation and compactness. For example, consider the following classes:</p> <pre><code>mycompany.myapplication.MyMain\nmycompany.myapplication.Foo\nmycompany.myapplication.Bar\nmycompany.myapplication.extra.FirstExtra\nmycompany.myapplication.extra.SecondExtra\nmycompany.util.FirstUtil\nmycompany.util.SecondUtil\n</code></pre> <p>Let's assume the class name <code>mycompany.myapplication.MyMain</code> is the main application class that is kept by the configuration. All other class names can be obfuscated.</p> <p>By default, packages that contain classes that can't be renamed aren't renamed either, and the package hierarchy is preserved. This results in obfuscated class names like these:</p> <pre><code>mycompany.myapplication.MyMain\nmycompany.myapplication.a\nmycompany.myapplication.b\nmycompany.myapplication.a.a\nmycompany.myapplication.a.b\nmycompany.a.a\nmycompany.a.b\n</code></pre> <p>The <code>-flattenpackagehierarchy</code> option obfuscates the package names further, by flattening the package hierarchy of obfuscated packages:</p> <pre><code>-flattenpackagehierarchy 'myobfuscated'\n</code></pre> <p>The obfuscated class names then look as follows:</p> <pre><code>mycompany.myapplication.MyMain\nmycompany.myapplication.a\nmycompany.myapplication.b\nmyobfuscated.a.a\nmyobfuscated.a.b\nmyobfuscated.b.a\nmyobfuscated.b.b\n</code></pre> <p>Alternatively, the <code>-repackageclasses</code> option obfuscates the entire packaging, by combining obfuscated classes into a single package:</p> <pre><code>-repackageclasses 'myobfuscated'\n</code></pre> <p>The obfuscated class names then look as follows:</p> <pre><code>mycompany.myapplication.MyMain\nmycompany.myapplication.a\nmycompany.myapplication.b\nmyobfuscated.a\nmyobfuscated.b\nmyobfuscated.c\nmyobfuscated.d\n</code></pre> <p>Additionally specifying the <code>-allowaccessmodification</code> option allows access permissions of classes and class members to be broadened, opening up the opportunity to repackage all obfuscated classes:</p> <pre><code>-repackageclasses 'myobfuscated'\n-allowaccessmodification\n</code></pre> <p>The obfuscated class names then look as follows:</p> <pre><code>mycompany.myapplication.MyMain\nmyobfuscated.a\nmyobfuscated.b\nmyobfuscated.c\nmyobfuscated.d\nmyobfuscated.e\nmyobfuscated.f\n</code></pre> <p>The specified target package can always be the root package. For instance:</p> <pre><code>-repackageclasses ''\n-allowaccessmodification\n</code></pre> <p>The obfuscated class names are then the shortest possible names:</p> <pre><code>mycompany.myapplication.MyMain\na\nb\nc\nd\ne\nf\n</code></pre> <p>Note that not all levels of obfuscation of package names may be acceptable for all code. Notably, you may have to take into account that your application may contain resource files that have to be adapted.</p>"},{"location":"indepth/examples.html#samsungmarket","title":"Publishing on the Samsung app market","text":"<p>If you're publishing your Android application on the Samsung app market, and you get \"File upload has failed. There is no application ID(PackageName) or Version information(VersionName) in the Android Manifest.xml file you have registered.\", then you need to preserve the mentioned resource XML attribute names in the <code>AndroidManifest.xml</code>:</p> <pre><code>-keepresourcexmlattributenames manifest/package,manifest/versionName \n</code></pre> <p>The Samsung market parses these attributes when you upload your application, and they can't handle obfuscated names.</p> <p>Other markets may try to read even more attributes. You could then refine your configuration experimentally, or just not obfuscate any attributes in the manifest at all:</p> <pre><code>-keepresourcexmlattributenames manifest/**\n</code></pre>"},{"location":"indepth/examples.html#logging","title":"Removing logging code","text":"<p>You can let DexGuard remove logging code. The trick is to specify that the logging methods don't have side-effects \u2014 even though they actually do, since they write to the console or to a log file. DexGuard will take your word for it and remove the invocations (in the optimization step) and if possible the logging classes and methods themselves (in the shrinking step). For example, this configuration removes invocations of the Android logging methods:</p> <pre><code>-assumenosideeffects class android.util.Log {\n    public static boolean isLoggable(java.lang.String, int);\n    public static int v(...);\n    public static int i(...);\n    public static int w(...);\n    public static int d(...);\n    public static int e(...);\n}\n</code></pre> <p>The wildcards are a shortcut to match all versions of the methods. Be careful not to use a <code>*</code> wildcard to match all methods, because it would also match methods like <code>wait()</code>, higher up the hierarchy. Removing those invocations will generally break your code.</p> <p>Note that you generally can't remove logging code that uses <code>System.out.println</code>, since you would be removing all invocations of <code>java.io.PrintStream#println</code>, which could break your application. You can work around it by creating your own logging methods and let DexGuard remove those.</p> <p>Working sample project: <code>samples/features/LoggingRemoval</code></p>"},{"location":"indepth/examples.html#restructuring","title":"Restructuring the output archives","text":"<p>In simple applications, all output classes and resources files are merged into a single jar. For example:</p> <pre><code>-injars  classes\n-injars  in1.jar\n-injars  in2.jar\n-injars  in3.jar\n-outjars out.jar\n</code></pre> <p>This configuration merges the processed versions of the files in the <code>classes</code> directory and the three jars into a single output jar <code>out.jar</code>.</p> <p>If you want to preserve the structure of your input jars (and/or apks, aars, aabs, wars, ears, jmods, zips, or directories), you can specify an output directory (or an apk, an aar, an aab, a war, an ear, a jmod, or a zip). For example:</p> <pre><code>-injars  in1.jar\n-injars  in2.jar\n-injars  in3.jar\n-outjars out\n</code></pre> <p>The input jars will then be reconstructed in the directory <code>out</code>, with their original names.</p> <p>You can also combine archives into higher level archives. For example:</p> <pre><code>-injars  in1.jar\n-injars  in2.jar\n-injars  in3.jar\n-outjars out.war\n</code></pre> <p>The other way around, you can flatten the archives inside higher level archives into simple archives:</p> <pre><code>-injars  in.war\n-outjars out.jar\n</code></pre> <p>This configuration puts the processed contents of all jars inside <code>in.war</code> (plus any other contents of <code>in.war</code>) into <code>out.jar</code>.</p> <p>If you want to combine input jars (and/or apks, aabs, aars, wars, ears, jmods, zips, or directories) into output jars (and/or apks, aabs, aars, wars, ears, jmods, zips, or directories), you can group the <code>-injars</code> and <code>-outjars</code> options. For example:</p> <pre><code>-injars base_in1.jar\n-injars base_in2.jar\n-injars base_in3.jar\n-outjars base_out.jar\n\n-injars  extra_in.jar\n-outjars extra_out.jar\n</code></pre> <p>This configuration puts the processed results of all <code>base_in*.jar</code> jars into <code>base_out.jar</code>, and the processed results of the <code>extra_in.jar</code> into <code>extra_out.jar</code>. Note that only the order of the options matters; the additional whitespace is just for clarity.</p> <p>This grouping, archiving, and flattening can be arbitrarily complex. DexGuard always tries to package output archives in a sensible way, reconstructing the input entries as much as required.</p>"},{"location":"indepth/examples.html#filtering","title":"Filtering the input and the output","text":"<p>The default configuration of the DexGuard plugins already specifies these settings for you.</p> <p>If you want even greater control, you can add filters to the input and the output, filtering out apks, aabs, jars, aars, wars, ears, jmods, zips, and/or ordinary files. For example, if you want to disregard certain files from an input jar:</p> <pre><code>-injars  in.jar(!images/**)\n-outjars out.jar\n</code></pre> <p>This configuration removes any files in the <code>images</code> directory and its subdirectories.</p> <p>Such filters can be convenient for avoiding warnings about duplicate files in the output. For example, only keeping the manifest file from a first input jar:</p> <pre><code>-injars  in1.jar\n-injars  in2.jar(!META-INF/MANIFEST.MF)\n-injars  in3.jar(!META-INF/MANIFEST.MF)\n-outjars out.jar\n</code></pre> <p>It is also possible to filter the jars (and/or apks, aabs, aars, wars, ears, jmods, zips) themselves, based on their names. For example:</p> <pre><code>-injars  in(**/acme_*.jar;)\n-outjars out.jar\n</code></pre> <p>Note the semi-colon in the filter; the filter in front of it applies to jar names. In this case, only <code>acme_*.jar</code> jars are read from the directory <code>in</code> and its subdirectories. Filters for war names, ear names, and zip names can be prefixed with additional semi-colons. All types of filters can be combined. They are orthogonal.</p> <p>On the other hand, you can also filter the output, in order to control what content goes where. For example:</p> <pre><code>-injars  in.jar\n-outjars code_out.jar(**.class)\n-outjars resources_out.jar\n</code></pre> <p>This configuration splits the processed output, sending <code>**.class</code> files to <code>code_out.jar</code>, and all remaining files to <code>resources_out.jar</code>.</p> <p>Again, the filtering can be arbitrarily complex, especially when combined with grouping input and output.</p>"},{"location":"indepth/examples.html#deadcode","title":"Finding dead code","text":"<p>These options list unused classes, fields, and methods in the application <code>com.example.MyApplication</code>:</p> <pre><code>-injars      in.jar\n-libraryjars /usr/local/android-sdk/platforms/android-28/android.jar\n\n-dontoptimize\n-dontobfuscate\n-dontpreverify\n-printusage\n\n-keep public class com.example.MyApplication {\n    public static void main(java.lang.String[]);\n}\n</code></pre> <p>We're not specifying an output jar, just printing out some results. We're saving some processing time by skipping the other processing steps.</p> <p>The java compiler inlines primitive constants and String constants (<code>static final</code> fields). DexGuard would therefore list such fields as not being used in the class files that it analyzes, even if they are used in the source files. We can add a <code>-keepclassmembers</code> option that keeps those fields a priori, in order to avoid having them listed:</p> <pre><code>-keepclassmembers class * {\n    static final %                *;\n    static final java.lang.String *;\n}\n</code></pre>"},{"location":"indepth/examples.html#annotations","title":"Using annotations to configure DexGuard","text":"<p>The traditional DexGuard configuration allows to keep a clean separation between the code and the configuration for shrinking, optimization, and obfuscation. However, it is also possible to define specific annotations, and then annotate the code to configure the processing. You can find a set of such predefined annotations in the directory <code>extras/annotations/lib</code> in the DexGuard distribution. The annotation classes are defined in <code>annotations.jar</code>. The corresponding DexGuard configuration (or meta-configuration, if you prefer) is specified in <code>annotations.pro</code>. With these files, you can start annotating your code. For instance, a java source file <code>Application.java</code> can be annotated as follows:</p> <pre><code>@KeepApplication\npublic class Application {\n  // ....\n}\n</code></pre> <p>The DexGuard configuration file for the application can then be simplified by leveraging these annotations:</p> <pre><code>-injars      in.jar\n-outjars     out.jar\n-libraryjars /usr/local/android-sdk/platforms/android-28/android.jar\n\n-include lib/annotations.pro\n</code></pre> <p>The annotations are effectively replacing the application-dependent <code>-keep</code> options. You may still wish to add traditional <code>-keep</code> options for processing native methods, enumerations, serializable classes, and annotations.</p> <p>The directory <code>extras/annotations</code> contains more examples that illustrate some of the possibilities.</p>"},{"location":"indepth/loggingremoval.html","title":"Logging Removal","text":"<p>DexGuard can remove logging calls in your application, to improve performance and to prevent leaking sensitive information in the code and at run-time.</p>"},{"location":"indepth/loggingremoval.html#prerequisites","title":"Prerequisites","text":"<p>In order to remove logging calls, the optimization step has to be enabled (including optimization code/removal/advanced).</p>"},{"location":"indepth/loggingremoval.html#configurations","title":"Configurations","text":"<p>The following sections provide sample configurations for various logging frameworks.</p>"},{"location":"indepth/loggingremoval.html#android-logging","title":"Android Logging","text":"<pre><code># Remove Android logging calls (in this case, including errors).\n-assumenosideeffects class android.util.Log {\n    public static boolean isLoggable(java.lang.String, int);\n    public static int v(...);\n    public static int d(...);\n    public static int i(...);\n    public static int w(...);\n    public static int e(...);\n    public static int println(int, java.lang.String, java.lang.String);\n    public static java.lang.String getStackTraceString(java.lang.Throwable);\n\n    # Warning: removing terrible failure logging calls might change behavior\n    #          for devices &lt; API Level 23.\n    public static int wtf(...);\n}\n</code></pre>"},{"location":"indepth/loggingremoval.html#java-logging","title":"Java Logging","text":"<pre><code># Remove Java logging calls.\n-assumenosideeffects class java.util.logging.Logger {\n    public static java.util.logging.Logger getLogger(...);\n    public boolean isLoggable(java.util.logging.Level);\n    public void entering(...);\n    public void exiting(...);\n    public void finest(...);\n    public void finer(...);\n    public void fine(...);\n    public void config(...);\n    public void info(...);\n    public void warning(...);\n    public void severe(...);\n}\n</code></pre>"},{"location":"indepth/loggingremoval.html#apache-commons-logging","title":"Apache Commons Logging","text":"<pre><code># Remove Apache Commons logging calls.\n-assumenosideeffects class org.apache.commons.logging.Log {\n    public boolean is*Enabled();\n    public void trace(...);\n    public void debug(...);\n    public void info(...);\n    public void warn(...);\n    public void error(...);\n    public void fatal(...);\n}\n</code></pre>"},{"location":"indepth/loggingremoval.html#slf4j","title":"SLF4J","text":"<pre><code># Remove SLF4J logging calls.\n-assumenosideeffects class org.slf4j.Logger {\n    public boolean is*Enabled();\n    public void trace(...);\n    public void debug(...);\n    public void info(...);\n    public void warn(...);\n    public void error(...);\n}\n</code></pre>"},{"location":"indepth/loggingremoval.html#apache-cordova","title":"Apache Cordova","text":"<pre><code># Remove Cordova logging calls.\n-assumenosideeffects class org.apache.cordova.LOG {\n    public static boolean isLoggable(int);\n    public static void v(...);\n    public static void d(...);\n    public static void i(...);\n    public static void w(...);\n    public static void e(...);\n}\n</code></pre>"},{"location":"indepth/loggingremoval.html#fabricio","title":"Fabric.io","text":"<pre><code># Remove IOFabric logging calls.\n-assumenosideeffects class io.fabric.sdk.android.Logger {\n    public void v(...);\n    public void d(...);\n    public void i(...);\n    public void w(...);\n    public void e(...);\n    public void log(...);\n}\n</code></pre>"},{"location":"indepth/optimizations.html","title":"Optimizations","text":""},{"location":"indepth/optimizations.html#optimization-options","title":"Optimization options","text":"<p>The optimization step of DexGuard can be switched off with the <code>-dontoptimize</code> option. For more fine-grained control over individual optimizations, experts can use the <code>-optimizations</code> option, with a filter based on the optimization names listed below. The filter works like any filter in DexGuard.</p> <p>The following wildcards are supported:</p> Wildcard Meaning <code>?</code> matches any single character in an optimization name. <code>*</code> matches any part of an optimization name. <p>An optimization that is preceded by an exclamation mark '!' is excluded from further attempts to match with subsequent optimization names in the filter. Make sure to specify filters correctly, since they are not checked for potential typos.</p> <p>For example, \"<code>code/simplification/variable,code/simplification/arithmetic</code>\" only performs the two specified peephole optimizations.</p> <p>For example, \"<code>!method/propagation/*</code>\" performs all optimizations, except the ones that propagate values between methods.</p> <p>For example, \"<code>!code/simplification/advanced,code/simplification/*</code>\" only performs all peephole optimizations.</p> <p>Some optimizations necessarily imply other optimizations. These are then indicated. Note that the list is likely to change for newer versions, as optimizations are added and reorganized.</p> <code>resource/inlining/resource</code> Inlines resource constants into XML files, whenever possible. <code>resource/inlining/code</code> Inlines resource constants into code, whenever possible. <code>resource/inlining/metadata</code> Inlines metadata from the Android manifest into code, whenever possible. <code>resource/deduplication</code> Removes duplicate resource constants, whenever possible. <code>resource/compaction</code> Removes empty resource constants, whenever possible. <p>Incompatible with app bundles</p> <p><code>resource/compaction</code> will be automatically disabled when processing app bundles.</p> <code>library/gson</code> Optimizes usages of the Gson library, whenever possible. See Gson   optimization for more details. <code>class/marking/final</code> Marks classes as final, whenever possible. <code>class/unboxing/enum</code> Simplifies enum types to integer constants, whenever possible. <code>class/merging/vertical</code> Merges classes vertically in the class hierarchy, whenever possible. <code>class/merging/horizontal</code> Merges classes horizontally in the class hierarchy, whenever possible. <code>class/merging/wrapper</code> Merges wrapper classes with their wrapped classes, whenever possible. <code>field/removal/writeonly</code>(\u21d2 <code>code/removal/advanced</code>) Removes write-only fields. <code>field/marking/private</code> Marks fields as private, whenever possible. <code>field/generalization/class</code> Generalizes the classes of field accesses, whenever possible. <code>field/specialization/type</code> Specializes the types of fields, whenever possible. <code>field/propagation/value</code>(\u21d2 <code>code/simplification/advanced</code>) Propagates the values of fields across methods. <code>method/marking/private</code> Marks methods as private, whenever possible (devirtualization). <code>method/marking/static</code>(\u21d2 <code>code/removal/advanced</code>) Marks methods as static, whenever possible (devirtualization). <code>method/marking/final</code> Marks methods as final, whenever possible. <code>method/marking/synchronized</code> Unmarks methods as synchronized, whenever possible. <code>method/removal/parameter</code>(\u21d2 <code>code/removal/advanced</code>) Removes unused method parameters. <code>method/generalization/class</code> Generalizes the classes of method invocations, whenever possible. <code>method/specialization/parametertype</code> Specializes the types of method parameters, whenever possible. <code>method/specialization/returntype</code> Specializes the types of method return values, whenever possible. <code>method/propagation/parameter</code>(\u21d2 <code>code/simplification/advanced</code>) Propagates the values of method parameters from method invocations to the   invoked methods. <code>method/propagation/returnvalue</code>(\u21d2 <code>code/simplification/advanced</code>) Propagates the values of method return values from methods to their   invocations. <code>method/inlining/short</code> Inlines short methods. <code>method/inlining/unique</code> Inlines methods that are only called once. <code>method/inlining/tailrecursion</code> Simplifies tail recursion calls, whenever possible. <code>code/merging</code> Merges identical blocks of code by modifying branch targets. <code>code/simplification/variable</code> Performs peephole optimizations for variable loading and storing. <code>code/simplification/arithmetic</code> Performs peephole optimizations for arithmetic instructions. <code>code/simplification/cast</code> Performs peephole optimizations for casting operations. <code>code/simplification/field</code> Performs peephole optimizations for field loading and storing. <code>code/simplification/branch</code>(\u21d2 <code>code/removal/simple</code>) Performs peephole optimizations for branch instructions. <code>code/simplification/object</code> Performs peephole optimizations for object instantiation. <code>code/simplification/string</code> Performs peephole optimizations for constant strings. <code>code/simplification/math</code> Performs peephole optimizations for Math method calls. <code>code/simplification/advanced</code>(best used with <code>code/removal/advanced</code>) Simplifies code based on control flow analysis and data flow analysis. <code>code/removal/advanced</code>(\u21d2 <code>code/removal/exception</code>) Removes dead code based on control flow analysis and data flow analysis. <code>code/removal/simple</code>(\u21d2 <code>code/removal/exception</code>) Removes dead code based on a simple control flow analysis. <code>code/removal/variable</code> Removes unused variables from the local variable frame. <code>code/removal/exception</code> Removes exceptions with empty try blocks. <code>code/allocation/variable</code> Optimizes variable allocation on the local variable frame."},{"location":"indepth/optimizations.html#aggressive-optimization","title":"Aggressive optimization","text":"<p>DexGuard provides the <code>-optimizeaggressively</code> option. If set, this enables more aggressive assumptions during optimization. This might lead to improved performance and/or reduced code size, but might result in different behavior in rare cases. For example, reading from an array might cause an <code>ArrayIndexOutOfBoundsException</code> to be thrown. Strictly speaking, this means that such an instruction can have a side effect. If this instruction is removed during optimization, the code will thus behave differently under specific circumstances. By default, such instructions are always preserved. Setting this option will lead to these instructions being candidates for removal during optimization. Additionally, class merging is only enabled when this option is set.</p>"},{"location":"indepth/optimizations.html#unofficial-settings","title":"Unofficial settings","text":"<p>DexGuard also provides some unofficial settings to control optimizations, that may disappear in future versions. These are Java system properties, which can be set as JVM arguments (with <code>-D...</code>):</p> <code>maximum.inlined.code.length</code> (default = 8 bytes) Specifies the maximum code length (expressed in bytes) of short methods   that are eligible to be inlined. Inlining methods that are too long may   unnecessarily inflate the code size. <code>maximum.resulting.code.length</code> (default = 8000 bytes for JSE, 2000 bytes for JME) Specifies the maximum resulting code length (expressed in bytes) allowed   when inlining methods. Many Java virtual machines do not apply just-in-time   compilation to methods that are too long, so it's important not to let them   grow too large."},{"location":"indepth/optimizations.html#gson","title":"Gson optimization","text":"<p>DexGuard optimizes Gson code by detecting which domain classes are serialized using the Gson library. It replaces the reflection-based implementation of GSON for reading and writing fields with injected and optimized code that accesses the fields of the domain classes directly when reading and writing JSON. The benefits of this optimization are the following:</p> <ul> <li>Domain classes used in conjunction with GSON can be freely obfuscated.</li> <li>The field names that occur in the serialized JSON are hidden behind a layer   of encryption to prevent reverse engineering of these domain classes.</li> <li>The injected serialization code gives better performance compared to the   GSON implementation, which relies on reflection.</li> <li>Less configuration is needed as the optimization automatically keeps classes   and fields that are required for serialization.</li> </ul>"},{"location":"indepth/optimizations.html#configuration","title":"Configuration","text":"<p>The Gson optimization is enabled by default and doesn't require any additional configuration, as long as the application code doesn't use unsupported Gson features (see Known limitations).</p> <p>Disabling Gson optimizations</p> <p>If you are using Gson, but disabled Gson optimizations (using the <code>-optimizations !library/gson</code> config option), then you should use the default configuration <code>dexguard-gson.pro</code> in addition to a standard default configuration.</p>"},{"location":"indepth/optimizations.html#gsonlimitations","title":"Known limitations","text":"<p>DexGuard can not optimize the following use cases of Gson:</p> <ul> <li>Serializing classes containing one of the following Gson annotations:<ul> <li><code>@JsonAdapter</code></li> <li><code>@Since</code></li> <li><code>@Until</code></li> </ul> </li> <li>Serializing classes that have generic type variables in their signature.</li> <li>Serializing classes using a Gson instance that was built with one of the   following settings on the GsonBuilder:<ul> <li><code>excludeFieldsWithModifier</code></li> <li><code>setFieldNamingPolicy</code></li> </ul> </li> </ul> <p>When one of the above Gson features is used, DexGuard automatically preserves the original Gson implementation for all affected domain classes.</p> <p>This means that the serialized fields of these domain classes need to be explicitly kept again in the DexGuard configuration so that they can be safely accessed through reflection.</p>"},{"location":"indepth/pgo.html","title":"Profile-Guided Obfuscation","text":"<p>Warning</p> <p>Since version 9.9.0, DexGuard uses PGO version 2 by default. It uses a different profiling data format from PGO V1. To benefit from its performance improvements, it is necessary to reprofile your application. Alternatively, PGO V1 can still be used by adding <code>-uselegacyprofiling</code> to your DexGuard configuration.</p> <p>Feature Guidance</p> <p>Profile-guided obfuscation is intended for general performance guidance, with limitations to detect all performance-sensitive conditions. Before using the obfuscated product, please thoroughly verify its obfuscation quality. Please check the Verification section for more information.</p> <p>Profile-guided obfuscation (PGO) is intended to be used in application projects that are particularly performance-sensitive. It will automate generation of denylists in order to avoid impacting performance-sensitive code during RASP injection.</p> <p>PGO is intended to be used as part of a two-phase configuration workflow. Here, a first instrumentation phase collects data and configurations that can be used in a second obfuscation phase to properly protect the application. In this regard, PGO should be used together with the configuration debugging feature, which collects keep rules while exercising the application such that the protected application does not crash due to reflective calls.</p>"},{"location":"indepth/pgo.html#getting-started","title":"Getting Started","text":"<p>Using profile-guided obfuscation is a two-step process:</p> <ol> <li>Acquire Profiling Data: Instrument your application in order to obtain a performance profile of your application.</li> <li>Use Profiling Data to Guide Obfuscation: Configure PGO to use the performance profile obtained earlier and tweak the configuration until an acceptable balance between performance and protection quality is achieved.</li> </ol>"},{"location":"indepth/pgo.html#pgo-instrumentation","title":"Instrumentation","text":"<p>The instrumentation phase injects code inside every method to count the number of times they have been executed. Using those counters, DexGuard can then determine which methods are executed often and avoid injecting runtime checks into them.</p>"},{"location":"indepth/pgo.html#configuration","title":"Configuration","text":"<p>To enable instrumentation, add the following rule to your DexGuard configuration:</p> <pre><code>-addprofiling\n</code></pre> <p>This option disables shrinking, optimization, RASP and other advanced protection features; only name obfuscation is enabled. Furthermore, the icon of the application is changed to the DexGuard icon. This is to discourage accidental releases of this build.</p> <p>After DexGuard processing, install the instrumented application on a device or emulator of your choice and run it.</p> <p>Warning</p> <p>Since instrumented applications are not protected and expose debugging information, <code>-addprofiling</code> prevents your application from being released on the Google Play Store. It does so, among other measures, by setting the testOnly attribute in the Android manifest. This has implications for how the application can be installed:</p> <ul> <li> <p>To install an APK, use the following command: <pre><code>$ adb install -t out.apk\n</code></pre></p> </li> <li> <p>To install an AAB, use the following command: <pre><code>$ bundletool install-apks --apks out.apks --allow-test-only\n</code></pre></p> </li> </ul> <p>Note</p> <p>You should make sure that you disable this setting again when you create an actual protected version of your application, since this option disables shrinking, optimization and advanced protections, and exposes debugging information.</p>"},{"location":"indepth/pgo.html#best-practices","title":"Best Practices","text":"<p>When testing the instrumented application, test it for as long as possible and stress it in a variety of ways. The quality of the profiling data directly depends on the quality of testing. For example:</p> <ul> <li>Access all UI elements/features, tap every button, trigger as many code paths as possible without leaving the application.</li> <li>Use the app for a few minutes to ensure frequently executed functions will be clearly distinguishable from normal functions in the final profile.</li> </ul>"},{"location":"indepth/pgo.html#fetching-profiling-data","title":"Fetching Profiling Data","text":"<p>DexGuard writes the profiling data to a file on the device. On startup, the location of this file as well as instructions to retrieve it are printed to the logcat in a message of the following format:</p> <pre><code>Writing profiling data to &lt;path&gt;: use `adb pull &lt;path&gt;` to retrieve the file from the device.\n</code></pre> <p>Both a protobuf and a JSON file are written to the specified location. The contents of those files are completely identical, but the human-readable JSON file allows you to inspect what the profiling data looks like.</p> <p>Warning</p> <p>Instrumentation data is completely reset each time the application is re-opened. Thus, do not quit the application when instrumenting it or all instrumentation data will be lost.</p>"},{"location":"indepth/pgo.html#pgo-obfuscation","title":"Obfuscation","text":"<p>Once profiling data has been collected, DexGuard can use it to determine which methods are called the most often and prevent injecting into them. This is achieved by ordering all methods by their execution count (i.e. the amount of times it has been called) and then restricting the potential injection sites to some slice of that list only.</p>"},{"location":"indepth/pgo.html#configuration_1","title":"Configuration","text":"<p>The minimal configuration to enable profile-guided obfuscation is the following:</p> <pre><code>-profilingdata /path/to/profilingdata.pb\n</code></pre> <p>It is also possible to pass the JSON file to the <code>-profilingdata</code> rule.</p> <p>Note</p> <p><code>-addprofiling</code> should be removed from your configuration before obfuscating your application. PGO is only useful when spray RASP checks are configured.</p>"},{"location":"indepth/pgo.html#pgo-v2","title":"PGO v2","text":"<p>Warning</p> <p>When applying PGO v2, RASP coverage is dependent on the quality of the profiling data. The coverage of RASP will be at its best when the application is profiled thoroughly. However, when the profiling data is incomplete or outdated, RASP coverage will be low, as missed, new, and renamed methods will not be covered. Therefore, it is important to profile your application again whenever the code base has evolved significantly. As a safeguard, DexGuard will terminate if the profiling data is too outdated, based on the amount of suitable methods for injection that no longer exist. However, DexGuard cannot detect the addition of new code to your application. Therefore, you should profile the application again at regular intervals, for example when you've finished adding a new feature.</p> <p>Version 2 of PGO not only tracks the total amount of times a method is executed during the instrumentation phase, but also tracks the application's frame rate. The obfuscation phase uses this information to avoid visible dips in frame rate. This should result in a smoother user experience for your application.</p> <p>Applying PGO v2 also involves two phases: An instrumentation phase and an obfuscation phase. </p> <p>Once DexGuard has instrumented your application, you will need to run the instrumented application on your device and then download the profiling data from your application. The same steps, caveats, and best practices apply as for PGO v1. </p> <p>We recommend to use a lower-end device during the instrumentation phase, if possible. This will cause possible performance issues on lower-end devices to be clearer in the profiling data, which will help the obfuscation phase to make better decisions about where to inject RASP checks.</p>"},{"location":"indepth/pgo.html#advanced-pgo-v2-configuration","title":"Advanced PGO v2 configuration","text":"<p>The amount of checks injected by PGO v2 can be adjusted by using the <code>-raspaggressiveness &lt;detector&gt; &lt;level&gt;</code> option, similar to default RASP spraying.</p>"},{"location":"indepth/pgo.html#pgo-v1","title":"PGO v1","text":"<p>PGO V1 can be enabled with the following configuration. Although they have different profiling data formats, they are used the exact same way. To use PGO V1 instead of PGO V2, you can add the following to your instrumentation/protection configuration. <pre><code>-uselegacyprofiling\n</code></pre></p>"},{"location":"indepth/pgo.html#pgov1-advanced-configuration","title":"Advanced PGO v1 configuration","text":"<p>Profile-guided obfuscation  V1  offers a few advanced configuration settings to fine-tune it as needed. By default, PGO denylists the 10% least executed methods and the 50% most executed methods. Consider the following profiling data:</p> Method Name Execution Count method1 1 method2 2 method3 3 method4 4 method5 5 method6 6 method7 7 method8 8 method9 9 method10 10 <p>The default configuration would denylist <code>method1</code> and <code>method6</code> - <code>method10</code>. DexGuard provides configuration rules to override this behavior.</p>"},{"location":"indepth/pgo.html#-noinjectioncoldzone","title":"-noinjectioncoldzone","text":"<p>This option allows to set the percentage of the least executed methods that should be denylisted from RASP injection. For example, to denylist the 20% least executed methods:</p> <pre><code>-noinjectioncoldzone 20\n</code></pre>"},{"location":"indepth/pgo.html#-noinjectionhotzone","title":"-noinjectionhotzone","text":"<p>This option allows to set the percentage of the most executed methods that should be denylisted from RASP injection. For example, to denylist the 30% most executed methods:</p> <pre><code>-noinjectionhotzone 30\n</code></pre>"},{"location":"indepth/pgo.html#verification","title":"Verification","text":"<p>Profile-guided obfuscation is intended for general performance guidance and may not detect all performance-sensitive conditions. As such, using it may affect the obfuscation's result negatively in some cases. Thus, it is important to verify that the amount of injected RASP checks (and their location) is still acceptable when profile-guided obfuscation is enabled. Before releasing an application using PGO, try disabling it in the configuration and obfuscating again, then compare the results of the PGO-enabled configuration against the PGO-disabled one. For instance, you can compare:</p> <ul> <li>Statistics - At the end of the obfuscation process, DexGuard prints an injection mapping that indicates which RASP checks have been injected in which locations. Compare the amount of checks and check that they are within acceptable ranges. Verify that some key methods are still protected as expected.</li> <li>The Protection Reports - If profile-guided obfuscation significantly altered the protection level, it should be reflected in the protection report.</li> <li>Runtime protections efficiency - Exercise the app in various ways corresponding to the RASP protections you have configured and verify that RASP checks still correctly detect each threat.</li> <li>Runtime performance - Verify that your app runs more smoothly when profile-guided obfuscation is enabled, compared to when it is disabled.</li> </ul>"},{"location":"indepth/refcard.html","title":"Reference Card","text":""},{"location":"indepth/refcard.html#usage","title":"Usage","text":"OS Command Windows: <code>dexguard</code> options ... Linux/macOS: <code>dexguard.sh</code> options ... <p>Typically:</p> OS Command Windows: <code>dexguard @myconfig.pro</code> Linux/macOS: <code>dexguard.sh @myconfig.pro</code>"},{"location":"indepth/refcard.html#options","title":"Options","text":"Option Explanation <code>@</code>filename Short for '<code>-include</code> filename'. <code>-include</code> filename Read configuration options from the given file. <code>-basedirectory</code> directoryname Specifies the base directory for subsequent relative file names. <code>-injars</code> class_path Specifies the program jars (or apks, aabs, aars, wars, ears, jmods, zips, or directories). <code>-outjars</code> class_path Specifies the names of the output jars (or apks, aabs, aars, wars, ears, jmods, zips, or directories). <code>-libraryjars</code> class_path Specifies the library jars (or apks, aabs, aars, wars, ears, jmods, zips, or directories). <code>-androidsdk</code> [directory] Specifies the path to the Android SDK where DexGuard will read Android platform jars from. <code>-abifilter</code> abi_list Specifies the ABIs that will be generated by DexGuard, if no existing native libraries are in the input. <code>-skipnonpubliclibraryclasses</code> Ignore non-public library classes. <code>-dontskipnonpubliclibraryclasses</code> Don't ignore non-public library classes (the default). <code>-dontskipnonpubliclibraryclassmembers</code> Don't ignore package visible library class members. <code>-keepdirectories</code> [directory_filter] Keep the specified directories in the output jars (or apks, aabs, aars, wars, ears, jmods, zips, or directories). <code>-multidex</code> deprecated Split the Dalvik code across multiple dex files, if necessary. <code>-printmaindexlist</code> [filename] Print to the standard output or to the given file the list of classes that are placed into the main dex and why they need to be stored there. <code>-applycodepushmapping</code> Specifies the mapping file for processing a CodePush update. <code>-printcodepushmapping</code> Specifies to write an outputfile containing the mapping file for processing future CodePush updates. <code>-dontencrypthermesassetfile</code> Opt out of automatically encrypting the Hermes asset. <code>-instantappfeature</code> name activity URL Create an Instant App feature. <code>-splitdimensions</code> deprecated [dimension_filter] Split the specified dimensions of resources in app bundles. No longer required, as DexGuard will now read this information from the app bundle directly. <code>-dontcompress</code> [file_filter] Don't compress the specified files in output archives. As of DexGuard 9.3.12, <code>-dontcompress **.class</code> is replaced with <code>-dontcompress classes*.dex</code> if the dex file is compressed in the input. <code>-zipalign</code> n Align uncompressed files in output archives to multiples of the given number of bytes. <code>-target</code> version Set the given version number in the processed classes. <code>-forceprocessing</code> Process the input, even if the output seems up to date. <code>-keep</code> [,modifier,...] class_specification Preserve the specified classes and class members. <code>-keepclassmembers</code> [,modifier,...] class_specification Preserve the specified class members, if their classes are preserved as well. <code>-keepclasseswithmembers</code> [,modifier,...] class_specification Preserve the specified classes and class members, if all of the specified class members are present. <code>-keepnames</code> class_specification Preserve the names of the specified classes and class members (if they aren't removed in the shrinking step). <code>-keepclassmembernames</code> class_specification Preserve the names of the specified class members (if they aren't removed in the shrinking step). <code>-keepclasseswithmembernames</code> class_specification Preserve the names of the specified classes and class members, if all of the specified class members are present (after the shrinking step). <code>-keepcode</code> [,modifier,...] class_specification Preserve the specified code attributes, if their methods are preserved as well. <code>-if</code> class_specification Specifies classes and class members that must be present to activate the subsequent <code>-keep</code> option. <code>-printseeds</code> [filename] List classes and class members matched by the various <code>-keep</code> options, to the standard output or to the given file. <code>-keepresourcefiles</code> [file_filter] Preserve the specified Android resource files. <code>-keepresources</code> [,keepresources_modifier,...] [name_filter] Preserve the specified Android resources. <code>-keepresourcexmlelements</code> [name_filter] Preserve the specified XML elements in Android resource XML files. <code>-dontshrink</code> Don't shrink the input class files. <code>-printusage</code> [filename] List dead code of the input class files, to the standard output or to the given file. <code>-printresourceusage</code> [filename] List unused resources in the input APK/AAB, to the standard output or to the given file. <code>-whyareyoukeeping</code> class_specification Print details on why the given classes and class members are being kept in the shrinking step. <code>-dontoptimize</code> Don't optimize the input class files. <code>-optimizations</code> optimization_filter The optimizations to be enabled and disabled. <code>-optimizationpasses</code> n The number of optimization passes to be performed. <code>-optimizeaggressively</code> Enables more aggressive assumptions during optimization. <code>-assumenosideeffects</code> class_specification Assume that the specified methods don't have any side effects, while optimizing. <code>-assumenoexternalsideeffects</code> class_specification Assume that the specified methods don't have any external side effects, while optimizing. <code>-assumenoescapingparameters</code> class_specification Assume that the specified methods don't let any reference parameters escape to the heap, while optimizing. <code>-assumenoexternalreturnvalues</code> class_specification Assume that the specified methods don't return any external reference values, while optimizing. <code>-assumevalues</code> class_specification Assume fixed values or ranges of values for primitive fields and methods, while optimizing. <code>-allowaccessmodification</code> Allow the access modifiers of classes and class members to be modified, while optimizing. <code>-mergeinterfacesaggressively</code> Allow any interfaces to be merged, while optimizing. <code>-dontobfuscate</code> Don't obfuscate the input class files. <code>-printmapping</code> [filename] Print the mapping from old names to new names for classes and class members that have been renamed, to the standard output or to the given file. <code>-applymapping</code> filename Reuse the given mapping, for incremental obfuscation. <code>-printresourcefilenamemapping</code> [filename] Print the mapping from old names to new names for resource files, to the standard output or to the given file. <code>-printresourcemapping</code> [filename] Print the mapping from old names to new names for resources, to the standard output or to the given file. <code>-applyresourcemapping</code> [filename] Reuse the given mapping for obfuscating resource names. <code>-obfuscationdictionary</code> filename or naming scheme Use either the words in the given dictionary file or the provided naming scheme to obfuscate field names and method names. <code>-classobfuscationdictionary</code> filename or naming scheme Use either the words in the given dictionary file or the provided naming scheme to obfuscate class names. <code>-packageobfuscationdictionary</code> filename Use the words in the given text file as obfuscated package names. <code>-useuniqueclassmembernames</code> Ensure uniform obfuscated class member names for subsequent incremental obfuscation. <code>-distinctclassmembernames</code> class_specification Ensure all member names within a particular class are unique. <code>-dontusemixedcaseclassnames</code> Don't generate mixed-case class names while obfuscating. <code>-keeppackagenames</code> [package_filter] Keep the specified package names from being obfuscated. <code>-flattenpackagehierarchy</code> [package_name] Repackage all packages that are renamed into the single given parent package. <code>-repackageclasses</code> [package_name] Repackage all class files that are renamed into the single given package. <code>-keepattributes</code> [attribute_filter] Preserve the given optional attributes; typically <code>Exceptions</code>, <code>InnerClasses</code>, <code>Signature</code>, <code>Deprecated</code>, <code>SourceFile</code>, <code>SourceDir</code>, <code>LineNumberTable</code>, <code>LocalVariableTable</code>, <code>LocalVariableTypeTable</code>, <code>Synthetic</code>, <code>EnclosingMethod</code>, and <code>*Annotation*</code>. <code>-keepparameternames</code> Keep the parameter names and types of methods that are kept. <code>-keepkotlinintrinsics</code> Keeps the Kotlin <code>Intrinsics</code> calls, while still obfuscating the names inside. <code>-renamesourcefileattribute</code> [string] Put the given constant string in the <code>SourceFile</code> attributes. <code>-accessthroughreflection</code> [,encryptstrings] class_specification Replace direct access to the specified classes and class members by reflection. <code>-obfuscatecode</code> [,strength] class_specification Obfuscate the code of the specified methods. <code>-dontnatify</code> Don't apply natification. <code>-printnatificationmapping</code> [filename] Print the mapping from Java bytecode to native code generated when applying code obfuscation, to the standard output or to the given file. <code>-virtualizecode</code> class_specification Virtualize the code of the specified methods. <code>-obfuscatejavascript</code> [file_filter] Obfuscate the specified Javascript files, using the plugin defined with <code>-javascriptplugin</code>. <code>-javascriptconfiguration</code> filename [[string]] Use the specified plugin jar and optional string to obfuscate Javascript files. <code>-javascriptplugin</code> filename [[string]] Use the specified plugin jar and optional string to obfuscate Javascript files. <code>-encryptclasses</code> [class_filter] Encrypt classes whose names match the given filter. <code>-encryptclasses</code> class_specification Encrypt classes that match the class specification. <code>-encryptstrings</code> [string_filter] Encrypt string constants that match the given filter. <code>-encryptstrings</code> class_specification Encrypt string constants in the specified classes or class members. <code>-adaptclassstrings</code> [class_filter] Adapt string constants in the specified classes, based on the obfuscated names of any corresponding classes. <code>-keepkotlinmetadata</code> deprecated Keep and adapt kotlin.Metadata annotations if present. <code>-adaptresourcefilenames</code> [file_filter] Rename the specified resource files, based on the obfuscated names of the corresponding class files. <code>-adaptresourcefilecontents</code> [file_filter] Update the contents of the specified resource files, based on the obfuscated names of the processed classes. <code>-dontadaptserviceproviderconfigurationfiles</code> Don't automatically adapt Service Provider Interface configuration files located in <code>assets/services</code>. <code>-stripnativelibrarysections</code> [file_filter] Apply additional obfuscation on native libraries, such as shrinking sections which are unused at runtime. <code>-resourcefilenameobfuscationdictionary</code> filename Use the lines in the given text file as obfuscated Android resource file names. <code>-excludedresourcefilenames</code> filename Use the lines in the given text file as denylisted obfuscated Android resource file names. <code>-keepresourcexmlattributenames</code> [name_filter] Preserve the specified attribute names in binary Android resource XML files. <code>-encryptmetadata</code> [string_filter] Encrypt the specified Android manifest metadata. <code>-encryptassetfiles</code> [file_filter] Encrypt the specified Android asset files. <code>-encryptresources</code> [name_filter] Encrypt the specified Android resources (strings). <code>-encryptresourcefiles</code> [file_filter] Encrypt the specified Android resource files (layout, menu, and xml files). <code>-encryptnativelibraries</code> [file_filter] [percentage] Encrypt the specified Android native libraries. <code>-compressencryptednativelibraries</code> Compress Android native libraries before encrypting them. <code>-randomizationseed</code> integer Provide an additional value to take into account when generating a seed value to randomize the obfuscation. <code>-printclassencryption</code> [filename] Print the class encryption groups and the plugins which were used to encrypt them, to the standard output or to the given file. <code>-printstringencryption</code> [filename] Print the string encryption groups and the plugins which were used to encrypt them, to the standard output or to the given file. <code>-printassetencryption</code> [filename] Print the asset encryption groups and the plugins which were used to encrypt them, to the standard output or to the given file. <code>-printresourceencryption</code> [filename] Print the resource encryption groups and the plugins which were used to encrypt them, to the standard output or to the given file. <code>-printnativelibraryencryption</code> [filename] Print the native library encryption groups and the plugins which were used to encrypt them, to the standard output or to the given file. <code>-dontpreverify</code> Don't preverify the processed class files. <code>-microedition</code> Target the processed class files at Java Micro Edition. <code>-android</code> Target the processed class files at Android. <code>-dalvik</code> Target and convert the processed class files for Android's Dalvik VM. <code>-protobuffer</code> deprecated Write the processed resource files in protobuffer format, for Android app bundles. No longer required, as app bundles will now be detected automatically by DexGuard. <code>-keystore</code> filename Sign processed jars with a private key from the given key store. <code>-keystorepassword</code> password The password of the key store. <code>-keyalias</code> alias The alias of the key that you want to select from the key store. <code>-keypassword</code> password The password of the key. <code>-pkcs11configuration</code> [filename] The configuration file of the PKCS11 module. <code>-certificatelineage</code> filename Include the certificate lineage from the given file in the signature. <code>-apksignatureschemes</code> [signature_scheme_filter] Sign with the given signature schemes when creating an apk. <code>-verbose</code> Write out some more information during processing. <code>-dontnote</code> [class_filter] Don't print notes about potential mistakes or omissions in the configuration. <code>-dontwarn</code> [class_filter] Don't warn about unresolved references at all. <code>-ignorewarnings</code> Print warnings about unresolved references, but continue processing anyhow. <code>-printconfiguration</code>[,modifier] [filename] Write out the entire configuration, in traditional DexGuard style, to the standard output or to the given file. Use <code>includesensitive</code> to also print out keystore information. <code>-printlibraryconfiguration</code> [filename] Write out the configuration required for the processed library, in traditional DexGuard style, to the standard output or to the given file. <code>-printstatistics</code> [filename] Write out statistics about the processed code, to the standard output or to the given file. <code>-printinjectmapping</code> [filename] Write out a mapping file that lists which RASP checking code was injected into which method. <code>-printthreatcastmapping</code> [filename] Write out a mapping file that lists the human readable method names for each check location identifier. <code>-dontuploadthreatcastmapping</code> [filename] Don't upload the ThreatCast mapping file automatically. <code>-threatcastappuseridgetter</code> class_specification Custom AUID getter method that will be executed to collect the app user ID and send it to ThreatCast when a RASP threat is detected. <code>-usethreatcastdebugclient</code> Use a debug version of ThreatCast which prints additional information to logcat. Apps cannot be released when this version of ThreatCast is used. <code>-addconfigurationdebugging</code> Instrument the processed code with debugging statements that print out suggestions for missing DexGuard configuration. <code>-addprofiling</code> Instrument the processed code with profiling statements for aiding with automatic configuration. <code>-raspchecks</code> RASP detector list Enable one or more of the RASP detectors. <code>-raspchecks</code> RASP detector list spray Enable spray injection for the specified RASP detectors. <code>-raspchecks</code> RASP detector list entrypoint Enable entrypoint injection for the specified RASP detectors. <code>-raspchecks</code> RASP detector list checkpoint[,allowdescriptivenames] class_specification Enable a RASP checkpoint for the specified detectors and methods. <code>-raspcontinueon</code> RASP detector list By default, an app will crash on a RASP threat, unless listed. <code>-raspcallback</code> RASP detector list class_specification Custom callback that will be executed when a RASP threat is detected. <code>-raspdenylist</code> class_specification Denylist to filter RASP injection locations. <code>-noinjectioncoldzone</code> integer Denylists the given percentage of the least executed methods in the profiling data in the PGO workflow. <code>-noinjectionhotzone</code> integer Denylists the given percentage of the most executed methods in the profiling data in the PGO workflow. <code>-raspaggressiveness</code> Detector name aggressiveness level Change the level of aggressiveness of RASP injection for a certain RASP detector. <code>-raspcertificatehash</code> certificate hash The expected certificate hash of the signing key. <code>-debugraspchecks</code> Log RASP checks when they are executed. Useful for debugging the performance impact of RASP. <code>-disableapktamper</code> Disables part of the <code>apptamper</code> check that is sensitive to re-signing. <code>-dontinjectdebugblocker</code> Disables part of the <code>debug</code> detector that blocks debug processes from attaching to the application. <code>-intunecompatibility</code> Ignores certain hooks associated with Microsoft Intune's Mobile Application Management SDK, if those libraries are detected at runtime. <code>-disableprotectionreport</code> Disables the generation of protection reports. <code>-disabletelemetry</code> Disables the sending of usage reports to Guardsquare's servers. <code>-disablebuildtelemetry</code> Disables the sending of usage reports to Guardsquare's servers at processing time. <code>-disableruntimetelemetry</code> Disables the sending of usage reports to Guardsquare's servers at application runtime. Only relevant with <code>-addconfigurationdebugging</code>. <code>-protectionreportdirectory</code> directoryname Specifies the location where protection reports shall be created. <code>-intermediatedirectory</code> directoryname Specifies the location of DexGuard's intermediate directory. <code>allowoverwrite</code> Specifies that files and directories in the given intermediate directory may be overwritten. <code>-disableversioncheck</code> Disables performing the version check. <code>-profilingdata</code> filename Specifies the location of the profiling data file. <code>-printraspdenylist</code> filename Print the RASP denylist specified or generated from the specified profiling data to the standard output or to the given file. <code>-malwareprotect</code> malware detector list Enable the specified malware detectors for all activities and fragments. Allowed malware detectors are <code>a11y</code>, <code>screenrecording</code>, <code>overlays</code>, and <code>activityinjection</code>. <code>-malwareprotect</code> malware detector list class specification Enable the specified malware detectors for activities and fragments matching the specified class specification. Allowed malware detectors are <code>a11y</code>, <code>screenrecording</code>, <code>overlays</code>, and <code>activityinjection</code>. <code>-malwaremessage</code> malware detector list string/my_message Specifies a custom warning message for the specified malware detectors. Allowed malware detectors are <code>a11y</code>, <code>overlays</code>, and <code>activityinjection</code>. <code>-malwareallowstores</code> package name list Specifies the allowlist of stores for the <code>a11y</code> malware detector. <code>-malwarecallback</code> malware detector list class specification Specifies a callback that will be called when any of the specified malware detectors trigger. This is currently only supported for the <code>a11y</code> malware detector. <code>-malwarecrashon</code> malware detector list Specifies that the app should crash when any of the specified malware detectors trigger. This is currently only supported for the <code>a11y</code> malware detector. <code>-malwarewarnon</code> malware detector list Specifies that a warning message should be shown when any of the specified malware detectors trigger. This is enabled by default for all malware detectors and can currently only be disabled for the <code>a11y</code> malware detector. <code>-malwarea11ydeviceadmin</code> Specifies to enable the admin accessibility service subcheck of the <code>a11y</code> malware detector. <code>-optimizeaggressively</code> Enables more aggressive assumptions during optimization. <code>-archivedebugfiles</code> Packages the inputs and outputs of DexGuard in a zip file to allow reproducing issues easily. <code>-compatibilityfeatures</code> feature list Enable or disable compatibility features (for example automatic ViewModel processing for Hilt components). <code>-reactnativebundlename</code> [string] Specifies the React Native bundle name, if it cannot be detected automatically. Not needed if the bundle has not been renamed from the default <code>index.android.bundle</code>. <p>Notes:</p> <ul> <li>class_path is a list of jars, apks, aabs, aars, wars, ears, jmods, zips,   and directories, with optional filters, separated by path separators.</li> <li>filename can contain Java system properties delimited by   '&lt;' and '&gt;'.</li> <li>If filename contains special characters, the entire name should be   quoted with single or double quotes.</li> <li>abi_list is a comma separated list of ABIs that can include <code>x86</code>, <code>x86_64</code>, <code>arm64-v8a</code>, <code>armeabi-v7a</code>.</li> </ul>"},{"location":"indepth/refcard.html#keepoverview","title":"Overview of <code>Keep</code> Options","text":"Keep From being removed or renamed From being renamed Classes and class members <code>-keep</code> <code>-keepnames</code> Class members only <code>-keepclassmembers</code> <code>-keepclassmembernames</code> Classes and class members, if class members present <code>-keepclasseswithmembers</code> <code>-keepclasseswithmembernames</code>"},{"location":"indepth/refcard.html#keepoptionmodifiers","title":"Keep Option Modifiers","text":"Option Explanation <code>includedescriptorclasses</code> Also keep any classes in the descriptors of specified fields and methods. <code>includecode</code> Also keep the code of the specified methods unchanged. <code>allowshrinking</code> Allow the specified entry points to be removed in the shrinking step. <code>allowoptimization</code> Allow the specified entry points to be modified in the optimization step. <code>allowobfuscation</code> Allow the specified entry points to be renamed in the obfuscation step. <code>inmaindex</code> Force the specified entry points to be placed in the primary dex file."},{"location":"indepth/refcard.html#classspecification","title":"Class Specifications","text":"<pre><code>[@annotationtype] [[!]public|final|abstract|@ ...] [!]interface|class|enum classname\n    [extends|implements [@annotationtype] classname]\n[{\n    [@annotationtype]\n    [[!]public|private|protected|static|volatile|transient ...]\n    &lt;fields&gt; | (fieldtype fieldname [= values]);\n\n    [@annotationtype]\n    [[!]public|private|protected|static|synchronized|native|abstract|strictfp ...]\n    &lt;methods&gt; | &lt;init&gt;(argumenttype,...) | classname(argumenttype,...) | (returntype methodname(argumenttype,...));\n\n    [@annotationtype] [[!]public|private|protected|static ... ] *;\n    ...\n}]\n</code></pre> <p>Notes:</p> <ul> <li>Class names must always be fully qualified, i.e. including their   package names.</li> <li>Types in classname, annotationtype, returntype, and   argumenttype can contain wildcards: '<code>?</code>' for a single character,   '<code>*</code>' for any number of characters (but not the package separator),   '<code>**</code>' for any number of (any) characters, '<code>%</code>' for any primitive   type, '<code>***</code>' for any type, '<code>...</code>' for any number of arguments, and   '<code>&lt;n&gt;</code>' for the n'th matched wildcard in the same option.</li> <li>fieldname and methodname can contain wildcards as well: '<code>?</code>'   for a single character and '<code>*</code>' for any number of characters.</li> </ul>"},{"location":"indepth/runtime.html","title":"Runtime Library","text":"<p>The DexGuard runtime library is planned for deprecation. Please replace usages of the DexGuard runtime library with automatic RASP checks.</p> <p>For a quick start with the migration, please refer the automatic RASP migration guide.</p> <p>If your project performs some action when you detect a threat, you can still configure one or more callbacks to perform the same action for the automatic checks.</p> <p>If you rely on controlling the locations of the checks, automatic RASP offers the same control with the checkpoint injection strategy.</p> <p>DexGuard's runtime library provides the following functionality:</p> <ul> <li>APK Tamper detection for the application.</li> <li>Environment checks for the Android runtime.</li> <li>Asset encryption for Cordova and for WebView   clients.</li> <li>SSL pinning for secure network communication.</li> </ul> <p>The sections below outline the general use of the different parts of the runtime library. Please refer to the runtime Javadoc for more details.</p>"},{"location":"indepth/runtime.html#dependencies","title":"Dependencies for the runtime library","text":"<p>The runtime library is a stand-alone Android library which you can find in the DexGuard distribution at</p> <pre><code>lib/dexguard-runtime.aar\n</code></pre> <p>or included from the secure maven repository:</p> KotlinGroovy <pre><code>dependencies {\n    implementation(\"com.guardsquare:dexguard-runtime:9.10+\")\n}\n</code></pre> <pre><code>dependencies {\n    implementation 'com.guardsquare:dexguard-runtime:9.10+'\n}\n</code></pre> <p>It is self-contained, and does not depend on any libraries, other than the Java Standard Library. The AAR file must be added to your application project in order to use the API.</p>"},{"location":"indepth/runtime.html#shell","title":"Shell runtime","text":"<p>The <code>dexguard-runtime.aar</code> artifact does not contain the actual RASP check implementations anymore. The artifact is now a shell that is replaced when processing with DexGuard (assuming <code>-dontobfuscate</code> isn't set).</p> <p>Warning</p> <p>Using the <code>dexguard-runtime.aar</code> artifact with an unprotected app is still possible but no threats will be detected.</p> <p>Warnings have been set up to make sure that you are aware that you are using the shell library:</p> <ul> <li>Logs will be printed to logcat every time you invoke a check method.</li> <li>A toast will be displayed the first time a check is invoked.</li> </ul> <p>You can remove the toast by adding the following meta-data to your <code>application</code> tag of the AndroidManifest.xml file. By setting this metadata you explicitly accept the fact that you are using a shell library.</p> <p>Example: <pre><code>&lt;application\n        android:label=\"@string/app_name\"\n        [...]&gt;\n\n        &lt;meta-data android:name=\"hideShellWarning\" android:value=\"true\"/&gt;\n\n        [...]\n&lt;/application&gt;\n</code></pre></p> <p>Note: The metadata will automatically be removed from your release build when including one of our default release configurations.</p>"},{"location":"indepth/runtime.html#apk-tamper-detection","title":"APK Tamper detection","text":"<p>The runtime library provides three detector classes that check whether the application has been modified in some way (in package com.guardsquare.dexguard.runtime.detection):</p> Detector Description ApkTamperDetector Checks if the apk file has been modified. CertificateChecker Checks if the application has been signed with the build certificate. <p>For example, you can use the <code>ApkTamperDetector</code> to check the apk file:</p> <pre><code>// We need a context for most methods.\nfinal Context context = ...;\n\n// Expected return value. You can pick any number,\n// to make the code less predictable.\nfinal int OK = 1;\n\n// Let the DexGuard runtime library detect whether the apk has\n// been modified or repackaged in any way.\nif (ApkTamperDetector.checkApk(context, OK) != OK) {\n   // The application has been modified.\n   // ...\n}\n</code></pre> <p>The check returns the value of the optional integer argument OK (default=0) if the application is unchanged. You should implement a suitable reaction in case the application has been modified, for example stop it or reduce its functionality in a more subtle way.</p>"},{"location":"indepth/runtime.html#limitations","title":"Limitations","text":"<p>In certain cases, tamper detection can result in false positives. The table below summarizes the cases in which you can use the different detectors. These are detailed in the subsections afterwards.</p> Feature Using re-signing App bundles Libraries ApkTamperDetector No No No CertificateChecker With certificate hash With certificate hash of final APK No"},{"location":"indepth/runtime.html#apktamperdetector-limitations","title":"<code>ApkTamperDetector</code> Limitations","text":"<p>The <code>ApkTamperDetector</code> can result in false positives in certain cases:</p> <ul> <li>When an application is re-signed.</li> <li>When used in Android app bundles.</li> <li>When used in libraries.</li> </ul>"},{"location":"indepth/runtime.html#re-signing","title":"Re-Signing","text":"<p>The tamper detector cannot be used when your application is re-signed after building your application. Re-signing occurs when an application is signed with a different certificate than the one specified at build time. This can happen in the following cases:</p> <ul> <li>When signing your APK independently with jarsigner, apksigner or other signing tools.</li> <li>With some stores, including the Amazon App Store and the Google Play   Store when using the optional Google Play App Signing,   the application is re-signed when you upload your app to the store. In this case, DexGuard does not know which   signing key will be used and thus does not know which certificate hash should be used to detect re-signing of your app.</li> </ul> <p>In this case the <code>CerficateChecker</code> can be used instead, which is subject to certain limitations.</p>"},{"location":"indepth/runtime.html#app-bundles","title":"App Bundles","text":"<p>App bundles are typically used for the Google Play store, to support app slicing, dynamic features, and instant features. Since the Android bundletool will later create the final APK, you can only use the certificate checker to detect modifications in app bundles, because using the <code>ApkTamperDetector</code> will result in false positives.</p>"},{"location":"indepth/runtime.html#libraries","title":"Libraries","text":"<p>Using the tamper detector in libraries will always result in false positives, as library files are modified in the build and packaging process before the Android build chain creates the final APKs. Therefore, only asset encryption can be used for protecting asset files.</p>"},{"location":"indepth/runtime.html#certificatechecker-limitations","title":"<code>CertificateChecker</code> limitations","text":"<p>To avoid false positives from the <code>CertificateChecker</code>, some details need to be taken into account:</p> <ul> <li>When an application is re-signed.</li> <li>When used in Android app bundles.</li> <li>When used in libraries.</li> </ul> <p>Note</p> <p>The use of MD5 hashes has been deprecated. Use SHA-256 hashes for the best security guarantees.</p>"},{"location":"indepth/runtime.html#re-signing_1","title":"Re-signing","text":"<p>To properly specify and check the certificate of the re-signed application, our certificate checker can take the expected certificate hash as an argument when called.</p> <p>You can find the certificate hash of the signing key used by Google on your Google Play console under the \"App Signing\" section. This may be necessary, for instance, in cases such as Google Play signing. When using  app signing by Google Play,  Google manages and protects your app's signing key for you and signs your APKs on your behalf.  In this case DexGuard does not know which signing key will be used and thus does not know which  certificate hash should be used to detect resigning of your app.</p>"},{"location":"indepth/runtime.html#app-bundles_1","title":"App Bundles","text":"<p>In order to use the certificate checker with app bundles you should explicitly specify the certificate hash of the final APK. This hash of this certificate can be provided as an argument to the certificate checker.</p>"},{"location":"indepth/runtime.html#libraries_1","title":"Libraries","text":"<p>In order to use the certificate checker with libraries you should explicitly specify the certificate hash of the final APK files. This is only be possible if the final APK in which the libraries will be used is known.</p>"},{"location":"indepth/runtime.html#environment-checks","title":"Environment checks","text":"<p>The runtime library also provides detector classes that check whether the application is currently running in a specific environment (in package com.guardsquare.dexguard.runtime.detection):</p> Detector Description HookDetector Checks if the application is being hooked with a specialized framework like Xposed or Substrate. RootDetector Checks if the application is running on a rooted device. DebugDetector Checks if the application can be debugged or if it is being debugged. EmulatorDetector Checks if the application is running on an emulator. <p>For example, you can use the <code>HookDetector</code> to check if the user is explicitly hooking the application with a specialized tool:</p> <pre><code>    // Expected return value. You can pick any number,\n    // to make the code less predictable.\n    final int OK = 1;\n\n    // Let the DexGuard runtime library detect whether the application is being\n    // hooked.\n    if (HookDetector.isApplicationHooked(OK) != OK) {\n       // The application is being hooked.\n       // ...\n    }\n</code></pre> <p>The check returns the value of the optional integer argument OK (default=0) if the application is not being hooked. You should implement a suitable reaction in case the application is being hooked, for example send back a warning to your server or stop the application.</p>"},{"location":"indepth/runtime.html#root-detector","title":"Root detector","text":"<p>The original root detection method <code>RootDetector.isDeviceRooted()</code>, which returns an integer value as described above, has been deprecated.</p> <p>The preferred way to manually perform root detection is by using  <code>RootDetector.checkDeviceRooted()</code> instead, as presented in the following code:</p> KotlinJava 8Java 7 and earlier <pre><code>import com.guardsquare.dexguard.runtime.detection.RootDetector\nimport com.guardsquare.dexguard.runtime.report.RootDetectorReport\n\nclass Foo {\n\n    fun bar() {\n        // This is the location where you want to manually check for rooted devices.\n        // context is the android.content.Context used to perform root detection.\n        RootDetector.checkDeviceRooted(context) { okValue, returnValue -&gt; callback(okValue, returnValue) }\n    }\n\n    companion object {\n        @JvmStatic\n        fun callback(okValue: Int, returnValue: Int)\n        {\n            if (okValue != returnValue)\n            {\n                // Device is rooted, execute specific code.\n                ...\n            }\n        }\n    }\n}\n</code></pre> <p>The callback will be called as soon as root detection has completed. The device has been detected rooted  when the <code>okValue</code> is different from the <code>returnValue</code>.</p> <p>Warning</p> <p>For compatibility reasons with automatic RASP injection, the callback function should be defined  in the <code>companion object</code>, and marked as <code>@JvmStatic</code>.</p> <pre><code>import com.guardsquare.dexguard.runtime.detection.RootDetector;\nimport com.guardsquare.dexguard.runtime.report.RootDetectorReport;\n\npublic class Foo\n{\n    public void bar()\n    {\n        // This is the location where you want to manually check for rooted devices.\n        // context is the android.content.Context used to perform root detection.\n        RootDetector.checkDeviceRooted(context, Foo::rootDetectionCallback);\n    }\n\n    private static void rootDetectionCallback(int okValue, int returnValue)\n    {\n        if  (okValue != returnValue)\n        {\n            // Device is rooted, execute specific code.\n            ...\n        }\n    }\n}\n</code></pre> <p>The callback will be called as soon as root detection has completed. The device has been detected rooted  when the <code>okValue</code> is different from the <code>returnValue</code>.</p> <p>Warning</p> <p>For compatibility reasons with automatic RASP injection, the callback method should be defined as static.</p> <pre><code>import com.guardsquare.dexguard.runtime.detection.RootDetector;\nimport com.guardsquare.dexguard.runtime.report.RootDetectorReport;\n\npublic class Foo\n{\n    public void bar()\n    {\n        // This is the location where you want to manually check for rooted devices.\n        // context is the android.content.Context used to perform root detection.\n        RootDetector.checkDeviceRooted(context, new RootDetector.Callback() {\n            @Override\n            public void onRootDetectionResultReceived(int okValue, int returnValue) {\n                rootDetectionCallback(okValue, returnValue);\n            }\n        });\n    }\n\n    private static void rootDetectionCallback(int okValue, int returnValue)\n    {\n        if (okValue != returnValue)\n        {\n            // Device is rooted, execute specific code.\n            ...\n        }\n    }\n}\n</code></pre> <p>The callback will be called as soon as root detection has completed. The device has been detected rooted  when the <code>okValue</code> is different from the <code>returnValue</code>.</p> <p>Warning</p> <p>For compatibility reasons with automatic RASP injection, the code in the anonymous class used as callback  should only call a static method which performs the actions when the device is detected as rooted.</p>"},{"location":"indepth/runtime.html#limitations_1","title":"Limitations","text":"<p>Notably the root detector may return false positives, wrongly indicating that a device is rooted, for example. This sometimes happens if vendors install files on their factory images that are generally only present on rooted devices.</p> <p>The root detector may also return false negatives, missing rooted devices. This may happen if users have installed recent, unknown root-hiding frameworks.</p> <p>We update detectors on a regular basis to account for new developments and to improve the detection results. If you encounter a case where the runtime library wrongly flags a device as being rooted, or did not correctly detect a device as being rooted, please contact our technical support with any available details.</p>"},{"location":"indepth/runtime.html#debugger-blocking","title":"Debugger blocking","text":"<p>The runtime library provides an API <code>DebugBlocker.blockDebugger</code> (in package com.guardsquare.dexguard.runtime.detection) to block native debuggers (not traditional Java debuggers, which are based on a different mechanism). You can implement its interface <code>OnAttackListener</code> and method <code>onAttack()</code> as a callback method in case the debug blocker is attacked. You need to provide an instance of your listener to the <code>DebugBlocker.blockDebugger</code> API. Follow the two step process to use debug blocker:</p> <p>Create a class that implements the DebugBlocker.OnAttackListener interface to provide a callback method.</p> <pre><code>class AttackHandlerExample implements DebugBlocker.OnAttackListener\n{\n    public void onAttack()\n    {\n        // Here you should implement the expected app behavior in case of an attack on the DebugBlocker.\n        // ...\n    }\n}\n</code></pre> <p>Provide an instance of the AttackHandlerExample class to <code>DebugBlocker.blockDebugger</code>.</p> <pre><code>    int isDebuggerBlocked = DebugBlocker.blockDebugger(new AttackHandlerExample());\n\n    if (isDebuggerBlocked != 0)\n    {\n        // The debug blocker was not able to start. The application should exit.\n        // ...\n    }\n</code></pre> <p>Please refer to the sample project in the directory <code>samples/features/DebugBlocker</code> for an example implementation of the debug blocker.</p> <p>Warning</p> <pre><code>Using the debug blocker in an SDK will prevent any application that \nincludes this SDK from being debugged. Although enabling debug blocking \nprovides security benefits in general, imposing this limitation on \napplication developers using your SDK may be undesirable.\n</code></pre>"},{"location":"indepth/runtime.html#webview-asset-encryption","title":"Asset encryption for WebView clients","text":"<p>You can encrypt the asset files (javascript, html, css,...) that are included in Cordova applications or applications with a WebView. Please refer to the package com.guardsquare.dexguard.runtime.encryption and to the sample projects in the directories <code>samples/advanced/Cordova</code> and <code>samples/features/WebView</code>.</p>"},{"location":"indepth/runtime.html#ssl-pinning","title":"SSL pinning","text":"<p>Warning</p> <p>DexGuard SSL Pinning should no longer be used if you are using, or can upgrade to, a modern library that already supports SSL pinning like OkHttp3.</p> <p>Several modern network libraries like OkHttp already support SSL pinning. The DexGuard runtime library provides some support classes to implement SSL pinning techniques with some older commonly used libraries:</p> <ul> <li>org.apache.http.client (certificate pinning),</li> <li>javax.net.ssl (certificate pinning),</li> <li>javax.net.ssl (public key pinning).</li> </ul> <p>Additionally, the support classes are hardened against commonly known hooking attacks, making SSL pinning solutions more robust.</p> <p>You can find the support classes in package com.guardsquare.dexguard.runtime.net.</p> <p>The distribution also includes a command line tool to extract the public key hashes from a server certificate (<code>bin/hash_certificate.[sh,bat]</code>).</p> <p>For example, you can enable public key pinning for an <code>HttpsURLConnection</code>:</p> <pre><code>    // Create a TrustManager that only accepts servers with the specified public key hashes.\n    // This code snippet can be generated by the hash_certificate tool for a given url.\n    // In this example we use the Wikipedia certificate for illustration purposes.\n    com.guardsquare.dexguard.runtime.net.PublicKeyTrustManager trustManager =\n        new com.guardsquare.dexguard.runtime.net.PublicKeyTrustManager(\n            new String[] {\n                // CN=*.wikipedia.org, O=\"Wikimedia Foundation, Inc.\", L=San Francisco, ST=California, C=US\n                \"8FCF8FD90E88D6E35BA8CB6D8836A2BF\",\n            }\n        );\n\n    SSLPinner sslPinner = new SSLPinner(trustManager);\n\n    // ...\n\n    // Create the URL connection.\n    URL url = new URL(urlString);\n    HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\n    sslPinner.pinHttpsURLConnection(urlConnection);\n</code></pre> <p>Please refer to the additional examples in the directories <code>samples/features/SSLPinning</code> and <code>samples/features/SSLPinningWebView</code>. These projects also illustrate how to harden the SSL pinning code further with DexGuard.</p>"},{"location":"indepth/verification.html","title":"Verification","text":"<p>Once you have build your Android application with DexGuard, you should verify that it still works and that it is suitably protected.</p>"},{"location":"indepth/verification.html#functionality","title":"Functionality","text":"<p>First of all, you should make sure the application functions properly, by testing it thoroughly. If the obfuscated application doesn't work, you may need to update your configuration, as discussed in the configuration tips and the troubleshooting section.</p>"},{"location":"indepth/verification.html#static-protection-obfuscation-and-encryption","title":"Static protection: obfuscation and encryption","text":"<p>To check whether your application has been obfuscated properly, you can inspect the build logs and apply the same tools that a hacker typically uses:</p> <ul> <li>dexdump (Android SDK): disassembles Dalvik bytecode to a   readable text format.</li> <li>aapt (Android SDK): disassembles binary resource XML files to a   readable text format.</li> <li>baksmali (open source): disassembles Dalvik bytecode to a   readable source format.</li> <li>smali (open source): assembles this source format to Dalvik   bytecode again.</li> <li>apktool (open source): disassembles and assembles entire   applications: bytecode, Android manifest files, resource files,   and assets.</li> <li>dex2jar (open source): converts Dalvik byte code to   Java bytecode.</li> <li>jad (free): decompiles Java bytecode to Java source code.</li> </ul>"},{"location":"indepth/verification.html#check-the-build-log-and-mapping-file","title":"Check the build log and mapping file","text":"<p>You can get some feedback on the results by looking at the build log in verbose mode, with DexGuard option <code>-verbose</code>. DexGuard then prints out some statistics on the number of encrypted strings, classes, asset files, etc.</p> <p>In the obfuscation mapping file (which you can print using the <code>-printmapping</code> option), you can see the obfuscated names of all classes, fields, and methods. Class names and method names that are tied to the Android runtime can't be obfuscated, and names that are preserved with <code>-keep</code> options won't be obfuscated, but the other classes, fields, and methods should get meaningless names.</p>"},{"location":"indepth/verification.html#disassemble-your-processed-bytecode","title":"Disassemble your processed bytecode","text":"<p>Although all Dalvik bytecode can be disassembled by definition, DexGuard makes it much more difficult to interpret. Even if you don't understand the bytecode, you can quickly check if your processed code contains sensitive strings, class names, field names, or method names, by inspecting the output of <code>dexdump</code>:</p> <pre><code>dexdump -d -f -t dexdump.tmp MyApp-release.apk\n</code></pre> <p>On Linux or macOS, you can pipe its output through <code>less</code> or <code>grep</code> to quickly find strings.</p>"},{"location":"indepth/verification.html#view-your-processed-android-manifest-file-and-resource-xml-files","title":"View your processed Android manifest file and resource XML files","text":"<p>The Android build process converts resource XML files to more compact binary versions, but you can still view them in a text form with <code>aapt</code>:</p> <pre><code>aapt dump xmltree MyApp-release.apk AndroidManifest.xml\n</code></pre> <p>Although the output format is readable, you may prefer the original XML format that <code>apktool</code> can deliver, as discussed next.</p>"},{"location":"indepth/verification.html#disassemble-your-processed-application","title":"Disassemble your processed application","text":"<p>You can inspect the entire processed application, including the Android manifest file and the resource XML files in their original XML format, with <code>apktool</code>:</p> <pre><code>apktool d MyApp-release.apk\n</code></pre> <p>However, <code>apktool</code> may not always be able to handle the hardened code, crashing while generating its output. This can be considered a useful feature, since the tool is also popular to clone and tamper with apps.</p>"},{"location":"indepth/verification.html#decompile-your-processed-bytecode","title":"Decompile your processed bytecode","text":"<p>As a final step, you can check how well the code can be decompiled, with the combination of <code>dex2jar</code> and <code>jad</code>:</p> <pre><code>dex2jar MyApp-release.apk\njar -xf MyApp-release-dex2jar.jar\njad mypackage/MyClass.class .....\n</code></pre> <p>At the very least, non-public identifiers should have obfuscated names that cause all kinds of problems. Non-trivial optimized code is typically hard to decompile and difficult to read. The decompiler also gets thoroughly confused by encryption code. Even more so than with <code>apktool</code>, the quality of the output depends a lot on the decompiler, so you may want to try different decompilers: jad, JD-GUI, Fernflower, Halcyon, etc.</p>"},{"location":"indepth/verification.html#dynamic-protection-tamper-detection","title":"Dynamic protection: tamper detection","text":"<p>Tamper detection is illustrated in the sample in <code>samples/TamperDetection</code>. It is essentially a call to a method of the DexGuard utility library to check whether the generated apk archive has been modified in any way. Your application can then act accordingly.</p> <p>To verify that the detection really works, you can tamper with the generated apk archive yourself. The slightest modification will set off the detector, so you can use tools like <code>jar</code>, <code>zip</code>, <code>jarsigner</code>, or even <code>zipalign</code>. For instance:</p> <pre><code>zipalign -f 4 MyApp-release.apk MyApp-tampered.apk\nadb install -r MyApp-tampered.apk\n</code></pre> <p>If you then run your application again, you should see your application's tamper code being activated.</p>"},{"location":"indepth/protectionreport/protectionreport.html","title":"Protection Report","text":"<p>With every build, DexGuard automatically produces a very interactive html report that will enable you to continuously assess and improve protection of your app or SDK. The file's name is <code>protectionreport.html</code> and it is located in your standard build output folder, as described here.</p> <p>The Protection Report has three main components: </p> <ul> <li>Key technical risk assessment metrics.</li> <li>Protection status and impact overview.</li> <li>Custom-tailored configuration advice.</li> </ul> <p></p>"},{"location":"indepth/protectionreport/protectionreport.html#risk-assessment","title":"Risk Assessment","text":"<p>The risk assessment scores are important indicators of the robustness of the  applied code hardening and RASP and can be used to verify and validate the  applied protection before releasing the mobile application or SDK.</p> <p>The protection KPIs can be expanded to have a more detailed overview.</p> <p></p> <p>This detailed overview helps you to quickly assess whether you're applying the  right protection measures against major risks. The assessment assigns a score to  the current protection configuration indicating its effectiveness against these  five risk categories:</p> <ol> <li>Capabilities and monetization: the level of protection against app limitation exploits, like unlocking of premium features.</li> <li>Cloning / repackaging protection: avoiding repackaged app clones.</li> <li>Data leak and data forgery safety: the level of protection against theft of app secrets and personally identifiable information (PII).</li> <li>Environment safety: protection against a compromised environment, often a precondition to start tampering your app.</li> <li>IP safety: the level of protection against reverse engineering of your app.</li> </ol> <p>After expanding the KPI details, the Protection Report indicates for each category which actions you can take to improve the effectiveness of the applied app protection. The feature breakdown indicates which of DexGuard's product features contribute to the KPI: the green ones are correctly applied, the red ones are either not yet applied or scoring for it is very low, and for the orange ones there is some configuration advice. Just click on them to learn more.</p> <p>It is recommended to focus on the specific categories that are most relevant for your use-case or industry.</p>"},{"location":"indepth/protectionreport/protectionreport.html#protection-status","title":"Protection Status","text":"<p>The protection status section will help you understand which features are used  and how they have been applied. It will help you get insight in to effectiveness  of your configuration and assist you in spotting pitfalls.</p> <p>Additionally, it lets you uncover the features that are currently not in use  with a link to the relevant manual page. This includes new features added in later  releases that you might not have considered yet.  It will help you leverage all  of DexGuard's protection capabilities to effectively protect your mobile  assets.</p> <p></p>"},{"location":"indepth/protectionreport/protectionreport.html#configuration-advice","title":"Configuration Advice","text":"<p>The configuration advice makes the information provided in the previous  sections actionable and guides you towards a more optimal configuration.</p> <p>The advice and best practices are custom-tailored based on analysis of your app  ass well as on expert knowledge and hands-on experience by our teams. </p> <p></p>"},{"location":"indepth/protectionreport/protectionreport.html#filters","title":"Filters","text":"<p>The configuration advice section will help you understand how your filters affect the obfuscated result. It points out some common mistakes, like:</p>"},{"location":"indepth/protectionreport/protectionreport.html#ineffective-filters","title":"Ineffective Filters","text":"<p>These are filters that didn't match anything. Note the typo in <code>Util</code> below.</p> <p></p>"},{"location":"indepth/protectionreport/protectionreport.html#catchall-filters","title":"Catchall Filters","text":"<p>These are filters that match everything and might require more fine-tuning.</p> <p></p>"},{"location":"indepth/protectionreport/protectionreport.html#suppress-advice","title":"Suppress Advice","text":"<p>If certain advice is not applicable to you, you can suppress it in future reports. When clicking the <code>Suppress advice?</code> icon, an entry with a <code>-dontnote</code> option is copied to you clipboard, which you can then paste in your DexGuard configuration file.</p>"},{"location":"languages_platforms/hermes.html","title":"Hermes","text":"<p>Hermes bytecode is stored in an <code>index.android.bundle</code> asset in your Android application. DexGuard can encrypt this asset file for you.</p>"},{"location":"languages_platforms/hermes.html#configuration","title":"Configuration","text":"<p>DexGuard will automatically encrypt the Hermes asset for you.</p> <p>To disable this behavior, add <code>-dontencrypthermesassetfile</code> to your DexGuard configuration.</p> <p>Warning</p> <p>For React Native apps, the Preserving runtime-invisible annotations workaround is required.</p>"},{"location":"languages_platforms/hermes.html#code-push","title":"Code Push","text":"<p>Code Push allows you to deploy updates to your Hermes asset directly to your user's devices. If your initial application was built using Hermes asset encryption, the decryption code will be in place,  and thus your Code Push updates must be encrypted as well. Two configuration options allow you to do this:</p> <p><code>-printcodepushmapping</code>:  specifies to write an output file containing the mapping info for processing future CodePush updates.</p> <p>In order to process future Code Push updates, you will need the file printed by <code>-printcodepushmapping</code>.  Make sure to store it securely so that it may be retrieved easily. It is important to keep this option in mind during the initial build of your application. The DexGuard Gradle plugin writes this file to <code>/build/outputs/dexguard/.../codepushmapping.txt</code> by default. If you run DexGuard in standalone mode you have to set this configuration option manually.</p> <p><code>-applycodepushmapping</code>:  specifies the mapping file for processing a Code Push update. This option allows you to pass the file generated by the <code>-printcodepushmapping</code> to  DexGuard when processing your Code Push update.</p> <p>For a more in-depth look at our Code Push support, please consult the dedicated Code Push page of the manual.</p>"},{"location":"languages_platforms/java.html","title":"Java","text":"<p>DexGuard supports the obfuscation, optimization and shrinking of Java bytecode,  as well as other languages that compile to it, such as Kotlin and Scala.</p>"},{"location":"languages_platforms/java.html#java-8-support","title":"Java 8+ support","text":"<p>DexGuard operates in post-processing mode, which means that DexGuard is not part of the build chain, but instead it processes  the artifacts produced by the Android Gradle Plugin.</p> <p>Because of this, the Android Gradle Plugin is responsible for setting the supported Java language level and carrying out any backporting or desugaring transformations. This allows you to use new language features supported by the  Android Gradle Plugin as soon as they become available, without needing explicit  support or updates to DexGuard.</p> <p>For more information, please consult the relevant Android developer documentation.</p>"},{"location":"languages_platforms/kotlin.html","title":"Kotlin","text":"<p>The Kotlin compiler injects code and metadata into the classes that it generates to support features not natively supported by the Java and Android environments. The metadata injected by the Kotlin compiler takes the shape of an annotation added to classes which leaks semantic information that can aid attackers.</p> <p>The supported versions are listed in the System Requirements page.</p>"},{"location":"languages_platforms/kotlin.html#configuration","title":"Configuration","text":"<p>In most cases, you do not need to keep Kotlin metadata for app projects - therefore, no configuration changes are necessary and Dexguard can safely remove the Kotlin metadata. However, there are two common reasons to explicitly keep the metadata, reflection and libraries.</p> <p>DexGuard only keeps the Kotlin metadata of a class if you explicitly keep that class or one of its members, and you add the <code>-keep class kotlin.Metadata</code> option to your configuration. Note that this option may also be required by SDK of your project, and indirectly added as a consumer rule. </p> <p>For example, if you have the following keep rule for a Kotlin class named <code>com.example.KotlinExample</code>, by default the class is kept but its metadata is not:</p> <pre><code>-keep class com.example.KotlinExample\n</code></pre> <p>You can add <code>-keep class kotlin.Metadata</code> to your configuration to instruct DexGuard to keep and adapt Kotlin metadata:</p> <pre><code># Add this option to tell DexGuard to keep and adapt Kotlin metadata on kept classes.\n-keep class kotlin.Metadata\n</code></pre>"},{"location":"languages_platforms/kotlin.html#serialization","title":"Serialization","text":"<p>You can use the <code>dexguard-kotlin-serialization.pro</code> default configuration as part of your <code>build.gradle</code> file for the appropriate DexGuard consumer rules for the kotlinx.serialization library.</p>"},{"location":"languages_platforms/kotlin.html#reflection","title":"Reflection","text":"<p>The most common case to keep Kotlin metadata would be if you use the kotlin-reflect library. Just like when using Java reflection, <code>-keep</code> rules are required in your configuration to keep the specific classes and members accessed through reflection.</p> <p>In this case, to instruct DexGuard to keep and adapt the corresponding Kotlin metadata, add the following to your configuration:</p> <pre><code>-keep class kotlin.Metadata\n</code></pre> <p>A popular framework that relies on reflection is Jackson.</p> <p>See the sample <code>basic/KotlinReflection</code> for an example that shows why keeping and adapting Kotlin metadata is important for Kotlin reflection.</p>"},{"location":"languages_platforms/kotlin.html#library-projects","title":"Library Projects","text":"<p>When developing an SDK that exposes Kotlin-specific features to its users, you need to preserve the metadata of the public API, so that Kotlin compiler can detect and handle any Kotlin features. These include features such as named parameters, suspend functions, top-level functions and type aliases.</p> <p>In the case of a library, you would already be keeping the public API, so you can simply add the following to your configuration:</p> <pre><code>-keep class kotlin.Metadata\n</code></pre>"},{"location":"languages_platforms/kotlin.html#features","title":"Features","text":"<p>The following features are applied when <code>-keep class kotlin.Metadata</code> is enabled:</p> <ul> <li>Stripping Kotlin metadata annotation from Java classes where there was not keep rule for the class or one of its members.</li> <li>Obfuscation is applied to Kotlin identifiers in metadata, such as class or member names, to match those in the Java class files. Kotlin specific features such as type aliases are also obfuscated.<ul> <li>Special Kotlin identifier names are kept as expected by Kotlin where required, such as ensuring companion class names correspond with their internal field name.</li> <li>Kotlin parameter names are kept when using <code>-keepparameternames</code>.</li> <li>Default implementation classes (<code>$DefaultImpls</code>) of interface methods will be kept automatically when keeping the interface.</li> <li>Callable references are updated which ensures correct functionality and that unobfuscated strings do not remain in the code.</li> <li>Data Classes are adapted so that the names of properties in the autogenerated <code>toString()</code> methods match the obfuscated names.</li> <li>Intrinsics checks are removed so that the resulting code contains no references to original parameter names, member names etc. This can be disabled with <code>-keepkotlinintrinsics</code></li> </ul> </li> <li>Shrinking removes all unused Kotlin metadata components such as unused functions and properties. This ensures that, even where the Kotlin metadata is required, only the used components are kept.</li> <li>Optimizations are disabled for certain classes and members which are known to cause invalid metadata or, for example, where certain fields are required by the Kotlin compiler or the Kotlin reflection API.</li> <li>Kotlin Module files (<code>META-INF/*.kotlin_module</code>) are updated with obfuscated names and unused classes are removed.</li> </ul>"},{"location":"languages_platforms/flutter/index.html","title":"Flutter Protection","text":"<p>DexGuard provides two approaches for protecting your Flutter application.</p> <p>The 64-bit versions of your Flutter application will be protected by the Flutter obfuscator. It has metadata and control-flow obfuscation capabilities, can assure code integrity, and provides native RASP capabilities.</p> <p>Processing of the 32-bit versions of your Flutter application is not supported by the Flutter obfuscator. These native libraries will instead be encrypted by DexGuard.</p> <p>Both these protection strategies are enabled by default, and can be disabled with <code>-dontobfuscateflutter</code> and <code>-dontencryptflutterlibraries</code> respectively.</p> <p>The tables below provide a summary of applied protections and supported technology versions.</p> <p> Architectures &amp; ABIs Protection strategy Default enabled 64-bit <code>arm64-v8a</code> <code>x86-64</code> Flutter Obfuscator On linux systems. Advanced configuration possible with <code>-flutterconfiguration</code> 32-bit <code>armeabi-v7a</code> Flutter Encryption Yes <p></p> The Flutter obfuscator requires additional setup on Windows build machines! <p>The Flutter obfuscator requires the protected application to be built on a Linux system. To overcome this limitation for Windows systems, the Windows Subsystem for Linux should be used. Consult the Using Windows page for further instructions.</p> <p>By default, DexGuard applies at least one protection layer to all Flutter libraries.</p> <p>In case a Flutter library could not be processed by the Flutter obfuscator for any of the previously mentioned reasons, DexGuard will automatically encrypt these libraries to make sure your application is protected.</p> <p>This will not be the case when using the DexGuard nativeloader. This feature is currently incompatible with the DexGuard nativeloader and will be automatically disabled to prevent issues with existing setups. If you want to take advantage of the new encryption feature, remove the nativeloader as a dependency from your app.</p> <p> Supported versions Flutter <code>2.2.0</code> <code>2.2.1</code> <code>2.2.2</code> <code>2.2.3</code> <code>2.8.0</code> <code>2.8.1</code> <code>3.0.5</code> <code>3.3.x</code> <code>3.7.x</code> <code>3.10</code> <code>3.13</code> <code>3.16</code> <code>3.19</code> <code>3.22</code> <code>3.24</code> <code>3.27</code> <code>3.29</code> Dart SDK <code>2.13.0</code> <code>2.13.1</code> <code>2.13.2</code> <code>2.13.3</code> <code>2.13.4</code> <code>2.15.0</code> <code>2.15.1</code> <code>2.17.6</code> <code>2.18.x</code> <code>2.19.x</code> <code>3.0</code> <code>3.1</code> <code>3.2.</code> <code>3.3</code> <code>3.4</code> <code>3.5</code> <code>3.6</code> <code>3.7</code> <p></p> <p>The Flutter versions in this table use one of the supported Dart SDK versions by default. You can verify your Flutter version using <code>flutter --version</code>.</p> $ flutter --version<pre><code>Flutter 2.8.1 \u2022 channel stable \u2022 https://github.com/flutter/flutter.git\n[...]\nTools \u2022 Dart 2.15.1\n</code></pre> <ul> <li> <p> Get started with the Flutter Obfuscator</p> <p>The Quick Start guide will help you set up and configure the Flutter obfuscator.</p> <p> Quick Start guide</p> </li> </ul>"},{"location":"languages_platforms/flutter/building-on-windows.html","title":"Using Windows","text":"<p>This page describes the steps on how to build a DexGuard-protected application on Windows operating systems. Protection features applied by DexGuard to Flutter code require the protected application to be built on a Linux system. To overcome this limitation for Windows systems, the Windows Subsystem for Linux should be used in order to provide the proper Linux build environment.  This limitation does not apply for builds on Linux and macOS systems.</p> <p>Note</p> <p>DexGuard can still be applied to standard builds on Windows systems. However, unless WSL is used, the result of these builds will not contain any additional protections applied by DexGuard to the Flutter code.</p>"},{"location":"languages_platforms/flutter/building-on-windows.html#installing-the-windows-subsystem-for-linux-wsl","title":"Installing the Windows Subsystem for Linux (WSL)","text":"<p>On Windows 10 version 2004 and higher (Build 19041 and higher) or Windows 11, install WSL using the <code>wsl</code> command.</p> <p>For Windows versions that do not support the automatic install of WSL, follow the manual installation procedure.</p> <p>Once WSL has been properly set up in Windows machine, download your preferred Linux distribution for use on WSL.</p>"},{"location":"languages_platforms/flutter/building-on-windows.html#setting-up-the-android-environment-on-wsl","title":"Setting up the Android environment on WSL","text":"<ol> <li> <p>Once the Linux distribution is set up and updated,  download and extract the required Android SDK command line tools.</p> </li> <li> <p>Install your preferred Java Development Kit (JDK).</p> </li> <li> <p>In order to fetch the required Android build tools, determine the SDK version the application is being compiled for. Use the <code>sdkmanager</code> tool to install the platform build tools.</p> </li> <li> <p>Set the necessary environment variables for Java (<code>JAVA_HOME</code>) and the Android SDK (<code>ANDROID_HOME</code>).</p> </li> <li> <p>Install the Android Native Development Kit (NDK) using the <code>sdkmanager</code> tool.</p> </li> <li> <p>Finally, install the Gradle build tools.</p> </li> </ol>"},{"location":"languages_platforms/flutter/building-on-windows.html#setting-up-dexguard-on-wsl","title":"Setting up DexGuard on WSL","text":"<p>On WSL, the host Windows system files are located in the <code>/mnt/</code> directory. All paths to files and directories residing in your host system must be preceded by <code>/mnt/</code>.</p> <p>Ensure that all WSL path references to your DexGuard distribution, license file, and keystore from the project's Gradle build scripts are properly specified. Path references used by your project must be defined according to where the resources are located.</p> <p>If the resources are on the host system: <code>/mnt/c/Users/&lt;user&gt;/&lt;path-to-DexGuard-distribution&gt;</code> <code>/mnt/c/Users/&lt;user&gt;/&lt;path-to-license-file&gt;</code> <code>/mnt/c/Users/&lt;user&gt;/&lt;path-to-keystore&gt;</code> <code>/mnt/c/Users/&lt;user&gt;/&lt;path-to-project&gt;</code> If the resources are on WSL: <code>/home/&lt;user&gt;/&lt;path-to-DexGuard-distribution&gt;</code> <code>/home/&lt;user&gt;/&lt;path-to-license-file&gt;</code> <code>/home/&lt;user&gt;/&lt;path-to-keystore&gt;</code> <code>/home/&lt;user&gt;/&lt;path-to-project&gt;</code></p> <p>Note</p> <p>The project, including the DexGuard distribution, license file, and all other dependencies may reside on either the host system or WSL. In the former case, the path must be preceded by <code>/mnt/</code> only when being used from inside WSL. In the latter case, the dependencies must be copied from the host system or generated on WSL. The paths can then be referenced directly from WSL.</p> <p>If using the default Android debug keystore, make sure that the keystore exists on WSL:</p> <p><code>/home/&lt;user&gt;/.android/debug.keystore</code></p> <p>The license file may optionally be copied from the host Windows system to your home directory on WSL.  In this case, DexGuard will be able to automatically locate it and the path need not be specified in the build script. For more information on how to configure the license, refer to the section on its setup.</p>"},{"location":"languages_platforms/flutter/building-on-windows.html#building-with-wsl","title":"Building with WSL","text":"<p>The protected application can then be built with the appropriate build commands:</p> <pre><code>/mnt/c/Users/&lt;user&gt;/&lt;project-dir&gt;/gradlew assemble\n</code></pre>"},{"location":"languages_platforms/flutter/callbacks.html","title":"Callbacks","text":"<p>These options will determine the reaction on RASP violation.</p> <p>If a run time check does not succeed, the app will crash without revealing the reason for the crash. If you need an additional or a different behavior, please define a <code>callback</code> and <code>continue-on-callback</code> options.</p> <p>Callback functions can be defined anywhere in the main binary of your application, but they should be defined only once and must have a unique name. It must be marked with a pragma so it's not optimized away and callable. The function should take no arguments and return nothing. This function name can then be set as <code>callback</code> in the config. Example:</p> <pre><code>var rootDetected = false;\n\n@pragma(\"vm:unsafe:no-interrupts\")\n@pragma(\"vm:entry-point\", \"call\")\nvoid myRootCallback() {\n  rootDetected = true;\n}\n\nvoid checkRootDetected() {\n  if (rootDetected) {\n    // Insert reaction here.\n  }\n}\n\nvoid main() {\n  checkRootDetected();\n  runApp(const MyApp());\n}\n</code></pre> <p>Warning</p> <p>Starting from Flutter 3.22, there is a limitation on using callbacks. Callbacks must be defined with the <code>@pragma(\"vm:unsafe:no-interrupts\")</code> annotation and may no longer include function calls.</p> <p>If you need to implement a specific reaction to a runtime check, use the callback to set a global variable. This variable can be checked later from the application code.</p> <p>By default, after invoking a callback the application will be forced to exit or crash. This behaviour can be tweaked using the continue-on-callback option which disables the exit and only leaves the callback invocation. If no callback was provided, and this option was already set to true, it will be ignored.</p> <pre><code>environment-integrity:\n  enabled: true\n  root:\n    enabled: true\n    continue-on-callback: true\n    callback: \"myCallback\"\n</code></pre>"},{"location":"languages_platforms/flutter/callbacks.html#callbacks-best-practices","title":"Callbacks best practices","text":""},{"location":"languages_platforms/flutter/callbacks.html#account-for-different-situations","title":"Account for different situations","text":"<p>There are some special situations that you will need to handle in your callback code in order for it to always work correctly.</p> <ul> <li> <p>Thread safety: Callbacks can trigger from any thread.</p> </li> <li> <p>Application lifecycle: Callbacks can trigger before or after the application fully starts.</p> </li> <li> <p>Async operations: If the application is set to crash after the callback, any async operations started by the callback may be interrupted prematurely.</p> </li> </ul>"},{"location":"languages_platforms/flutter/callbacks.html#back-end-reporting-use-case","title":"Back-end reporting use case","text":"<p>Apply these best practices if you need your callbacks to report a RASP event to the backend.</p> <ul> <li> <p>Runtime checks may trigger often. If you are using your own backend, strongly consider filtering out duplicate events to avoid excess traffic.</p> </li> <li> <p>If you set up RASP to terminate the application after a failed check, be sure to report synchronously to the backend, otherwise the network request may be terminated prematurely.</p> </li> </ul>"},{"location":"languages_platforms/flutter/configuration.html","title":"Configuration File","text":"<p>Example configuration file:</p> <pre><code>protection:\n  names:\n    enabled: true\n  control-flow:\n    enabled: true\n    logic:\n      enabled: true\n      allowlists:\n        - level: medium\n          allowlist:\n            - \"EncryptFunc\"\n  code-integrity:\n    enabled: true\n    functions:\n      enabled: true\n  environment-integrity:\n    enabled: true\n    debugger:\n      enabled: true\n    root:\n      enabled: true\n    jailbreak:\n      enabled: true\n</code></pre> <p>Use clean indentation!</p> <p>The configuration uses the YAML format. Similar to, for example the Python language, indentation has meaning.</p>"},{"location":"languages_platforms/flutter/configuration.html#features","title":"Features","text":""},{"location":"languages_platforms/flutter/configuration.html#metadata-obfuscation","title":"Metadata Obfuscation","text":"<p>Flutter apps are written in Dart. When compiling Flutter apps in release mode, the ahead-of-time compiler is used to generate a native app. This app contains a Dart snapshot with metadata. This metadata contains information about objects, functions, data (eg. strings), etc.</p> <p>Flutter is able to obfuscate the metadata and rename all function names. This is already a good first step but is not enough. For a reverse engineer this metadata is still valuable because:</p> <ul> <li>It contains all of the strings that are used in the app and,</li> <li>The metadata can still be used to identify function boundaries and decompile     them more easily.</li> </ul> <p>DexGuard or iXGuard protects your app by encrypting this valuable metadata and your strings.</p>"},{"location":"languages_platforms/flutter/configuration.html#compatibility-with-flutter-built-in-obfuscation","title":"Compatibility with Flutter built-in obfuscation","text":"<p>Flutter provides a simple built-in obfuscation capability with the <code>--obfuscate</code> switch.</p> <p>We recommend to switch the built-in obfuscation off when protecting your Flutter product with Guardsquare. While having using both at the same time will technically work, it will not provide extra reverse engineering resilience, but would make it difficult to read the stack traces such as crash logs. This is due to the fact that Guardsquare does not support stack trace symbolication for Flutter built-in obfuscation.</p>"},{"location":"languages_platforms/flutter/configuration.html#configuration","title":"Configuration","text":""},{"location":"languages_platforms/flutter/configuration.html#enabled","title":"enabled","text":"<p>To start using metadata obfuscation, enable it in the configuration under the <code>names</code> key:</p> <p>Default: <code>false</code></p> <pre><code>names:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#verification","title":"Verification","text":"<p>You can verify the result by running <code>strings</code> on the <code>libapp.so</code> or <code>App.framework/App</code> file in your unzipped <code>.apk</code>/<code>.ipa</code> before and after obfuscation to see the difference.</p> <pre><code># Android\n$ unzip -d unpacked_apk my_flutter_app.apk\n$ strings unpacked_apk/lib/arm64-v8a/libapp.so\n\n# iOS\n$ unzip -d unpacked_ipa my_flutter_app.ipa\n$ strings unpacked_ipa/Payload/Runner.app/Frameworks/App.framework/App\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#control-flow-obfuscation","title":"Control-flow Obfuscation","text":"<p>Just like any other app, written in any language, Flutter apps written in Dart code contains application logic and algorithms that are sometimes themselves important intellectual property. In other cases reversing the logic is a step towards targeted tampering with the application code.</p> <p>The different aspects of an application's control flow can be obfuscated.</p>"},{"location":"languages_platforms/flutter/configuration.html#configuration_1","title":"Configuration","text":""},{"location":"languages_platforms/flutter/configuration.html#enabled_1","title":"enabled","text":"<p>Enable or disable techniques for obfuscation of function logic under the <code>control-flow.logic</code> key. Note that this feature requires a allowlist. Please refer to the Filters section for more information on how to specify it.</p> <p>Default: <code>true</code></p> <pre><code>  control-flow:\n    enabled: true\n    logic:\n      enabled: true\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#allowlists","title":"allowlists","text":"<p>The allowlist allows you to specify which functions or methods are considered for control flow obfuscation. You can again use regular expressions here to simplify configuration. <code>level</code> indicates the strength of the applied obfuscation techniques. This currently makes no difference when applied to Dart code.</p> <p>Default: none</p> <pre><code>control-flow:\n  enabled: true\n  logic:\n    enabled: true\n    allowlists:\n      - level: medium\n        allowlist:\n          - \"RSA.*\"\n          - \"DecryptFunction\"\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#code-integrity","title":"Code Integrity","text":"<p>A common goal for attackers is changing the behaviour of your application, this could be the end goal or the means to an end. For example, removing a license check could be a final goal whereas printing decrypted network traffic could be a step towards analysing a remote API.</p> <p>These kinds of changes to application behaviour usually require adapting the code, which can be done through static binary patching or dynamically during execution. The latter is often done with the help of tools like Cydia Substrate or advanced Dynamic Binary Instrumentation toolkits like Frida or HookZz.</p> <p>These tools can also be applied to change the behavior of Dart code. DexGuard and iXGuard offer protection against inline hooking of Dart functions.</p>"},{"location":"languages_platforms/flutter/configuration.html#configuration_2","title":"Configuration","text":""},{"location":"languages_platforms/flutter/configuration.html#enabled_2","title":"enabled","text":"<p>Enable or disable protection against inline hooking under the <code>code-integrity.functions</code> key. This protects against hooking techniques that will change the start of the function body (eg. Frida).</p> <p>Default: <code>true</code></p> <pre><code>code-integrity:\n  enabled: true\n  functions:\n    enabled: true\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#allowlist","title":"allowlist","text":"<p>Inline hooking protection automatically selects functions for protection. To make sure that a function is always protected, it can be specified in an allowlist.</p> <p>Default: none</p> <pre><code>code-integrity:\n  enabled: true\n  functions:\n    enabled: true\n    allowlist:\n      - \"someMethod\"\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#denylist","title":"denylist","text":"<p>The denylist allows you to specify functions where the checks must not be injected and which functions will not be protected. Please refer to the Filters section for more information on how to specify it.</p> <p>Default: none</p> <pre><code>code-integrity:\n  enabled: true\n  functions:\n    enabled: true\n    denylist:\n      - \"dontProtectMe\"\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#aggressiveness","title":"aggressiveness","text":"<p>Default: <code>medium</code></p> <pre><code>code-integrity:\n  enabled: true\n  functions:\n    enabled: true\n     aggressiveness: medium\n</code></pre> <p>Use <code>aggressiveness</code> parameter to determine the amount of the checking code injected. Aggressiveness can have one of the 5 available levels: <code>min</code>, <code>low</code>, <code>medium</code>, <code>high</code>, <code>max</code>. Be aware that picking a higher level here can have a significant impact on application size and performance.</p>"},{"location":"languages_platforms/flutter/configuration.html#callback","title":"callback","text":"<pre><code>code-integrity:\n  enabled: true\n  functions:\n    enabled: true\n    callback: \"myCallback\"\n    continue-on-callback: false\n</code></pre> <p>A callback can be defined to configure a custom reaction to integrity violations. Refer to Callbacks for more information.</p>"},{"location":"languages_platforms/flutter/configuration.html#environment-integrity","title":"Environment Integrity","text":"<p>Runtime Application Self Protection (RASP) remains an important cornerstone to protect your applications from reverse engineering attempts. This is again regardless of the language that your app is written in. Therefore, environment checks can be injected in to your Dart code to optimally help protect your Flutter app. By adding this on top of the existing Guardsquare RASP checks, we add an additional layer of protection to thwart reverse engineers.</p>"},{"location":"languages_platforms/flutter/configuration.html#configuration_3","title":"Configuration","text":"<p>Root, jailbreak and debugger detection are separate options to enable and configure. To inject both you need to set both options:</p> <p>Note</p> <p>Root detection only applies to Android apps and is ignored for iOS apps. The same is true for jailbreak detection when processing Android apps.</p> <p>Danger</p> <p>The root detection checks injected in Flutter code cannot detect all types of rooting setups. To achieve a more complete root detection coverage, also enable root detection in DexGuard.</p> <pre><code>environment-integrity:\n  enabled: true\n  debugger:\n    enabled: true\n  jailbreak:\n    enabled: true\n  root:\n    enabled: true\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#denylist_1","title":"denylist","text":"<p>The denylist allows you to specify functions where the RASP checks must not be injected. Please refer to the Filters section for more information on how to specify it.</p> <p>Default: none</p> <pre><code>environment-integrity:\n  debugger:\n    enabled: true\n    denylist:\n      - \"prepareService.*\"\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#checkpoints","title":"checkpoints","text":"<p>Checkpoint functions can be defined explicitly and it is guaranteed that the specific check will be performed before the function is executed.</p> <p>Default: none</p> <pre><code>environment-integrity:\n  debugger:\n    enabled: true\n    checkpoints:\n      - \"encrypt\"\n      - \"decrypt\"\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#spray","title":"spray","text":"<p>To insert checks randomly in the code, use the spray policy. The detection logic will be placed in all available code that is not denylisted.</p> <p>Spraying runtime checks makes it significantly more difficult to patch them out manually or automatically due to the following:</p> <ol> <li> <p>Diversity. Every check will be obfuscated differently making it difficult to locate them automatically.</p> </li> <li> <p>Amount. A large number of runtime checks will be distributed in the code automatically making it difficult to patch all of them manually.</p> </li> <li> <p>Randomness. Given a large injection base, every build will place the checks differently, making it impossible for an attacker to automate based on older builds.</p> </li> </ol> <p>Use <code>aggressiveness</code> parameter to determine the amount of the checking code injected. Aggressiveness can have one of the 5 available levels: <code>min</code>, <code>low</code>, <code>medium</code>, <code>high</code>, <code>max</code>. Be aware that picking a higher level here can have a significant impact on application size and performance.</p> <p>Default: <code>true</code> <code>medium</code></p> <p>Example configuration for debugger protection:</p> <pre><code>environment-integrity:\n  enabled: true\n  debugger:\n    enabled: true\n    spray: true\n    aggressiveness: medium\n</code></pre>"},{"location":"languages_platforms/flutter/configuration.html#callback_1","title":"callback","text":"<pre><code>environment-integrity:\n  enabled: true\n  debugger:\n    enabled: true\n    callback: \"myCallback\"\n    continue-on-callback: false\n</code></pre> <p>A callback can be defined to configure a custom reaction to integrity violations. Refer to Callbacks for more information.</p>"},{"location":"languages_platforms/flutter/filters.html","title":"Filters","text":"<p>Filters enable you to indicate which parts of your code should (not) be handled by the available features. They can be used in one of two ways;</p> <ul> <li>A filter can be used as a allowlist: process everything that is in the list.</li> <li>A filter can be used as a denylist: process everything that is not in the list.</li> </ul> <p>All filters support Modified ECMAScript regular expressions. They can for example be used to select a group of methods. In general they help to simplify the filters.</p> <p>The following section explains the filters in general. The semantics of a filter depend on the feature, e.g. in the case of name obfuscation, the filter specifies which names shouldn't be obfuscated. For the exact semantics of each feature please refer to the In Practice section below.</p> <p>Regular Expressions</p> <ul> <li>Tokens and keys often contain characters that need escaping, e.g. <code>\"ShwqhcJIYn+aoH\"</code>   should be <code>\"ShwqhcJIYn\\\\+aoH\"</code> in your config. You must double the backslash if the   string should be a regex character, because backslash is treated as a YAML string escape sequence.</li> <li>When using double quotes (<code>\"</code>) you need to escape all special characters except for single quotes (<code>'</code>),   while with single quotes (<code>'</code>) there is no need to escape any special character other than repeat single quotes (<code>''</code>)   contained in the sequence. The same applies to the word boundary character, which should appear either as <code>\"\\\\b\"</code> or <code>'\\b'</code>.</li> <li>There is a number of characters with special meaning in YAML, namely, the plus sign (<code>+</code>), the minus sign (<code>-</code>),   the right angle bracket (<code>&gt;</code>) and the pipe symbol (<code>|</code>). These characters always require escaping with   one backslash (<code>\\</code>) or two (<code>\\\\</code>) based on the kind of quotation marks you are using.</li> <li>More information on the differences between unquoted, single-quoted and double-quoted sequences   can be found in the YAML Specification (Section 7.3 - Flow Scalar Types).</li> </ul>"},{"location":"languages_platforms/flutter/filters.html#basics","title":"Basics","text":"<p>Filters enable you to indicate which parts of your code should (not) be handled by the available features. They can be used in one of two ways;</p> <ul> <li>A filter can be used as a allowlist: process everything that is in the list.</li> <li>A filter can be used as a denylist: process everything that is not in the list.</li> </ul> <p>Note</p> <p>Structured filters are not supported. You can use regexes and the Dart mangling scheme to specify member functions.</p> <p>As an example, consider the following class:</p> <pre><code>class Foo {\n  bar() {\n    print('hello world');\n  }\n}\n\nint baz() {\n  return 42;\n}\n</code></pre> <p>To specify the both functions in a allowlist you can write:</p> <pre><code>allowlist:\n  - \"Foo.bar\"\n  - \"baz\"\n</code></pre> <p>In case you want to match all functions in a class you can use a regex:</p> <pre><code>allowlist:\n  - \"Foo.*\"\n  - \"baz\"\n</code></pre>"},{"location":"languages_platforms/flutter/start-android.html","title":"Quick Start","text":""},{"location":"languages_platforms/flutter/start-android.html#build-a-flutter-app","title":"Build a Flutter app","text":"<p>To protect your app, the app should be built using the ahead-of-time compiler. This means the app should be built in release mode. This is the default when using <code>flutter build</code>.</p> <p>Protection of Flutter applications only supports the <code>arm64-v8a</code> and <code>x86-64</code> architecture.</p> <p>If your app contains the older <code>armeabi-v7a</code> architecture, the Flutter obfuscator will not process it,  but DexGuard will automatically encrypt these libraries instead. Use  the <code>--target-platform</code> flag to include the supported architectures.</p> <p>The full command should be:</p> <pre><code>flutter build apk --target-platform android-arm64,android-x64\n</code></pre> <p>or for Android App Bundles:</p> <pre><code>flutter build appbundle --target-platform android-arm64,android-x64\n</code></pre> <p>The only supported input types are APK's or Android App Bundles. It is possible to first build a Flutter module and later integrate it into your app, as long as DexGuard is applied to the resulting application.</p> <p>Additional setup is required on Windows build machines!</p> <p>Protection features applied by DexGuard to Flutter code require the protected application to be built on a Linux system. To overcome this limitation for Windows systems, the Windows Subsystem for Linux should be used. Consult the Using Windows page for further instructions.</p>"},{"location":"languages_platforms/flutter/start-android.html#configuring-dexguard","title":"Configuring DexGuard","text":"<p>To process Android Flutter applications with DexGuard, the process is nearly identical to any other Gradle built app. The Gradle project is usually located in the <code>./android</code> directory of the Flutter project root.</p> android/app/build.gradle<pre><code>apply plugin: 'com.android.application'\napply plugin: 'dexguard'\n\ndexguard {\n    path = '/path/to/DexGuard'\n    license = '/path/to/dexguard-license.txt'\n    configurations {\n        release {\n            defaultConfiguration 'dexguard-release.pro'\n            configuration 'dexguard-project.txt'\n        }\n    }\n}\n</code></pre> <p>By default, DexGuard obfuscates the Dart component of your Flutter application with a default configuration.</p> <p>Advanced configuration is possible by providing a configuration file yourself, using the <code>-flutterconfiguration</code> option. This configuration file is the same as the iXGuard config used to protect the iOS build of your Flutter application.</p> android/app/dexguard-project.txt<pre><code>-flutterconfiguration /path/to/config.yml\n</code></pre> <p>For more information on this advanced configuration for protecting your Flutter protection, refer to the configuration page.</p>"},{"location":"languages_platforms/flutter/troubleshooting.html","title":"Troubleshooting","text":""},{"location":"languages_platforms/flutter/troubleshooting.html#reporting","title":"Reporting","text":"<p>In order for our support team (support@guardsquare.com) to quickly assist you with any issues the following types of information are useful or required;</p> <ul> <li> <p>The configuration files.</p> </li> <li> <p>The device console log and device crash log in case of a run_time related     issue.</p> </li> <li> <p>All debug data that was generated</p> <ul> <li>For iOS, iXGuard generates a <code>x86_64/flutter</code> and <code>arm64/flutter</code>   directory containing debug files.</li> <li>For Android, DexGuard can be configured with the <code>-printflutterlogs   /path/to/folder</code> flag. The configured directory contains the needed debug file.   The DexGuard Gradle plugin sets this directory automatically to the mapping   debug folder.</li> </ul> </li> </ul>"},{"location":"languages_platforms/flutter/troubleshooting.html#known-issues","title":"Known issues","text":""},{"location":"languages_platforms/flutter/troubleshooting.html#dexguard","title":"DexGuard","text":"<ul> <li> <p>Obfuscation of the Dart code in Flutter applications is only supported when     using a macOS or Linux system.</p> <p>When using Windows, the Windows Subsystem for Linux can be used to invoke DexGuard. However, the Dart compiler does not function correctly when using WSL, this means that Gradle can not be invoked using WSL and DexGuard has to be used without the Gradle Plugin in standalone mode.</p> </li> </ul>"},{"location":"languages_platforms/javascript/index.html","title":"JavaScript Obfuscator","text":"<p>DexGuard has a built-in Javascript obfuscator which can obfuscate the Javascript resource files in your application to additionally raise the bar for attackers who try to reverse engineer and modify your application.</p> <p>Info</p> <p>DexGuard can obfuscate both the native code and the JavaScript code of your hybrid application. Support for both the Cordova and React Native framework comes out of the box; also code push updates are supported. </p> <p>The JavaScript obfuscator supports all language features of the ECMAScript 6 specification, also known as ECMAScript 2015.</p> <p>This manual will guide you in hardening your JavaScript code using a variety of obfuscation and encryption techniques.</p> <p>It is recommended to follow the Quick Start guide to set up the integration with  DexGuard and read the Best Practices section to create an initial configuration for your JavaScript code.</p> <p>Warning</p> <p>React Native users need to preserve the runtime-invisible annotations.</p> <p>More information</p> <ul> <li>Working sample projects: <code>samples/features/JavaScript</code>, <code>samples/advanced/Cordova</code>, <code>samples/advanced/ReactNative</code></li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html","title":"Release Notes","text":""},{"location":"languages_platforms/javascript/about/release-notes.html#version-1215","title":"Version 1.2.15","text":"<ul> <li>Fix potential exception occurring when processing unicode regular expressions.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1214","title":"Version 1.2.14","text":"<ul> <li>Fix parentheses not being added to CommaExpressions in ForOfStatements. (<code>T17956</code>)</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1213","title":"Version 1.2.13","text":"<ul> <li>Fix potential \"Invalid or unexpected token\" syntax error when using control flow obfuscation. (<code>T16845</code>)</li> <li>Ensure deterministic results when processing the same inputs. (<code>T16843</code>)</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1212","title":"Version 1.2.12","text":"<ul> <li>Fix potential <code>Duplicate __proto__ fields are not allowed in object literals</code> error when using control flow obfuscation. (<code>T16846</code>)</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1211","title":"Version 1.2.11","text":""},{"location":"languages_platforms/javascript/about/release-notes.html#improvement","title":"Improvement","text":"<ul> <li>Update the configuration parser and the manual to use inclusive language.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1210","title":"Version 1.2.10","text":"<ul> <li>Prevent references to non-existent <code>__DGD_</code> methods from being introduced during processing.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1209","title":"Version 1.2.09","text":"<ul> <li>Fixed parentheses not being preserved in for loops containing a binary <code>in</code>-operator during output writing.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1208","title":"Version 1.2.08","text":"<ul> <li>Fixed parentheses not always being preserved on await expressions during output writing.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1207","title":"Version 1.2.07","text":"<ul> <li>Fixed parentheses not being preserved on await subexpressions during output writing.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1206","title":"Version 1.2.06","text":"<ul> <li>Fixed incorrect parsing of non-javascript <code>&lt;script&gt;</code> blocks in html files</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1205","title":"Version 1.2.05","text":"<ul> <li>Fixed parsing failure of UTF-8 BOM encoded files.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1204","title":"Version 1.2.04","text":"<ul> <li>Using allowlists for configuring string encryption now properly obfuscates the matched strings.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1203","title":"Version 1.2.03","text":"<ul> <li>Output log files when JSGuard is invoked from iXGuard.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1202","title":"Version 1.2.02","text":"<ul> <li>Fixed incorrect parsing of some configurations in the iXGuard format.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1201","title":"Version 1.2.01","text":"<ul> <li>Fixed possible FileNotFoundException when many files are processed.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1200","title":"Version 1.2.00","text":"<ul> <li>Added support for ECMAScript 6.</li> <li>Added support for obfuscating resources and modules in ReactNative apps when used together with DexGuard.</li> <li>Added function encryption to hide the implementation of sensitive functions.</li> <li>Improved runtime performance of string decryption.</li> <li>Improved error handling when parsing configuration.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1102","title":"Version 1.1.02","text":"<ul> <li>Fixed escaping of encrypted strings. </li> <li>Fixed wrongly obfuscated variables when obfuscation was disabled.</li> <li>Fixed wrong parenthesization of template call expressions. </li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1101","title":"Version 1.1.01","text":"<ul> <li>Improved reporting of statistics for all processing steps.</li> <li>Improved performance of name obfuscation.</li> <li>Fixed NullPointerException in opaque predicate injection.</li> <li>Fixed NullPointerException in debugger obstruction.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1100","title":"Version 1.1.00","text":"<ul> <li>Improved shrinking.</li> <li>Added configuration debugging.</li> </ul>"},{"location":"languages_platforms/javascript/about/release-notes.html#version-1000","title":"Version 1.0.00","text":"<ul> <li>Initial release of the JavaScript obfuscator.</li> </ul>"},{"location":"languages_platforms/javascript/configuration/assumptions.html","title":"Assumptions","text":"<p>In the assumptions section, you can specify certain invariants that the JavaScript obfuscator may rely upon to better optimize, shrink and/or obfuscate JavaScript programs.</p>"},{"location":"languages_platforms/javascript/configuration/assumptions.html#false-variables","title":"False variables","text":"<p>You can use the <code>false-variables</code> section to specify variables which will always be false during execution.</p> <pre><code>processing:\n  assumptions:\n    false-variables:\n</code></pre> <p>This may be useful to remove debug code. For example, the following code:</p> <pre><code>if (DEBUG)\n{\n  console.log(\"Debug output.\");\n}\n</code></pre> <p>can be completely removed if the JavaScript obfuscator knows that the <code>DEBUG</code> variable is always <code>false</code> at runtime. If the <code>DEBUG</code> variable is listed via a allowlist in the <code>false-variables</code> section:</p> <pre><code>processing:\n  assumptions:\n    false-variables:\n      allowlist:\n        - DEBUG\n</code></pre> <p>and code shrinking is enabled, the JavaScript obfuscator will effectively remove this code.</p>"},{"location":"languages_platforms/javascript/configuration/assumptions.html#filters","title":"Filters","text":"<p>You can use allowlists or denylists to specify the names of variables that will always be false.</p> <p>If no filter is specified, nothing will be matched.</p>"},{"location":"languages_platforms/javascript/configuration/assumptions.html#functions-without-side-effects","title":"Functions without side effects","text":"<p>You can use the <code>no-side-effect-methods</code> section to specify functions that have no side effects, other than possibly returning a value.</p> <pre><code>processing:\n  assumptions:\n    no-side-effect-methods:\n</code></pre> <p>For example, the <code>Math.abs(x)</code> function has no other effect than returning the absolute value of <code>x</code>.</p> <p>If code shrinking is enabled, the JavaScript obfuscator can use this to remove unused code.</p> <p>You can use this, for example, to remove logging statements from you programs. By adding the following section to your configuration:</p> <pre><code>processing:\n  assumptions:\n    no-side-effect-methods:\n      allowlist:\n      - console.log\n</code></pre> <p>and enabling code shrinking, all <code>console.log()</code> calls will be removed from your programs.</p>"},{"location":"languages_platforms/javascript/configuration/assumptions.html#filters_1","title":"Filters","text":"<p>You can use allowlists or denylists to specify the names of functions that have no side effects.</p> <p>If the <code>no-side-effect-methods</code> section is empty, it won't match any function.</p>"},{"location":"languages_platforms/javascript/configuration/configuration.html","title":"Basic Configuration Options","text":"<p>Configuring the JavaScript obfuscator is done through a YAML file that is configured in your DexGuard configuration file using the <code>-javascriptconfiguration</code> option.</p> <p>Attention</p> <p>Be reminded that in the YAML format, indentation has meaning (similar to e.g. the Python language).</p>"},{"location":"languages_platforms/javascript/configuration/configuration.html#paths","title":"Paths","text":"<p>Attention</p> <p>As DexGuard automatically takes care of inputs and outputs, it is not allowed to specify the <code>paths</code> block when using the JavaScript obfuscator with DexGuard. This section is therefore not relevant for that use case.</p> <p>Within the <code>paths</code> block you can configure the input and output directories. It may contain one or more subblocks. Each subblock has an <code>inputs</code> and <code>outputs</code> entry, specifying one or more input directories and exactly one output directory.</p> <p>The paths listed under <code>inputs</code> can be followed by a file name filter specified between brackets. The JavaScript obfuscator will recursively scan all input directories for all files that match the given filter and, after processing, write them to their corresponding output directory.</p> <p>If no file filter is specified between brackets, all files inside the input directory (and all of its subdirectories) will be processed.</p> <pre><code>paths:\n  - inputs:\n      - myInputDir1a/(**.js)\n      - myInputDir1b/(**.html)\n    outputs:\n      - myOutputDir1\n  - inputs:\n      - myInputDir2\n    outputs:\n      - myOutputDir2\n</code></pre> <p>Alternatively, single JavaScript files can be processed individually by specifying the path to the input file under <code>inputs</code> and the path to the processed output file under <code>outputs</code>.</p> <pre><code>paths:\n  - inputs:\n      - myInputDir/myInputFile1.js\n    outputs:\n      - myOutputDir/myOutputFile1.js\n  - inputs:\n      - myInputDir/myInputFile2.js\n    outputs:\n      - myOutputDir/myOutputFile2.js\n</code></pre>"},{"location":"languages_platforms/javascript/configuration/configuration.html#output","title":"Output","text":"<p>In the <code>output</code> block, you can specify how the processed JavaScript files should be written.</p> <pre><code>output:\n</code></pre>"},{"location":"languages_platforms/javascript/configuration/configuration.html#prettify","title":"prettify","text":"<p>Use the <code>prettify</code> option to control whether the written JavaScript files should be formatted with proper indentation.</p> <p>Default: <code>false</code></p> <pre><code>output:\n  prettify: true\n</code></pre> <p>Tip</p> <p>You should only enable <code>prettify</code> when debugging, as it significantly increases program size and makes code more readable.</p>"},{"location":"languages_platforms/javascript/configuration/configuration.html#encoding","title":"encoding","text":"<p>Use the <code>encoding</code> option to specify in which encoding the JavaScript files will be written. The possible encodings are the ones specified by the <code>java.nio.charset.Charset</code> class.</p> <p>Default: <code>\"UTF-8\"</code></p> <pre><code>output:\n  encoding: \"UTF-16\"\n</code></pre>"},{"location":"languages_platforms/javascript/configuration/configuration.html#escape-strings","title":"escape-strings","text":"<p>This option escapes all non-ASCII characters in strings, writing them out in their hexadecimal representation instead. Use this when your deployment target does not handle non-ASCII characters correctly.</p> <p>Default: <code>false</code></p> <pre><code>output:\n  escape-strings: true\n</code></pre> <p>Original program:</p> <pre><code>  translations = {\n    \"Hello, world!\": \"\u4f60\u597d, \u4e16\u754c!\"\n  }\n</code></pre> <p>Processed program:</p> <pre><code>  translations = {\n    \"Hello, world!\": \"\\u4F60\\u597D, \\u4E16\\u754C!\"\n  }\n</code></pre>"},{"location":"languages_platforms/javascript/configuration/configuration.html#processing","title":"Processing","text":"<p>The <code>processing</code> block defines all transformations to be applied to the processed JavaScript programs.</p> <pre><code>processing:\n</code></pre> <p>The processing block and each of its sub-blocks can define a set of filters. The  filters documentation provides more details on how filters work.</p>"},{"location":"languages_platforms/javascript/configuration/configuration.html#assumptions","title":"Assumptions","text":"<p>The <code>assumptions</code> section defines a set of assumptions that the JavaScript obfuscator may rely upon to perform its shrinking and obfuscation. See the assumptions documentation for more details.</p> <pre><code>processing:\n  assumptions:\n</code></pre>"},{"location":"languages_platforms/javascript/configuration/configuration.html#shrinking","title":"Shrinking","text":"<p>Shrinking removes code that will never be executed (because it is not called from any other active code). See the shrinking documentation for more details.</p> <pre><code>processing:\n  shrinking:\n</code></pre>"},{"location":"languages_platforms/javascript/configuration/configuration.html#protection","title":"Protection","text":"<p>The <code>protection</code> block defines all obfuscation techniques and integrity protections to be applied to the processed JavaScript programs.</p> <pre><code>processing:\n  protection:\n</code></pre> <p>See the pages of the individual features for more details:</p> <ul> <li>String Encryption</li> <li>Function Encryption</li> <li>String Array Conversion</li> <li>Name Obfuscation</li> <li>Number Obfuscation</li> <li>Arithmetic Obfuscation</li> <li>Control Flow Obfuscation</li> <li>Property Access Obfuscation</li> <li>Property Declaration Obfuscation</li> <li>Shuffling</li> <li>Debugger Obstruction</li> </ul>"},{"location":"languages_platforms/javascript/configuration/configuration.html#processing-html-files","title":"Processing HTML files","text":"<p>By default, HTML files that are specified as <code>inputs</code> are left untouched. The JavaScript contained in these HTML files will still be used to automatically add global variables declared in the embedded JavaScript to a denylist.</p> <p>The JavaScript that is embedded in HTML files can also be processed by explicitly enabling <code>process-html</code>:</p> <pre><code>processing:\n  process-html: true\n</code></pre> <p>The JavaScript obfuscator will now apply all configured obfuscation techniques to the JavaScript inside the HTML files that are specified as <code>inputs</code>. </p>"},{"location":"languages_platforms/javascript/configuration/configuration.html#configuration-debugging","title":"Configuration Debugging","text":"<p>The <code>configuration-debugging</code> flag enables printing denylist suggestions to the console at runtime, both for shrinking and name obfuscation.</p> <pre><code>processing:\n  configuration-debugging: true\n</code></pre> <p>Example output:</p> <p>Shrunk property eventTitle has been accessed. Add this property to a denylist (under shrinking &gt; properties): - eventTitle</p> <p>Corresponding configuration: <pre><code>processing:\n  shrinking:\n    properties:\n      denylist:\n        - eventTitle\n</code></pre></p> <p>Attention</p> <p>This option will include debug information in your application. Never use it in release builds.</p>"},{"location":"languages_platforms/javascript/configuration/filters.html","title":"Filters","text":"<p>Filters allow you to specify which parts of your code should (not) be handled by a feature. There are two type of filters:</p> <ul> <li>When specifying an allowlist, all entities matching the filter are processed.</li> <li>When specifying a denylist, all entities not matching the filter are processed.</li> </ul> <p>Additionally, filters can be either structured or unstructured. The following sections explain the difference and how these filters are used and combined.</p>"},{"location":"languages_platforms/javascript/configuration/filters.html#basics","title":"Basics","text":""},{"location":"languages_platforms/javascript/configuration/filters.html#unstructured-filters","title":"Unstructured Filters","text":"<p>An unstructured filter is the simplest form of an allowlist or denylist. It is merely a list of strings specified in YAML format. The example below shows an  allowlist that matches the words <code>foo</code> and <code>bar</code>.</p> <pre><code>allowlist:\n  - 'foo'\n  - 'bar'\n</code></pre> <p>An entity matches a filter if it matches at least one entry in the filter.</p> <p>Filter Semantics</p> <p>The semantics of a filter (what the filter is matched against) depend on the feature specifics. For example, in case of string encryption, an unstructured filter is matched against the string values,  whereas in property access obfuscation, the filter is matched against the property names.</p> <p>For the exact semantics please refer to the documentation of the individual features.</p>"},{"location":"languages_platforms/javascript/configuration/filters.html#structured-filters","title":"Structured Filters","text":"<p>Structured filters are filters that impose a certain structure, matching the structure of JavaScript programs. Currently, only functions can be matched against these filters.</p> <p>The example below shows a filter matching all functions with name <code>myFunction</code>.</p> <pre><code>structured-allowlist:\n  functions:\n    - 'myFunction'\n</code></pre> <p>If a function matches a structured filter, all applicable entities contained within the function will be processed. For example, in case of string encryption, the above filter would encrypt all strings within functions with name 'myFunction'. For the exact semantics please refer to the documentation of the individual features.</p>"},{"location":"languages_platforms/javascript/configuration/filters.html#default-behavior","title":"Default behavior","text":"<p>If a feature is enabled but no filter is specified, all applicable entities will be processed. If a filter is specified but empty, the filter will be applied as if nothing matches.</p> <p>In the following example, all strings in the processed program will be encrypted:</p> <pre><code>processing:\n  protection:\n    data:\n      strings:\n        encrypt:\n</code></pre> <p>With an empty allowlist, none of the strings will be encrypted:</p> <pre><code>processing:\n  protection:\n    data:\n      strings:\n        encrypt:\n          allowlist:\n</code></pre> <p>On the other hand, with an empty denylist, all strings will be encrypted:</p> <pre><code>processing:\n  protection:\n    data:\n      strings:\n        encrypt:\n          denylist:\n</code></pre>"},{"location":"languages_platforms/javascript/configuration/filters.html#regular-expressions","title":"Regular Expressions","text":"<p>Both structured and unstructured filters support regular expressions. They are convenient to concisely mark a range of entities. The syntax should follow the  regular expression grammar of DexGuard.</p>"},{"location":"languages_platforms/javascript/configuration/filters.html#filters-with-configuration-levels","title":"Filters With Configuration Levels","text":"<p>Some features have configuration levels rather than individual options you can turn on or off. The possible configuration levels are listed below.</p> <ul> <li><code>min</code></li> <li><code>low</code></li> <li><code>medium</code></li> <li><code>high</code></li> <li><code>max</code></li> </ul> <p>A structured and/or unstructured allowlist can be provided for each configuration level.</p> <p>In the following example, all functions starting with <code>foo</code> are processed with medium configuration level, all function ending with <code>bar</code> with high configuration level:</p> <pre><code>levels:\n  - level: medium\n    structured-allowlist:\n       functions:\n         - 'foo*'\n  - level: high\n    structured-allowlist:\n       functions:\n         - '*bar'\n</code></pre> <p>Attention</p> <p>If a conflict occurs across configuration levels, the configuration with the highest level applies. In the example above, the instance method named 'foobar' will be processed with the high configuration.</p>"},{"location":"languages_platforms/javascript/configuration/filters.html#combining-filters","title":"Combining filters","text":""},{"location":"languages_platforms/javascript/configuration/filters.html#combining-allowlists-and-denylists","title":"Combining allowlists and denylists","text":"<p>If both an allowlist and a denylist are present, an entity is processed only if it matches the allowlist and doesn't match the denylist.</p> <p>In the following string encryption filter example:</p> <pre><code>allowlist:\n  - 'foo*'\ndenylist:\n  - '*bar'\n</code></pre> <ul> <li><code>'Hello, world'</code> won't be encrypted.</li> <li><code>'foofoo'</code> will be encrypted.</li> <li><code>'barbar'</code> won't be encrypted.</li> <li><code>'foobar'</code> won't be encrypted.</li> </ul>"},{"location":"languages_platforms/javascript/configuration/filters.html#combining-structured-and-unstructured-filters","title":"Combining structured and unstructured filters","text":"<p>If both a structured and unstructured allowlist are present, an entity is processed if it matches either the structured or the unstructured allowlist. Similarly, an entity matches a denylist if it matches either the structured or the unstructured denylist.</p> <p>If you combine allowlists and denylists, an entity is processed only if:</p> <ul> <li>it matches either the structured or the unstructured allowlist, and</li> <li>it matches neither the structured nor the unstructured denylist.</li> </ul> <p>In the following string encryption filter example:</p> <pre><code>allowlist:\n  - 'foo*'\nstructured-allowlist:\n  functions:\n    - 'hello*'\nstructured-denylist:\n  functions:\n    - 'helloWorld'\n</code></pre> <p>All strings starting with <code>foo</code> are encrypted, as well as all strings in functions that start with <code>hello</code>, except for all strings (even strings starting with <code>foo</code>) in functions with name 'helloWorld'.</p>"},{"location":"languages_platforms/javascript/configuration/filters.html#combining-filters-at-different-levels","title":"Combining filters at different levels","text":"<p>You can specify filters at different levels, for example, on both the <code>protection</code> block and <code>control-flow</code> subblock. An entity is processed by a feature only if it matches the filter of the feature itself and the filters  of all parent blocks.</p> <p>Filters on parent blocks may be interpreted differently for each of the features they contain. For example, an allowlist  on the <code>protection</code> block will be matched against string values during string encryption, whereas the same  allowlist will be matched against property names during property access obfuscation.</p> <p>You will typically use filters on parent blocks to exclude parts of your program from any shrinking or obfuscation. In the following example, we want to exclude the function <code>foobar</code> from any protection:</p> <p><pre><code>processing:\n  protection:\n    structured-denylist:\n      - functions:\n        - 'foobar'\n    code:\n      names:\n        allowlist:\n          - 'foo*'\n      control-flow:\n        structured-allowlist:\n          functions:\n            - '*bar'\n</code></pre> All names starting with <code>foo</code> will be name obfuscated, except functions named <code>foobar</code>. Control flow obfuscation is applied within all functions that end with <code>bar</code>, except for functions named <code>foobar</code>. Also note that, because the <code>processing</code> and <code>code</code> block have no filter specified, they behave as if they have a filter that would match everything.</p> <p>Complexity of filters</p> <p>If many filters are being combined, especially when mixing the different filter types (allowlists/denylist, structured/unstructured, feature/parent level), the interpretation of the filters can become complex. Therefore, as a general rule, try to keep your filter rules as simple as possible.</p>"},{"location":"languages_platforms/javascript/features/arithmeticobfuscation.html","title":"Arithmetic Obfuscation","text":"<p>Arithmetic obfuscation transforms arithmetic expressions into semantically equivalent but more complex expressions. The goal of this operation is to make it harder for hackers to read and interpret these expressions.</p>"},{"location":"languages_platforms/javascript/features/arithmeticobfuscation.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>  var x = 12 + 34;\n</code></pre> <p>Processed program:</p> <pre><code>  var a02 = ((12 ^ 34) + 2 * (12 &amp; 34));\n</code></pre>"},{"location":"languages_platforms/javascript/features/arithmeticobfuscation.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Arithmetic obfuscation makes it slightly more difficult for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may reverse arithmetic obfuscation using dynamic program analysis. Code size low/medium Arithmetic obfuscation may somewhat expand the program size, depending on the chosen obfuscation level. Performance low Arithmetic obfuscation adds a small computational overhead due to the expanded expressions. It may be necessary to exclude performance-critical functions using filters."},{"location":"languages_platforms/javascript/features/arithmeticobfuscation.html#configuration","title":"Configuration","text":"<p>Arithmetic obfuscation is part of the code subsection of the protection section.</p> <p>The following configuration enables arithmetic obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions:</p> <pre><code>processing:\n  protection:\n    code:\n      arithmetic-operations:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/arithmeticobfuscation.html#settingenabled","title":"Setting:enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, arithmetic obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>arithmetic-operations:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/arithmeticobfuscation.html#filters","title":"Filters","text":"<p>Use filters with configuration levels to specify in which functions to add arithmetic obfuscation.</p> <p>Arithmetic obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code.</p> Filter Effect structured-allowlist, structured-denylist Apply arithmetic obfuscation to all matching functions. <p>Default: when arithmetic obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions.</p> <pre><code>arithmetic-operations:\n  levels:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/arithmeticobfuscation.html#verification","title":"Verification","text":"<p>Look in the obfuscated code for arithmetic expressions; some of them should have been replaced with semantically equivalent but more complex expressions.</p>"},{"location":"languages_platforms/javascript/features/controlflowobfuscation.html","title":"Control Flow Obfuscation","text":"<p>Control flow obfuscation adds complexity to the application logic flow without changing the semantics. The resulting code will no longer confirm to the patterns found in the original application, making it harder to understand the purpose of the code.</p>"},{"location":"languages_platforms/javascript/features/controlflowobfuscation.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>  x = y + z + 2;\n</code></pre> <p>Processed program:</p> <pre><code>  var a = 1;\n  if(!a &amp;&amp; undefined) {\n    x = y + z + 4;\n  }\n  else {\n    x = a ? (y + z + 2) : (y * z - 2);\n  }\n</code></pre>"},{"location":"languages_platforms/javascript/features/controlflowobfuscation.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Control flow obfuscation raises the bar for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience medium The control flow obfuscation techniques that are used may still be reverted by careful analysis of the program logic. Code size medium/high Control flow obfuscation injects redundant dead code blocks into the code. When applied on large parts of the program and with a high obfuscation level, the code will grow significantly. Performance medium Control flow obfuscation adds computational overhead due to opaque predicates that are injected in the code. It may be necessary to exclude performance-critical functions using filters."},{"location":"languages_platforms/javascript/features/controlflowobfuscation.html#configuration","title":"Configuration","text":"<p>Control flow obfuscation is part of the code subsection of the protection section.</p> <p>The following configuration enables control flow obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions:</p> <pre><code>processing:\n  protection:\n    code:\n      control-flow:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/controlflowobfuscation.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, control flow obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>control-flow:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/controlflowobfuscation.html#filters","title":"Filters","text":"<p>Use filters with configuration levels to specify in which functions to add control flow obfuscation.</p> <p>Control flow obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code.</p> Filter Effect structured-allowlist, structured-denylist Apply control flow obfuscation to all matching functions. <p>Default: when control flow obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions.</p> <pre><code>control-flow:\n  levels:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/controlflowobfuscation.html#verification","title":"Verification","text":"<p>Look in the obfuscated code for slightly modified (corrupted) copies of the original code.</p>"},{"location":"languages_platforms/javascript/features/debuggerobstruction.html","title":"Debugger Obstruction","text":"<p>Debugger obstruction makes it harder to execute program code when a debugger is active. It does so by randomly injecting debugger statements in the program code. The program execution will pause at each of the injected statements when the debugger is active, making it harder for hackers to use the debugger.</p>"},{"location":"languages_platforms/javascript/features/debuggerobstruction.html#example","title":"Example","text":"<p>Protected programs will contain</p> <pre><code>  debugger;\n</code></pre> <p>statements at random places in the program.</p>"},{"location":"languages_platforms/javascript/features/debuggerobstruction.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low / medium (with encryption) Debugger obstruction doesn't prevent a hacker from analyzing the code, but increases the time/effort to debug. Resilience low If the code is easily editable, a hacker may remove the debugger statements with a simple search-replace command. Code encryption adds an extra layer of protection to prevent such search-replaces. Code size small / medium (with encryption) Debugger obstruction injects new statements in the code. When applied on large parts of the code with a high obfuscation level and encryption enabled, the code expansion may be significant. Performance none / medium (with encryption) If the debugger is disabled, debugger statements have no impact on runtime performance. However with code encryption applied, the encrypted code has to be decrypted each time the code is executed, even when the debugger is disabled."},{"location":"languages_platforms/javascript/features/debuggerobstruction.html#configuration","title":"Configuration","text":"<p>Debugger obstruction is part of the debugger subsection of the protection/environment-integrity section.</p> <p>The following configuration enables debugger obstruction and, without additional settings or filters, applies the medium obfuscation level to all functions:</p> <pre><code>processing:\n  protection:\n    environment-integrity:\n      debugger:\n        obstruction:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/debuggerobstruction.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, debugger obstruction is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>obstruction:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/debuggerobstruction.html#filters","title":"Filters","text":"<p>Use filters with configuration levels to specify in which functions to add debugger obstruction.</p> <p>Debugger obstruction applies the same techniques for all configuration levels, but in varying amounts. Lower levels will inject less obstruction code, higher levels will inject more code.</p> Filter Effect structured-allowlist, structured-denylist Injected debugger obstruction code in all matching functions. <p>Default: apply the medium configuration level to all functions.</p> <pre><code>obstruction:\n  levels:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/debuggerobstruction.html#setting-encrypt","title":"Setting: encrypt","text":"<p>When set to true, the debugger statements will additionally be encrypted.</p> <p>Warning</p> <p>While debugger statements have no impact on performance when the debugger is disabled, additionally encrypting does add an overhead, independent of whether the debugger is active. You may want to add performance-critical functions to a denylist when encryption is enabled.</p> <p>Default: <code>false</code></p> <pre><code>obstruction:\n  encrypt: true\n</code></pre> <p>The encrypt property can be further refined with unstructured or structured filters, to control which obstruction statements should additionally be encrypted:</p> <pre><code>obstruction:\n  encrypt:\n    [allowlist/denylist/structured-allowlist/structured-denylist]:\n</code></pre>"},{"location":"languages_platforms/javascript/features/debuggerobstruction.html#verification","title":"Verification","text":"<p>Look in the obfuscated code for</p> <pre><code>debugger;\n</code></pre> <p>statements.</p> <p>When <code>encrypt</code> is enabled, the <code>debugger</code> statements should no longer be recognizable as such.</p>"},{"location":"languages_platforms/javascript/features/functionencryption.html","title":"Function Encryption","text":"<p>Function encryption hides the implementation of functions inside of an encrypted string. This string is then evaluated  at runtime to recover the original semantics. This technique is well-suited for hiding the implementation of sensitive functions from plain sight.</p>"},{"location":"languages_platforms/javascript/features/functionencryption.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>function example() {\n   console.log(\"this is a sensitive function\")\n}\n\nvar x = example()\n</code></pre> <p>Processed program:</p> <pre><code>var example = eval(a(\"\u443f\uf07c\uf1bd\u4940\u61b9\ub5a6\ue769\u0475\u3833\u2bb6\ud4f7\uaba1\u9c3f\u8ff9\u6f8d\ufb2d\u1add\u2392\u809f\u054e\ue142\ua8c6\uf967\u6f5e\ue769\u0475\ua12a\u59fb\u8d9d\u68c6\u0d32\ud7ba\u954e\uce0f\uc8c2\ued2c\u316c\u64bc\u8abc\u121d\u1b35\u54da\ub967\u61c5\ucedd\ucd07\ube28\u30d7\uf68d\u57e0\ubb09\u6307\u1ba3\u04db\u5851\ud1a3\u443f\uf07c\uf1bd\u4940\u61b9\ub5a6\ue769\u0475\uccaf\u9ca8\u0e71\u2d21\ua928\u75f9\u582d\u149d\uc8e3\ue678\u6cdb\\udc1d\u8aca\u506a\u8d5f\uf19f\u993b\u7d8b\u66c1\ufd83\ubecd\u18d4\u1711\u6d62\ub04e\uad66\u89fd\u6fff\ued16\u344f\u860f\ubf42\u0d47\u5532\u8366\ua1d6\ub5da\ue3f4\u9123\ua76c\u6ffa\ua9ed\u5d96\u8f66\u809f\u054e\u8f1e\u70bc\u25b9\ud27f\u82e2\ub325\u52b2\ue016\u1ebb\u9380\u68c5\u32f2\u8349\u23fb\u8d9d\u68c6\ua5f3\u2970\u62a4\u152d\u1802\u0ad3\ud4f7\uaba1\u9c3f\u8ff9\u6f8d\ufb2d\u6a1d\u4139\u0568\ub991\"));\nfunction a(f) {\n  // decryption code (omitted).\n}\nvar x = example();\n</code></pre>"},{"location":"languages_platforms/javascript/features/functionencryption.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Function encryption raises the bar for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may revert the encryption using dynamic program analysis. Code size medium Just like regular string encryption this technique can significantly increase the code size Performance medium A function needs to be decrypted every time it is defined. This means the cost is relatively low for top-level functions, but may be high for functions defined within other functions. It may be necessary to exclude performance-critical functions using filters."},{"location":"languages_platforms/javascript/features/functionencryption.html#configuration","title":"Configuration","text":"<p>Function encryption is part of the code subsection of the protection section.</p> <p>The following configuration enables function encryption and, without additional settings or filters, applies the medium obfuscation level to all functions:</p> <pre><code>processing:\n  protection:\n    code:\n      encrypt:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/functionencryption.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, function encryption is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>encrypt:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/functionencryption.html#filters","title":"Filters","text":"<p>Use filters with configuration levels to specify in which functions to add function encryption.</p> <p>Function encryption applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code.</p> Filter Effect structured-allowlist, structured-denylist Apply function encryption to all matching functions. <p>Default: when function encryption is enabled but no filters are specified, the medium configuration level is applied to all functions.</p> <pre><code>encrypt:\n  levels:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/functionencryption.html#verification","title":"Verification","text":"<p>The function bodies of the encrypted functions should no longer be present in the program.</p>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html","title":"Name Obfuscation","text":"<p>Name obfuscation renames identifiers of variables, functions and properties to randomized, meaningless names. Not having the original names available in the code anymore makes the code significantly harder to understand.</p> <p>The default setting applies a safe obfuscation method that just works without having to specify any additional settings. More aggressive obfuscation methods can be enabled, with the option of excluding identifiers from name obfuscation through (structured) denylists.</p>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>  function surfaceArea(cuboid) {\n    return (cuboid.width * cuboid.height +\n            cuboid.width * cuboid.depth +\n            cuboid.depth * cuboid.height) * 2;\n  }\n\n  var box = {\n    width: 20,\n    height: 5,\n    depth: 8\n  };\n\n  var box_surface_area = surfaceArea(box);\n</code></pre> <p>Processed program:</p> <pre><code>  function a(d) {\n    return (d.a * d.b + d.a * d.c + d.c * d.b) * 2;\n  }\n\n  var b = {\n    a: 20,\n    b: 5,\n    c: 8\n  };\n\n  var c = a(b);\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort low - high You can enable/disable this feature with a simple configuration flag. If global name obfuscation or property name obfuscation is enabled, you may need to filter some globals/properties to not break the code. Protection high Name obfuscation is one of the most effective obfuscation techniques. It removes the original names of variables, functions and properties, making it much harder for hackers to understand what the code does. Resilience high It is impossible to reverse engineer name obfuscation, as the original names are no longer present in the code. Code size low Name obfuscation will typically slightly shrink the program, as obfuscated names tend to be shorter than their original names. The alphanumeric dictionary will generate smaller programs than the hexadecimal dictionary. Performance none Name obfuscation doesn't affect code performance."},{"location":"languages_platforms/javascript/features/nameobfuscation.html#configuration","title":"Configuration","text":"<p>Name obfuscation is part of the code subsection of the protection section.</p> <p>The following configuration enables name obfuscation and, without additional settings or filters, applies the name obfuscation to all variables and functions that are declared locally (i.e. inside a function):</p> <pre><code>protection:\n  code:\n    names:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, name obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>names:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#setting-globals","title":"Setting: globals","text":"<p>When the <code>globals</code> setting is specified, name obfuscation of variables and functions that are declared globally (i.e. at the top level of the script and not inside a function) will be enabled.</p> <pre><code>names:\n  globals:\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#setting-properties","title":"Setting: properties","text":"<p>When the <code>properties</code> setting is specified, name obfuscation of properties of JavaScript objects will be enabled.</p> <pre><code>names:\n  properties:\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#setting-modules","title":"Setting: modules","text":"<p>When the <code>modules</code> setting is specified, name obfuscation of exported and imported names  will be enabled.</p> <pre><code>names:\n  modules:\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#setting-dictionary","title":"Setting: dictionary","text":"<p>When the <code>dictionary</code> setting is specified, the obfuscated names will be chosen from the specified dictionary file.</p> <pre><code>names:\n  dictionary: &lt;filename&gt;\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#setting-dictionary-generator","title":"Setting: dictionary-generator","text":"<p>When the <code>dictionary-generator</code> setting is specified, the obfuscated names will be generated using the specified  built-in name generator. There are two generators available, an alphanumeric and a hexadecimal.</p> <pre><code>names:\n  dictionary-generator: ALPHANUMERIC|HEXADECIMAL\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#setting-mapping","title":"Setting: mapping","text":"<p>When the <code>mapping</code> setting is specified, the mapping from the original names to the obfuscated names of variables, functions and properties will be logged to the specified file.</p> <pre><code>names:\n  mapping: &lt;filename&gt;\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#filters","title":"Filters","text":"<p>Use <code>denylist-strings</code> to exclude all identifiers that occur as strings in the code from being name obfuscated. This is a quick and easy way to keep the identifiers of variables, functions and properties that might be accessed through reflection.</p> <p>Default: when name obfuscation is enabled, <code>denylist-strings</code> is enabled by default. It can be disabled if desired. <pre><code>names:\n  denylist-strings: false\n</code></pre></p> <p>Use unstructured or structured filters (or a combination of both) to further specify which identifiers should be name obfuscated.</p> Filter Effect allowlist, denylist Name obfuscate all identifiers that match the given filter. structured-allowlist, structured-denylist Name obfuscate all identifiers occurring in functions matching the given filter. <p>Default: when name obfuscation is enabled but no filters are specified, all identifiers are obfuscated, except those that are already excluded by <code>denylist-strings</code>.</p> <pre><code>names:\n  [allowlist/denylist/structured-allowlist/structured-denylist]:\n    ...\n</code></pre> <p>Unstructured filters for globals and properties can be specified in addition to the general name obfuscation filters by putting them at the appropriate level in the configuration:</p> <pre><code>names:\n  ...\n  globals:\n    [allowlist/denylist]:\n  properties:\n    [allowlist/denylist]:\n  ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/nameobfuscation.html#verification","title":"Verification","text":"<p>Look in the obfuscated code for variable names, function names and property names; they should have been replaced with short, meaningless names.</p>"},{"location":"languages_platforms/javascript/features/numberobfuscation.html","title":"Number Obfuscation","text":"<p>Number obfuscation transforms numeric literals into semantically equivalent but more complex expressions. The goal of this operation is to make it harder for hackers to read and interpret these numbers/expressions.</p>"},{"location":"languages_platforms/javascript/features/numberobfuscation.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>  var x = 12 + 34;\n</code></pre> <p>Processed program:</p> <pre><code>  var x = (1642227 &gt;&gt; 17) + (53 ^ 23)\n</code></pre>"},{"location":"languages_platforms/javascript/features/numberobfuscation.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Number obfuscation makes it slightly more difficult for hackers to read code, but doesn't prevent them from understanding the code. Resilience low Hackers may reverse number obfuscation by static evalutation of the code. Code size low/medium Number obfuscation may somewhat expand the program size, depending on the chosen obfuscation level. Performance low Number obfuscation adds a small computational overhead due to the expanded expressions. It may be necessary to exclude performance-critical functions using filters."},{"location":"languages_platforms/javascript/features/numberobfuscation.html#configuration","title":"Configuration","text":"<p>Number obfuscation is part of the code subsection of the protection section.</p> <p>The following configuration enables number obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions:</p> <pre><code>processing:\n  protection:\n    code:\n      numbers:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/numberobfuscation.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, number obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>numbers:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/numberobfuscation.html#filters","title":"Filters","text":"<p>Use filters with configuration levels to specify in which functions to add number obfuscation.</p> <p>Number obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code.</p> Filter Effect structured-allowlist, structured-denylist Apply number obfuscation to all matching functions. <p>Default: when number obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions.</p> <pre><code>numbers:\n  levels:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/numberobfuscation.html#verification","title":"Verification","text":"<p>Look in the obfuscated code for numbers; some of them should have been replaced with semantically equivalent but more complex expressions.</p>"},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html","title":"Property Access Obfuscation","text":"<p>Property access obfuscation transforms property accessors from dot notation to square bracket notation. The obfuscation in its simplest form makes the code slightly harder to read and more resilient against automatic refactoring (renaming) tools. It becomes especially powerful when combined with string encryption, which will completely hide the original accessor names.</p>"},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>var car = {\n  driver: \"John\",\n};\n\nalert(car.driver);\n</code></pre> <p>Processed program:</p> <pre><code>var car = {\n  driver: \"John\",\n};\n\nalert(car[\"driver\"]);\n</code></pre> <p>Processed program (with encryption enabled) :</p> <pre><code>var car = {\n  driver: \"John\",\n};\n\nalert(car[a(\"qs1&amp;@52d\", 2318)]);\n</code></pre>"},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It may require some filtering if performance-critical functions are affected by the obfuscation. Protection low/high (with encryption) Property access obfuscation is especially efficient when combined with encryption, as the referenced property names are no longer readable. Resilience low Hackers may reverse the obfuscation using dynamic program analysis. Code size low/medium (with encryption) Program access obfuscation without string encryption has a small impact on the program size. With string encryption enabled, the code expansion may be significant. Performance low/medium (with encryption) Property access obfuscation adds a small runtime overhead. When combined with encryption, the encrypted data have to be decrypted each time the code is executed. It may be necessary to exclude performance-critical functions using filters."},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html#configuration","title":"Configuration","text":"<p>Property access obfuscation is part of the code subsection of the protection section.</p> <p>The following configuration enables property access obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions:</p> <pre><code>processing:\n  protection:\n    code:\n      property-access:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, property access obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>property-access:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html#setting-encrypt","title":"Setting: encrypt","text":"<p>The <code>encrypt</code> setting specifies whether the injected strings, resulting from the dot-to-bracket notation,  should additionally be encrypted.</p> <p>When unspecified, encryption is disabled. By specifying the encrypt property, all obfuscated property accesses will additionally be encrypted:</p> <pre><code>property-access:\n  encrypt:\n</code></pre> <p>The <code>encrypt</code> property can be further refined with unstructured or structured filters, to control which property accesses should additionally be encrypted:</p> <pre><code>property-access:\n  encrypt:\n    [allowlist/denylist/structured-allowlist/structured-denylist]:\n</code></pre>"},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html#setting-log","title":"Setting: log","text":"<p>You can add a <code>log</code> setting to log, at build time, all replaced property accesses to the specified file. <pre><code>property-access:\n  log: &lt;filename&gt;\n</code></pre></p>"},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html#filters","title":"Filters","text":"<p>Use unstructured or structured filters (or a combination of both) to specify which property accesses should be encrypted.</p> Filter Effect allowlist, denylist Obfuscate all property accesses whose name (including base) matches the given filter. structured-allowlist, structured-denylist Obfuscate all property accesses in functions matching the given filter. <p>Default: when property access obfuscation is enabled but no filters are specified, all accesses are obfuscated.</p> <pre><code>property-access:\n  [allowlist/denylist/structured-allowlist/structured-denylist]:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/propertyaccessobfuscation.html#verification","title":"Verification","text":"<p>Look in the obfuscated code for property accessors:</p> <pre><code>a.b()\n</code></pre> <p>They should have been replaced with element accessors:</p> <pre><code>a[\"b\"]()\n</code></pre>"},{"location":"languages_platforms/javascript/features/propertydeclarationobfuscation.html","title":"Property Declaration Obfuscation","text":"<p>Property declaration obfuscation replaces the names in property declarations with their hexadecimal equivalent.</p>"},{"location":"languages_platforms/javascript/features/propertydeclarationobfuscation.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>var car = {\n  driver: \"John\",\n};\n</code></pre> <p>Processed program:</p> <pre><code>var car = {\n  ''\\x64\\x72\\x69\\x76\\x65\\x72': \"John\",\n};\n</code></pre>"},{"location":"languages_platforms/javascript/features/propertydeclarationobfuscation.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. Protection medium Property declaration obfuscation makes the property names in the code difficult to read. Resilience low Hackers may reverse the obfuscation by static analyis of the code. Code size medium Program declaration obfuscation expands the size of property names by a factor 3-4. Performance low Property declaration obfuscation doesn't affect performance significantly."},{"location":"languages_platforms/javascript/features/propertydeclarationobfuscation.html#configuration","title":"Configuration","text":"<p>Property declaration obfuscation is part of the code subsection of the protection section.</p> <p>The following configuration enables property declaration obfuscation and, without additional settings or filters, applies the obfuscation to all declared properties:</p> <pre><code>processing:\n  protection:\n    code:\n      property-declarations:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/propertydeclarationobfuscation.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, property declaration obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>property-declarations:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/propertydeclarationobfuscation.html#setting-log","title":"Setting: log","text":"<p>You can add a <code>log</code> setting to log, at build time, all replaced property declarations to the specified file. <pre><code>property-declarations:\n  log: &lt;filename&gt;\n</code></pre></p>"},{"location":"languages_platforms/javascript/features/propertydeclarationobfuscation.html#filters","title":"Filters","text":"<p>Use unstructured or structured filters (or a combination of both) to specify which property declarations should be encrypted.</p> Filter Effect allowlist, denylist Obfuscate all property declarations whose name (including base) matches the given filter. structured-allowlist, structured-denylist Obfuscate all property declarations in functions matching the given filter. <p>Default: when property declaration obfuscation is enabled but no filters are specified, all accesses are obfuscated.</p> <pre><code>property-declarations:\n  [allowlist/denylist/structured-allowlist/structured-denylist]:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/propertydeclarationobfuscation.html#verification","title":"Verification","text":"<p>Look in the obfuscated code for property declarations; they should have been replaced with their hexadecimal equivalent.</p>"},{"location":"languages_platforms/javascript/features/shrinking.html","title":"Shrinking","text":"<p>The JavaScript obfuscator can shrink code that is not being referenced from other active code, reducing the overall program size.</p> <p>In combination with <code>assumptions</code>, you can use shrinking to remove console logging statements and code that is only executed when debugging variables are set.</p>"},{"location":"languages_platforms/javascript/features/shrinking.html#configuration","title":"Configuration","text":"<p>Shrinking is part of the processing section.</p> <pre><code>processing:\n  shrinking:\n</code></pre> <p>Tip</p> <p>When <code>shrinking</code> is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/shrinking.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, shrinking is enabled, otherwise it is disabled. The flag can be used to easily disable all shrinking functionality temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>shrinking:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/shrinking.html#setting-globals","title":"Setting: globals","text":"<p>The <code>globals</code> setting specifies whether to shrink global declarations (except for properties). When <code>globals</code> is not listed in the configuration, shrinking of globals is disabled.</p> <pre><code>   shrinking:\n     globals:\n</code></pre> <p>The <code>globals</code> setting can be further refined with unstructured filters, to control which  declarations can be shrunk.</p> <pre><code>shrinking:\n  globals:\n    [allowlist/denylist]:\n</code></pre> <p>You can add a <code>log</code> setting to log all shrunk declarations to the specified file. <pre><code>shrinking:\n  globals:\n    log: &lt;filename&gt;\n</code></pre></p>"},{"location":"languages_platforms/javascript/features/shrinking.html#setting-properties","title":"Setting: properties","text":"<p>The <code>properties</code> setting specifies whether to shrink properties. When <code>properties</code> is not listed in the configuration, property shrinking is disabled.</p> <p><pre><code>shrinking:\n  properties:\n</code></pre> The <code>properties</code> setting can be further refined with unstructured filters, to control which properties can be shrunk.</p> <pre><code>shrinking:\n  properties:\n    [allowlist/denylist]:\n</code></pre> <p>You can add a <code>log</code> setting to log all shrunk properties to the specified file. <pre><code>shrinking:\n  properties:\n    log: &lt;filename&gt;\n</code></pre></p>"},{"location":"languages_platforms/javascript/features/shrinking.html#setting-code","title":"Setting: code","text":"<p>The <code>code</code> setting specifies whether to shrink code inside functions (statements, expressions, ...). When <code>code</code> is not listed in the configuration, code shrinking is disabled.</p> <p>When functions are listed in the <code>assumptions</code> section as having no side effects, code shrinking will automatically remove calls to them. This can especially be useful to remove console logging statements.</p> <p>When variables are listed in the <code>assumptions</code> section as being false, code shrinking will automatically replace all their occurrences with a <code>false</code> literal value, and remove all statements and expressions that would no longer be reachable as a consequence. You can use this to remove debugging variables and debugging code.</p> <p><pre><code>shrinking:\n  code:\n</code></pre> The <code>code</code> setting can be further refined with structured filters, to control in which functions code can be shrunk.</p> <pre><code>shrinking:\n  code:\n    [structured-allowlist/structured-denylist]:\n</code></pre>"},{"location":"languages_platforms/javascript/features/shuffling.html","title":"Shuffling","text":"<p>Shuffling changes the order of function declarations in programs. Although not really an obfuscation technique, it can make it slightly harder to see the coherence and dependencies between different parts of the program.</p>"},{"location":"languages_platforms/javascript/features/shuffling.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>  function open()  {}\n  function write() {}\n  function flush() {}\n  function close() {}\n</code></pre> <p>Processed program:</p> <pre><code>  function close() {}\n  function open()  {}\n  function flush() {}\n  function write() {}\n</code></pre>"},{"location":"languages_platforms/javascript/features/shuffling.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Shuffling function declarations can make it slightly harder to see the coherence and dependencies between different parts of the program. Resilience high Shuffling cannot be reverted. Code size none Shuffling does not affect the code size. Performance none Shuffling does not affect performance."},{"location":"languages_platforms/javascript/features/shuffling.html#configuration","title":"Configuration","text":"<p>Shuffling is part of the code subsection of the protection section.</p> <p>The following configuration enables shuffling:</p> <pre><code>processing:\n  protection:\n    code:\n      shuffle:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/shuffling.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, shuffling is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>shuffle:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/shuffling.html#verification","title":"Verification","text":"<p>The order of declared functions in the obfuscated code has changed.</p>"},{"location":"languages_platforms/javascript/features/stringarray.html","title":"String Array Conversion","text":"<p>String array conversion moves strings into arrays, and replaces the original strings with calls to functions that can retrieve the original string from the injected arrays. The conversion makes it harder for hackers to read and understand programs. Duplicate strings are automatically detected and won't be duplicated in the array.</p>"},{"location":"languages_platforms/javascript/features/stringarray.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>  var x = \"Foo\";\n  var y = \"Bar\";\n</code></pre> <p>Processed program:</p> <pre><code>  var a = [\"Foo\",\"Bar\"];\n\n  var x = b(11);\n  var y = b(24);\n</code></pre>"},{"location":"languages_platforms/javascript/features/stringarray.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection medium Replacing strings with an obfuscated lookup in a string array makes it harder for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers my revert the obfuscation using dynamic program analysis. Code size low String array conversion may slightly increase the code size. Performance low String array conversion may add a small overhead due to the additional indirection. It may be necessary to exclude performance-critical functions using filters."},{"location":"languages_platforms/javascript/features/stringarray.html#configuration","title":"Configuration","text":"<p>String array conversion is part of the <code>strings</code> subsection of the <code>protection/data</code> section.</p> <p>The following configuration enables string-to-array conversion and, without additional settings or filters, converts all strings in the code:</p> <pre><code>protection:\n  data:\n    strings:\n      arrayize:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/stringarray.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, debugger obstruction is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>arrayize:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/stringarray.html#setting-log","title":"Setting: log","text":"<p>You can add a <code>log</code> setting to log, at build time, all replaced strings to the specified file. <pre><code>arrayize:\n  log: &lt;filename&gt;\n</code></pre></p>"},{"location":"languages_platforms/javascript/features/stringarray.html#filters","title":"Filters","text":"<p>Use unstructured or structured filters to specify which strings should be converted to arrays, or a combination of both.</p> Filter Effect allowlist, denylist Convert all strings whose string value matches the given filter. structured-allowlist, structured-denylist Convert all strings in functions matching the given filter. <p>Default: when string array obfuscation is enabled but no filters are specified, all strings are obfuscated.</p> <pre><code>arrayize:\n  [allowlist/denylist/structured-allowlist/structured-denylist]:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/stringarray.html#verification","title":"Verification","text":"<p>In the obfuscated code, strings have been replaced with injected function calls. The strings themselves have been moved into string arrays.</p>"},{"location":"languages_platforms/javascript/features/stringencryption.html","title":"String Encryption","text":"<p>String encryption hides strings in programs by replacing them with an encrypted representation of the string. You can apply string encryption to specific strings (such as sensitive API keys), or to all strings in (a part of) the code, to make it harder to read  and understand the program. Multiple encryption algorithms and encryption keys are used to add variation to the obfuscation. To decrypt the encrypted messages again, decryption functions are injected at random places in the code.</p>"},{"location":"languages_platforms/javascript/features/stringencryption.html#example","title":"Example","text":"<p>Original program:</p> <pre><code>  var x = \"Hello, world!\";\n</code></pre> <p>Processed program:</p> <pre><code>  var x = a(\"&amp;h5@jkl;iud12\", 3490);\n</code></pre>"},{"location":"languages_platforms/javascript/features/stringencryption.html#characteristics","title":"Characteristics","text":"Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Replacing strings with an encrypted equivalent makes it harder for hackers to read and understand code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may revert the encryption using dynamic program analysis. Code size medium String encryption may significantly increase the code size. Performance medium Encrypted strings need to be decrypted each time they are accessed. It may be necessary to exclude performance-critical functions using filters."},{"location":"languages_platforms/javascript/features/stringencryption.html#configuration","title":"Configuration","text":"<p>String encryption is part of the <code>strings</code> subsection of the <code>protection/data</code> section.</p> <p>The following configuration enables string encryption and, without additional settings or filters, encrypts all strings in the code:</p> <pre><code>protection:\n  data:\n    strings:\n      encrypt:\n</code></pre> <p>Tip</p> <p>When the feature is not listed in the configuration, it is disabled.</p>"},{"location":"languages_platforms/javascript/features/stringencryption.html#setting-enabled","title":"Setting: enabled","text":"<p>When <code>enabled</code> is unspecified or set to <code>true</code>, string encryption is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging.</p> <p>Default: <code>true</code></p> <pre><code>encrypt:\n  enabled: true\n</code></pre>"},{"location":"languages_platforms/javascript/features/stringencryption.html#setting-log","title":"Setting: log","text":"<p>You can add a <code>log</code> setting to log, at build time, all encrypted strings to the specified file. <pre><code>encrypt:\n  log: &lt;filename&gt;\n</code></pre></p>"},{"location":"languages_platforms/javascript/features/stringencryption.html#filters","title":"Filters","text":"<p>Use unstructured or structured filters to specify which strings should be encrypted, or a combination of both.</p> Filter Effect allowlist, denylist Encrypt all strings whose string value matches the given filter. structured-allowlist, structured-denylist Encrypt all strings in functions matching the given filter. <p>Default: when string encryption is enabled but no filters are specified, all strings are encrypted.</p> <pre><code>encrypt:\n  [allowlist/denylist/structured-allowlist/structured-denylist]:\n    ...\n</code></pre>"},{"location":"languages_platforms/javascript/features/stringencryption.html#verification","title":"Verification","text":"<p>Encrypted strings should no longer be present in the obfuscated program.</p>"},{"location":"languages_platforms/javascript/quickstart/bestpractices.html","title":"Best Practices","text":"<p>The following configuration file provides a good default configuration to start from. It enables all features that typically don't require additional configuration and don't introduce too much performance overhead.</p> <p>Features which are incompatible with some code patterns (see the individual Feature pages) or may have a significant  performance impact are commented out. You can enable them to test the impact on your application. In case of an error or slowdown, you can refine the configuration with an  allowlist or denylist to selectively enable or disable the  feature for part of the code respectively.</p> <p>Please refer to the individual Feature pages for full details on the specifics of each feature.</p> <pre><code>processing:\n\n  assumptions:\n    # You can define an allowlist of debug variables which will always be false\n    # during execution. With shrinking enabled, these variables will then be\n    # optimized away.\n    # false-variables:\n    #   allowlist:\n    #     - DEBUG\n    no-side-effect-methods:\n      allowlist:\n        - console.log\n\n  shrinking:\n    # The obfuscator is not always able to detect references to global\n    # variables or properties. You can leave them disabled, or add an extra\n    # denylist that excludes problematic globals/properties.\n    # globals:\n    # properties:\n    code:\n\n  protection:\n    data:\n      strings:\n        # Encryption of strings may introduce an excessive overhead for certain\n        # performance-critical functions. You can define an allowlist (to\n        # encrypt specific sensitive strings) or a structured denylist (to\n        # encrypt all strings, except strings in performance-critical\n        # functions).\n        # encrypt:\n        arrayize:\n    code:\n      names:\n        # The obfuscator is not always able to detect references to global\n        # variables or properties. You can leave them disabled, or add an extra\n        # denylist that excludes problematic globals/properties.\n        # globals:\n        # properties:\n      property-access:\n        # Encryption of property access obfuscation may introduce an excessive\n        # overhead for certain performance-critical functions. You can leave it\n        # disabled or enable it but add an extra structured denylist to\n        # exclude performance-critical functions.\n        # encrypt:\n      control-flow:\n      numbers:\n      arithmetic-operations:\n      shuffle:\n    environment-integrity:\n      debugger:\n        obstruction:\n          # Encryption of debugger obstruction may introduce an excessive overhead\n          # for certain performance-critical functions. You can leave it disabled\n          # or enable it but add an extra structured denylist filter to exclude\n          # performance-critical functions.\n          # encrypt:\n\n# Use the prettify option to control whether the written JavaScript files should be \n# formatted with proper indentation. Only use this for debugging.\n# output:\n#   prettify: true\n</code></pre>"},{"location":"languages_platforms/javascript/quickstart/dexguardintegration.html","title":"DexGuard Integration","text":"<p>By default, DexGuard leaves JavaScript files largely untouched but can optionally adapt their contents with information about the obfuscated Java elements.</p> <p>You can enable DexGuard's built-in JavaScript obfuscator to shrink and obfuscate the contents of your JavaScript files.</p>"},{"location":"languages_platforms/javascript/quickstart/dexguardintegration.html#gradle-integration","title":"Gradle integration","text":"<p>To use the JavaScript obfuscator, include the <code>lib/dexguard-gradle-plugin.jar</code> in your build classpath.</p> <p>If you are using the DexGuard Gradle plugin, this dependency should already be configured and no additional dependencies need to be added for the JavaScript obfuscator:</p> <pre><code>buildscript {\n    ...\n    dependencies {\n        classpath 'com.android.tools.build:gradle:x.y.z'     // The Android Gradle plugin.\n        classpath 'com.guardsquare:dexguard-gradle-plugin:+' // The DexGuard Gradle plugin.\n    }\n}\n</code></pre>"},{"location":"languages_platforms/javascript/quickstart/dexguardintegration.html#dexguard-configuration","title":"DexGuard configuration","text":"<p>In your DexGuard configuration file, specify the JavaScript files that you want to obfuscate with the  <code>-obfucatejavascript</code> option. For example:</p> <pre><code>-obfuscatejavascript assets/www/secret/**.js\n</code></pre> <p>Tip</p> <p>If your application contains HTML files that have embedded JavaScript snippets, it is recommended to also process these with the JavaScript obfuscator. The tool will not obfuscate these files, but it will scan them for references to functions, variables and properties in the processed JavaScript files and make sure these referenced entities won't be obfuscated or shrunk.</p> <p>Additionally, you should specify the location of the separate file containing the JavaScript-specific configuration settings:</p> <pre><code>-javascriptconfiguration javascript.yml\n</code></pre> <p>Warning</p> <p>For React Native apps, the Preserving runtime-invisible annotations workaround is required.</p>"},{"location":"languages_platforms/javascript/quickstart/dexguardintegration.html#further-reading","title":"Further reading","text":"<p>The Best Practices page provides a template configuration with defaults that work for most JavaScript programs. You can start from this configuration and further refine it to optimize the obfuscation for your application.</p> <p>The Basic Configuration Options page gives a more detailed overview of the different configuration settings to start with.</p> <p>The individual Feature pages provide full details on all available obfuscation features and their specifics.</p>"},{"location":"languages_platforms/javascript/trouble-shooting/knownlimitations.html","title":"Known Issues and Limitations","text":""},{"location":"languages_platforms/javascript/trouble-shooting/knownlimitations.html#stack-overflow-exceptions","title":"Stack overflow exceptions","text":"<p>The JavaScript obfuscator may require a larger stack size than is typically configured by default on most Java virtual machines. If you encounter a <code>StackOverflowException</code>, try increasing the VM's stack size with the <code>-Xss</code> virtual machine option. For example:</p> <pre><code>-Xss8M\n</code></pre> <p>will increase the VM's stack size to 8 MB.</p> <p>When building using Gradle, you can set VM options in the <code>gradle.properties</code> configuration file of your project, via the</p> <pre><code>org.gradle.jvmargs=-Xss8M\n</code></pre> <p>property.</p>"},{"location":"languages_platforms/javascript/trouble-shooting/knownlimitations.html#syntax-errors","title":"Syntax errors","text":"<p>It may happen that you encounter a JavaScript syntax error during Dexguard processing similar to the following: <pre><code> SyntaxError: unexpected token \".\", expected \"&lt;identifier&gt;\" instead\n</code></pre></p> <p>Such syntax errors usually indicate an unsupported version of JavaScript. The JavaScript obfuscator currently supports up to ES6. To resolve these errors, you can transpile your JavaScript files to this supported version.</p> <p>Below are listed some approaches you can use for various project types:</p> <ul> <li>Typescript. If you are working on a typescript project, you can set compilerOptions.target to ES6 (or ES2015)  in your   tsconfig.json (Relevant docs):     <pre><code>{\n//other options \n\n\"compilerOptions\": {\n  \"target\": \"ES6\" // or \"target\": \"ES2015\"\n  //other compilerOptions\n  }\n\n//other options\n}\n</code></pre></li> <li> <p>Web based frameworks such as Ionic or React Native already include a transpilation step   as part of their build process. Depending on the project setup, you may need to provide a browserslist   or configure babel directly to output ES6:</p> </li> <li> <p>Putting a <code>.browserslistrc</code> file at the root of your project should be sufficient. You may use the following configuration as reference:       <pre><code>Chrome &gt;=60\nChromeAndroid &gt;=60\nFirefox &gt;=63\nFirefox ESR\nEdge &gt;=79\nSafari &gt;=13\niOS &gt;=13\n</code></pre></p> </li> <li>Alternatively, you can also configure Babel directly. Follow the  official  documentation to    set it up properly for ES6.</li> </ul>"},{"location":"rasp/legal/jquery.html","title":"Jquery","text":""},{"location":"rasp/legal/jquery.html#jquery-v361","title":"jQuery v3.6.1","text":""},{"location":"rasp/legal/jquery.html#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.6.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n******************************************\n\nThe jQuery JavaScript Library v3.6.1 also includes Sizzle.js\n\nSizzle.js includes the following license:\n\nCopyright JS Foundation and other contributors, https://js.foundation/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/sizzle\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n*********************\n</code></pre>"},{"location":"rasp/legal/jqueryUI.html","title":"jqueryUI","text":""},{"location":"rasp/legal/jqueryUI.html#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"rasp/legal/jqueryUI.html#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n</code></pre>"},{"location":"runtime/legal/jquery.html","title":"Jquery","text":""},{"location":"runtime/legal/jquery.html#jquery-v361","title":"jQuery v3.6.1","text":""},{"location":"runtime/legal/jquery.html#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.6.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n******************************************\n\nThe jQuery JavaScript Library v3.6.1 also includes Sizzle.js\n\nSizzle.js includes the following license:\n\nCopyright JS Foundation and other contributors, https://js.foundation/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/sizzle\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n*********************\n</code></pre>"},{"location":"runtime/legal/jqueryUI.html","title":"jqueryUI","text":""},{"location":"runtime/legal/jqueryUI.html#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"runtime/legal/jqueryUI.html#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n</code></pre>"},{"location":"setup/cordovaplugin.html","title":"Cordova Plugin","text":"<p>DexGuard can be integrated in the Cordova build process. This will ensure that DexGuard is automatically applied every time you Cordova commands such as <code>cordova run android</code> without having to make manual changes to the Android project directory.</p>"},{"location":"setup/cordovaplugin.html#quick-start","title":"Quick start","text":"<p>You can add the DexGuard Cordova plugin to your Cordova project like any other Cordova plugin:</p> <pre><code>cordova plugin add path/to/plugin-dir\n</code></pre> <p>Then, copy the files in the plugins 'templates' folder to the root of your project. You can customize these templates to your project:</p>"},{"location":"setup/cordovaplugin.html#dexguard-pluginjson","title":"dexguard-plugin.json","text":"<p>This is the configuration file of the plugin. All the configuration options are explained in detail in the Configuration section.</p>"},{"location":"setup/cordovaplugin.html#build-extrasgradle","title":"build-extras.gradle","text":"<p>This gradle file will be copied into the Android project and allows you to add gradle configuration to your application. This is required to enable DexGuard:</p> KotlinGroovy <p><pre><code>plugins {\n    alias(libs.plugins.dexguard)\n}\n\n// Only necessary for EncryptedSystemWebViewClient.\ndependencies {\n    implementation(mapOf(\"name\" to \"dexguard-runtime\", \n                         \"ext\"  to \"aar\"))\n}\n\ndexguard {\n    path = \"DEXGUARD_PATH_PLACEHOLDER\"\n    configurations {\n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release-aggressive.pro\")\n            configuration(\"dexguard-project.txt\")\n        }\n        register(\"debug\") {\n            defaultConfiguration(\"dexguard-debug.pro\")\n        }\n    }\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"+\"\n\n[plugins]\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> <p><pre><code>plugins {\n    alias(libs.plugins.dexguard)\n}\n\n// Only necessary for EncryptedSystemWebViewClient.\ndependencies {\n    implementation(name:'dexguard-runtime', ext:'aar')\n}\n\ndexguard {\n    path = 'DEXGUARD_PATH_PLACEHOLDER'\n    configurations {\n        release {\n            defaultConfiguration 'dexguard-release-aggressive.pro'\n            configuration 'dexguard-project.txt'\n        }\n        debug {\n            defaultConfiguration 'dexguard-debug.pro'\n        }\n    }\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"+\"\n\n[plugins]\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> <p><code>DEXGUARD_PATH_PLACEHOLDER</code> will automatically be replaced by the Cordova plugin to the DexGuard location, according to the configuration set in <code>dexguard-plugin.json</code></p> <p>Note that you can use this mechanism to add non-DexGuard related gradle configuration as well.</p>"},{"location":"setup/cordovaplugin.html#dexguard-projecttxt-javascriptyml","title":"dexguard-project.txt &amp; javascript.yml","text":"<p>These are the DexGuard and JavaScript obfuscation configuration files respectively. See their respective manuals for more information on how to configure these correctly.</p>"},{"location":"setup/cordovaplugin.html#encryptedcordovaactivityjava","title":"EncryptedCordovaActivity.java","text":"<p>This is an example of a custom Activity that will be injected into the application and can therefore be used to extend the functionality of the MainActivity. This particular EncryptedCordovaActivity can be used to support asset encryption in a Cordova application. See the option customActivityFile for a more detailed explanation.</p>"},{"location":"setup/cordovaplugin.html#configuration","title":"Configuration","text":"<p>To configure this plugin, create a file called \"dexguard-plugin.json\" (or use the template included in the templates folder) in the root of your Cordova project.</p> <p>A typical dexguard-plugin.json configuration looks as follows:</p> <pre><code>{\n    \"appLevelFiles\"               : [ \"build-extras.gradle\",\n                                      \"dexguard-project.txt\",\n                                      \"javascript.yml\" ],\n    \"dexguardPath\"                : \"/path/to/dexguard\",\n    \"appDirectory\"                : \"app\",\n    \"srcDirectory\"                : \"src/main/java\",\n    \"customActivityFile\"          : \"EncryptedCordovaActivity.java\",\n    \"mainActivity\"                : \"io.cordova.hellocordova.MainActivity\"\n}\n</code></pre>"},{"location":"setup/cordovaplugin.html#applevelfiles","title":"appLevelFiles","text":"<p>Provide a list of all the files that need to be copied to the app directory of your android application. Typically, this includes:</p> <ul> <li>the DexGuard configuration (dexguard-project.txt)</li> <li>the JavaScript obfuscation configuration (javascript.yml)</li> <li>build-extras.gradle</li> </ul>"},{"location":"setup/cordovaplugin.html#appdirectory-required","title":"appDirectory (required)","text":"<p>Specify the path to your app-directory (relative to the platforms/android directory). This is where the files specified in 'appLevelFiles' will be copied to.</p>"},{"location":"setup/cordovaplugin.html#srcdirectory-required","title":"srcDirectory (required)","text":"<p>Specify the location of the java source directory of this application (relative to the app-directory). Normally this is 'src/main/java'.</p>"},{"location":"setup/cordovaplugin.html#dexguardpath-required","title":"dexguardPath (required)","text":"<p>Specify the path to the directory containing dexguard.jar. This path can be absolute or relative to the platforms/android directory.</p>"},{"location":"setup/cordovaplugin.html#customactivityfile-optional","title":"customActivityFile (optional)","text":"<p>Specify a Java class file of an Activity that extends CordovaActivity. The plugin will do two things:</p> <ul> <li>Copy this Activity to the java source directory of your application</li> <li>Modify the MainActivity to extend this custom Activity class instead of   CordovaActivity</li> </ul> <p>This option allows you to add extra functionality to the application's MainActivity (eg: adding the DexGuard runtime checks).</p>"},{"location":"setup/cordovaplugin.html#mainactivity-required-when-using-customactivityfile","title":"mainActivity (required when using 'customActivityFile')","text":"<p>Specify the fully qualified name of this application's MainActivity. This option is required when using 'customActivityFile'.</p>"},{"location":"setup/cordovaplugin.html#output-apk","title":"Output APK","text":"<p>The protected APK is created and placed alongside the unprotected APK  in the <code>platforms/android/app/build/outputs/apk/&lt;variant&gt;</code> directory, and has a <code>-protected</code> suffix in the name. </p> <p>Make sure to release the protected application</p> <p>The release application will require signing. Please refer to the Cordova user's guide for further information about signing an application.  If you specify signature information, the protected APK will be signed using the provided information.</p>"},{"location":"setup/downloading-dexguard.html","title":"Downloading DexGuard","text":""},{"location":"setup/downloading-dexguard.html#prepare_development_environment","title":"Prepare your development environment","text":"<p>DexGuard is available through Maven. If you plan to integrate DexGuard in your Gradle build process with Maven, please follow the instructions on the Maven configuration page and skip forward to the DexGuard configuration step.</p> <p>If you want to manage your DexGuard installation locally, make sure you have the right tools and components in place.</p> <ol> <li>Log in to the Guardsquare website.</li> <li>Download the DexGuard software and your license file <code>dexguard-license.txt</code> and install them on your build system.</li> </ol> <p>Now that you have the DexGuard software installed, it can be integrated into your local build process and your CI pipelines using Gradle, or as a standalone tool.</p> <ul> <li> <p> Gradle Integration</p> <p>Integrate DexGuard into your Gradle build using the DexGuard Gradle plugin.</p> <p> DexGuard Gradle plugin</p> </li> <li> <p> Standalone Integration</p> <p>Integrate DexGuard into your build pipelines as a standalone tool.</p> <p> DexGuard standalone execution</p> </li> </ul>"},{"location":"setup/espresso.html","title":"Espresso","text":"<p>Automated testing is a very useful tool to verify your application works as expected. As the hardening that DexGuard applies can change the structure of your code you may want to use these automated tests to verify everything still works as it should. Espresso is a testing framework that can do just that, it is provided by Google and can easily be configured in your Gradle project. </p> <p>A test build for an unprocessed application doesn't always work with its processed version. For this reason the test has to be processed by DexGuard using a specific configuration.</p>"},{"location":"setup/espresso.html#using-the-dexguard-gradle-plugin","title":"Using the DexGuard Gradle plugin","text":"<p>When using the DexGuard Gradle plugin, a new build configuration needs to be added to the <code>dexguard</code> block in your <code>build.gradle</code> file. This configuration needs to be the same as the <code>testBuildType</code> set in the <code>android</code> block.</p> <p>You can find a sample configuration below: <pre><code>dexguard {\n    ...\n    configurations {\n        ...\n        releaseTest {\n            // Include the same configuration as the release configuration\n            defaultConfiguration 'dexguard-release-aggressive.pro'\n            configuration 'dexguard-project.txt'\n            // Extra espresso test configuration\n            defaultConfiguration 'dexguard-espresso.pro'\n            configuration 'dexguard-project-test.txt'\n        }\n        ...\n    }\n}\n</code></pre></p> <p>The Dexguard Gradle plugin includes two tasks that create the necessary artefacts to run the test. These are <code>assembleAndroidTest</code> and <code>dexguardBundleAndroidTest</code> for APKs and AABs respectively.</p> <p>Note</p> <p>If you are using AGP &lt; 7.2, you will have to prevent the Android build tools from stripping Espresso annotations, install and run the tests manually.</p>"},{"location":"setup/espresso.html#using-dexguard-in-standalone-mode","title":"Using DexGuard in standalone mode","text":"<p>When executing DexGuard outside of the build process you will have to perform the following actions:</p> <ol> <li>Build your application.</li> <li>Build the test application.</li> <li>Process your application using DexGuard and print out the mapping file.</li> <li>Process the test application using DexGuard and the Espresso conifguration.</li> <li>Install both applications to a test device or emulator.</li> <li>Execute the Espresso tests.</li> </ol>"},{"location":"setup/espresso.html#build-your-application","title":"Build your application","text":"<p>You can build your application using the <code>assemble</code> Gradle task for building an APK and <code>bundle</code> for building an AAB. These tasks will build all variants of your application, if you only want to build a single variant, append the name of the variant to the end. For example, <code>assembleRelease</code>  to build only the release variant of your APK.</p> Linux/macOSWindows <pre><code>./gradlew assembleRelease\n</code></pre> <pre><code>gradlew assembleRelease\n</code></pre> <p>Warning</p> <p>If you use Espresso annotations and AGP &lt; 7.2, you will have to make sure they are not stripped by the Android build tools while building your application. DexGuard cannot see the annotations otherwise, which may result in exceptions at runtime. Please visit this page  for more information.</p> <p>Note</p> <p>When building an AAB, you will have to build a universal apk using  bundletool from your protected AAB.</p>"},{"location":"setup/espresso.html#build-the-test-application","title":"Build the test application","text":"<p>The test application is a special test variant derived from the one you want to test. As such, you can build it like any other variant of your application. The name of this test variant is the name of the base variant appended with <code>androidTest</code>. For example, <code>releaseAndroidTest</code> for the release variant.</p> <p>This test variant will build an application containing your Espresso tests, it will be installed alongside your actual application. Upon opening this test application it will open up the application it's supposed to test and performs the actions described in the tests, reporting the results.</p> <p>Building this test variant is done by calling its <code>assemble</code> task. If you are testing your debug build this would look something like this:</p> Linux/macOSWindows <pre><code>./gradlew assembleDebugAndroidTest\n</code></pre> <pre><code>gradlew assembleDebugAndroidTest\n</code></pre> <p>The resulting apk can be found in the <code>build/outputs/androidTest</code> directory.</p>"},{"location":"setup/espresso.html#process-your-application-with-dexguard-and-print-out-the-mapping-file","title":"Process your application with DexGuard and print out the mapping file","text":"<p>In this step you process your application as you normally would as described earlier on this page. When you want to test the resulting apk using Espresso you need to keep two things in mind, however.</p> <ul> <li>You need to print out the mapping file. This file will be used when   processing the test application to rename the calls in this application to   the obfuscated name.</li> <li>You need to sign it so it can be installed on the test device or emulator.   Signing it with the default debug keystore works perfectly fine.</li> </ul> <pre><code>-printmapping mapping.txt\n\n-keystore &lt;user.home&gt;/.android/debug.keystore\n-keystorepassword android\n-keyalias androiddebugkey\n-keypassword android\n</code></pre>"},{"location":"setup/espresso.html#process-the-test-application-using-dexguard-and-the-espresso-configuration","title":"Process the test application using DexGuard and the Espresso configuration","text":"<p>Processing the test application is straight-forward and will require no custom configuration in almost all cases. The configuration is similar to that of a normal application except for the default configuration and some additional requirements.</p> <p>The default configuration used is <code>dexguard-espresso-internal.pro</code>. This will configure DexGuard to perform some adaptations to match the application under test. Apart from that, minimal processing is performed to prevent any major structural changes to your test code.</p> <p>The additional requirements are the following:</p> <ul> <li>The unobfuscated main application (APK or AAB) has to be passed in as a library jar to   DexGuard since the test application depends on it.</li> <li>An <code>-applymapping</code> rule has to be added using the   mapping file of the main application so calls into the main application code   can be renamed consistently.</li> <li>The apk needs to be signed so it can be installed. The Android build chain   will use the default debug keystore, so we suggest doing the same.</li> </ul> <p>Example: <pre><code>-injars path/to/my-application-androidTest.apk\n\n-outjars path/to/obfuscated-application-androidTest.apk\n\n-libraryjars path/to/my-application.apk\n-libraryjars /path/to/android/sdk/platforms/android-XX/android.jar\n\n-include /lib/dexguard-espresso-internal.pro\n\n-applymapping path/to/mapping.txt\n\n-keystore &lt;user.home&gt;/.android/debug.keystore\n-keystorepassword android\n-keyalias androiddebugkey\n-keypassword android\n</code></pre></p>"},{"location":"setup/espresso.html#test-the-application-using-the-generated-artefacts","title":"Test the application using the generated artefacts","text":""},{"location":"setup/espresso.html#install-both-applications-to-a-test-device-or-emulator","title":"Install both applications to a test device or emulator","text":"<p>Installing a local apk to a connected device or emulator can easily be done using <code>adb</code>, which comes with the Android SDK:</p> Linux/macOSWindows <pre><code>path/to/android/sdk/platform-tools/adb install path/to/obfuscated-application.apk\npath/to/android/sdk/platform-tools/adb install path/to/obfuscated-application-androidTest.apk\n</code></pre> <pre><code>path\\to\\android\\sdk\\platform-tools\\adb install path\\to\\obfuscated-application.apk\npath\\to\\android\\sdk\\platform-tools\\adb install path\\to\\obfuscated-application-androidTest.apk\n</code></pre> <p>Note</p> <p>When using the DexGuard Gradle plugin, a universal APK will have been generated from your obfuscated AAB. This APK will be located in the same build directory as your AAB with <code>-universal</code> in the name. It is this  APK that needs to be installed in this step.</p>"},{"location":"setup/espresso.html#execute-the-espresso-tests","title":"Execute the Espresso tests","text":"<p>Executing the Espresso tests call also be done via <code>adb</code>:</p> Linux/macOSWindows <pre><code>path/to/android/sdk/platform-tools/adb shell am instrument -w my.package.name.test/android.support.test.runner.AndroidJUnitRunner\n</code></pre> <pre><code>path\\to\\android\\sdk\\platform-tools\\adb shell am instrument -w my.package.name.test/android.support.test.runner.AndroidJUnitRunner\n</code></pre> <p>The <code>-w</code> argument makes it so the process waits to return until it's finished, this is required for test runners. The following argument is the test runner, starting with the package name (or application ID) of the test application. This is by default the package name of the main application appended with <code>.test</code>. After that is a <code>/</code> followed by fully qualified class name of the test runner to use to run the tests. This is by default the <code>android.support.test.runner.AndroidJUnitRunner</code>, but if you can also use a custom one.</p> <p>For more information on this process, refer to the official documentation.</p>"},{"location":"setup/espresso.html#uninstall-the-applications","title":"Uninstall the applications","text":"<p>This step is optional, but if you want to uninstall the applications when you are done with the tests, you can again use <code>adb</code> for this purpose:</p> Linux/macOSWindows <pre><code>path/to/android/sdk/platform-tools/adb uninstall my.package.name\npath/to/android/sdk/platform-tools/adb uninstall my.package.name.test\n</code></pre> <pre><code>path\\to\\android\\sdk\\platform-tools\\adb uninstall my.package.name\npath\\to\\android\\sdk\\platform-tools\\adb uninstall my.package.name.test\n</code></pre> <p>As you can see, the <code>uninstall</code> command takes in the package name of the application you want to uninstall.</p>"},{"location":"setup/espresso.html#best-practices","title":"Best practices","text":"<p>Even though DexGuard does not alter the functionality and intended behavior of your application, it does change the internal structure quite a bit due to the optimizations and layers of protection it applies. This means some care should be taken when creating your Espresso tests. This section will go over our recommendations to lower the amount of additional configuration needed and keep the obfuscation of the application you are testing as close to the final product as possible.</p> <p>The general idea is to start from working tests without applying DexGuard to your application. After that, try to run the tests with DexGuard applied but without any additional configuration. If they do not succeed, it means DexGuard broke them and you'll either have to rework your test code to be less dependent on the application code or extend the configuration for the application under test.</p> <p>Test configuration</p> <p>Many of the suggestions below will mention adding additional configuration for the application that's being tested. These additional rules and default configurations should only be applied when testing your app using Espresso, they should not be applied when creating the application you are going to ship since they weaken the obfuscation to allow the tests to do their work.</p>"},{"location":"setup/espresso.html#test-code","title":"Test code","text":"<p>Espresso is a framework that allows you to emulate user input and verify the current state of the user interface. This means it's actually very forgiving with regards to the various optimization and obfuscation techniques DexGuard applies. There are some problematic cases, of course.</p> <p>Using classes from the application in your tests should be avoided as much as possible. As stated earlier, DexGuard will apply optimizations and obfuscations that can drastically change the way your code looks internally. Our default configuration for the Espresso tests makes the obfuscation less of an issue but it's not perfect and the optimizations will almost certainly cause problems.</p> <p>We are aware that this is not always possible and there are ways around this. This is generally not ideal, as you want to avoid additional configuration. For this reason we do stress that you try to avoid this as much as you can.</p> <p>Possible solutions include:</p> <ul> <li>Copy the class or method you want to use. This is really only advised if they   are small and not likely to change.</li> <li>Create dedicated methods used in tests only. These methods are guaranteed to   be removed by DexGuard in your actual release and can be kept using the rule   below.</li> </ul> <pre><code>-keepclassmembers class classname\n{\n    returntype methodname(parametertypes);\n}\n</code></pre> <ul> <li>Add additional rules to keep any relevant code or disable any problematic   optimizations. You can read more about the various optimizations that can be   disabled on the optimizations page.</li> <li>Use a default test configuration. Depending on the   configuration you choose, several classes will be kept and/or optimizations   will be disabled. If the problem persists you'll likely have to add a custom   keep rule.</li> </ul>"},{"location":"setup/espresso.html#resources","title":"Resources","text":"<p>DexGuard also processes the various resources that are used in your application, which means this can cause problems if you try to refer to them from your test code. Just as with code, try to avoid referring to application resources in your test code.</p> <p>If this is not possible, try running your tests to see if there are any issues. If there are, you can try any of the following suggestions:</p> <ul> <li>Use the   <code>dexguard-espresso-no-resource-optimizations.pro</code>   default test configuration.</li> <li>Keep the problematic resources using the   <code>-keepresources</code> rule.</li> </ul>"},{"location":"setup/espresso.html#dependencies","title":"Dependencies","text":"<p>When building the tests the Android gradle plugin will treat the dependencies shared by the application and its tests as compile only dependencies, meaning they won't end up packaged in the test application. This saves space and in normal circumstances isn't an issue as the dependencies will be available in the application under test.</p> <p>However, when using DexGuard this no longer holds true because of its shrinking. If the application does not use a class that the tests do use, it will be removed during the shrinking step from the main application. Here are some suggestions to resolve these issues if they occur:</p> <ul> <li>Try to avoid sharing dependencies between your application and its tests. In   general this shouldn't be too much of an issue, but there are some common   cases where this is not possible.</li> <li>Add keep rules for the missing classes.</li> </ul>"},{"location":"setup/espresso.html#default-configurations","title":"Default configurations","text":"<p>DexGuard provides a few default configurations you can include for applicaton builds you are going to test using Espresso. These configurations have a specific purpose and are independent of each other, meaning you can use multiple at the same time. The available default configurations are explained in more detail below.</p>"},{"location":"setup/espresso.html#dexguard-espressopro","title":"<code>dexguard-espresso.pro</code>","text":"<p>This is the basic configuration needed to run Espresso tests on an application that is obfuscated by DexGuard. It also offers support for the <code>@VisibleForTesting</code> annotation which will prevent annotated classes or members from being obfuscated, shrunk or optimized in order to be accessed by tests.</p> <pre><code>-include /lib/dexguard-espresso.pro\n</code></pre>"},{"location":"setup/espresso.html#dexguard-espresso-no-resource-optimizationspro","title":"<code>dexguard-espresso-no-resource-optimizations.pro</code>","text":"<p>Using this default configuration makes using resources in your test code a non-issue. It disables all resource related optimizations so everything your tests expect to find should still be there with their original ids.</p> <pre><code>-include /lib/dexguard-espresso-no-resource-optimizations.pro\n</code></pre>"},{"location":"setup/espresso.html#dexguard-espresso-aggressive-optimizationspro","title":"<code>dexguard-espresso-aggressive-optimizations.pro</code>","text":"<p>This default configuration disables all less invasive code optimizations. These should be sufficient when your tests only access a small portion of the application code. The optimizations that are disabled are:</p> <ul> <li><code>field/marking/private</code></li> <li><code>method/marking/private</code></li> <li><code>method/marking/static</code></li> <li><code>method/marking/final</code></li> <li><code>method/inlining/short</code></li> <li><code>method/inlining/unique</code></li> </ul> <pre><code>-include /lib/dexguard-espresso-aggressive-optimizations.pro\n</code></pre>"},{"location":"setup/espresso.html#dexguard-espresso-safe-optimizationspro","title":"<code>dexguard-espresso-safe-optimizations.pro</code>","text":"<p>This is an extension of the <code>dexguard-espresso-aggressive-optimizations.pro</code> configuration and disables more optimizations. The optimizations in question are responsible for most drastic changes in code structure and using this configuration should allow you to access all of your application code from your tests. The optimizations that are disabled in addition to the ones mentioned above are:</p> <ul> <li><code>class/merging/vertical</code></li> <li><code>class/merging/horizontal</code></li> <li><code>class/merging/wrapper</code></li> <li><code>field/generalization/class</code></li> <li><code>method/generalization/class</code></li> <li><code>field/sepcialization/type</code></li> <li><code>method/sepcialization/parametertype</code></li> <li><code>method/sepcialization/returntype</code></li> <li><code>field/propagation/value</code></li> <li><code>method/propagation/parameter</code></li> <li><code>method/propagation/returnvalue</code></li> </ul> <pre><code>-include /lib/dexguard-espresso-safe-optimizations.pro\n</code></pre> <p>Note</p> <p>The configuration <code>dexguard-espresso-safe-optimizations.pro</code> is a superset of <code>dexguard-espresso-aggressive-optimizations.pro</code>. This means you should not include both at the same time. They can be combined with the other default configurations, just not with each other.</p>"},{"location":"setup/gradle-plugin.html","title":"DexGuard Gradle plugin options","text":"Finding your protected APK/AAB/AAR <p>DexGuard places your protected APK/AAB/AAR next to the original unprotected APK/AAB/AAR, in the same directory: <code>build/outputs/apk/release/{app-name}-protected.apk</code>.</p> <p>Note that <code>build/outputs/apk/release/{app-name}.apk</code> is the original, unprotected APK!</p> <p>The same applies to App bundles and Android libraries. For an AAB or AAR,  <code>apk</code> needs to be replaced by <code>aab</code> or <code>aar</code> respectively.</p> Runtime-invisible annotations <p>By default, the Android build tools strip runtime-invisible annotations when building release configurations. For Android Gradle Plugin 7.2. and above, DexGuard will preserve these annotations by default. If you are using Android Gradle Plugin version below 7.2. and you rely on these annotations please consult this page for a workaround.</p> <p>Below is a more elaborate explanation of all the options available in the <code>dexguard</code> configuration block.</p>"},{"location":"setup/gradle-plugin.html#the-dexguard-block","title":"The 'dexguard' block","text":"<p>The following options are available in the <code>dexguard</code> block:</p> <ul> <li><code>path = &lt;path&gt;</code></li> <li><code>license = &lt;license&gt;</code></li> <li><code>overwriteUnprotected = &lt;true/false&gt;</code></li> <li><code>allowLocalFiles = &lt;true/false&gt;</code></li> <li><code>configurations &lt;variant configuration block&gt;</code></li> </ul>"},{"location":"setup/gradle-plugin.html#path","title":"path","text":"<p>The <code>path</code> option is optional when specifying the <code>dexguard</code> block and accepts a path, either as a String or a File object. The path should point to the DexGuard distribution directory you want the plugin to use. The plugin's version should match the DexGuard version.</p> <p>When the path option is not specified, the plugin will automatically download DexGuard. This requires that you have configured access to Guardsquare's maven repository.</p> KotlinGroovy <pre><code>dexguard {\n    path = \"path/to/DexGuard\"\n}\n</code></pre> <pre><code>dexguard {\n    path = \"path/to/DexGuard\"\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#license","title":"license","text":"<p>The <code>license</code> option can be used to set the path to your DexGuard license file or the directory containing the file. If you do not specify your license here DexGuard will search for your license in the other standard locations.</p> KotlinGroovy <pre><code>dexguard {\n    license = \"/path/to/dexguard-license.txt\"\n}\n</code></pre> <pre><code>dexguard {\n    license = \"/path/to/dexguard-license.txt\"\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#overwriteunprotected","title":"overwriteUnprotected","text":"<p>The <code>overwriteUnprotected</code> option is optional and is by default set to <code>false</code>. When set to <code>true</code>, DexGuard mimics the behavior of previous versions of the plugin by overwriting the unprotected apk/aab/aar with its protected version and keeping the original name of the input apk/aab/aar, without the <code>-protected</code> suffix. It is not recommended to overwrite the unprotected artifacts, as this would invalidate the Gradle caches and trigger DexGuard processing each time the artifacts are built.</p> KotlinGroovy <pre><code>dexguard {\n    overwriteUnprotected = true\n}\n</code></pre> <pre><code>dexguard {\n    overwriteUnprotected = true\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#configurations","title":"configurations","text":"<p>The <code>configurations</code> option is a block option of the <code>dexguard</code> block that can be used to specify DexGuard configurations for the Android variants you wish to obfuscate by using the name of that variant.</p> <p>For example, if you have a variant named <code>premiumRelease</code> you want to protect using DexGuard, you would write the following:</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"premiumRelease\") {\n            ...\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        premiumRelease {\n            ...\n        }\n    }\n}\n</code></pre> <p>For convenience, you can also use the build type name to match all variants that have that build type. For example, if you have the variants <code>premiumRelease</code> and <code>freeRelease</code> you can match both of them by using <code>release</code>:</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            ...\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            ...\n        }\n    }\n}\n</code></pre> <p>The following options are available in these variant configuration blocks:</p> <ul> <li><code>defaultConfiguration &lt;name&gt;</code></li> <li><code>defaultConfigurations &lt;name&gt;, ...</code></li> <li><code>configuration &lt;path&gt;</code></li> <li><code>configurations &lt;path&gt;, ...</code></li> <li><code>testConfiguration &lt;path&gt;</code></li> <li><code>testConfigurations &lt;path&gt;, ...</code></li> <li><code>consumerRuleFilter &lt;dependency&gt;, ...</code></li> </ul>"},{"location":"setup/gradle-plugin.html#defaultconfiguration","title":"defaultConfiguration","text":"<p>The <code>defaultConfiguration</code> option allows you to specify a default configuration file DexGuard should use. You can specify this option more than once, in which case all of the specified default configurations will be used. At least one default configuration must be specified.</p> <p>A list of available default configurations can be found on the default configurations page.</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            defaultConfiguration 'dexguard-release.pro'\n        }\n    }\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#defaultconfigurations","title":"defaultConfigurations","text":"<p>This option is the same as <code>defaultConfiguration</code> but allows you to specify multiple default configurations at once.</p> <p>For example, the following snippet</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            defaultConfigurations(\"dexguard-release.pro\", \"dexguard-gson.pro\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            defaultConfigurations 'dexguard-release.pro', 'dexguard-gson.pro'\n        }\n    }\n}\n</code></pre> <p>is equivalent to</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n            defaultConfiguration(\"dexguard-gson.pro\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            defaultConfiguration 'dexguard-release.pro'\n            defaultConfiguration 'dexguard-gson.pro'\n        }\n    }\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#configuration","title":"configuration","text":"<p>The <code>configuration</code> option allows you to specify a custom DexGuard configuration file DexGuard should use. Specifying this option multiple times will pass all of the specified configuration files to DexGuard. The option accepts a path to the configuration file to use, this can be either a String or File object.</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            configuration(\"dexguard-project.txt\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            configuration 'dexguard-project.txt'\n        }\n    }\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#configurations_1","title":"configurations","text":"<p>This option is the same as <code>configuration</code> but allows you to specify multiple configuration files at once.</p> <p>For example, the following snippet</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            configurations(\"dexguard-project.txt\", \"dexguard-project-release.txt\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            configurations 'dexguard-project.txt', 'dexguard-project-release.txt'\n        }\n    }\n}\n</code></pre> <p>is equivalent to</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            configuration(\"dexguard-project.txt\")\n            configuration(\"dexguard-project-release.txt\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            configuration 'dexguard-project.txt'\n            configuration 'dexguard-project-release.txt'\n        }\n    }\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#testconfiguration","title":"testConfiguration","text":"<p>The <code>testConfiguration</code> option allows you to specify a custom DexGuard configuration file DexGuard should use when processing the test variant of the  configured variant. It has the same semantics as the <code>configuration</code> option.</p> <p>In general, you won't need to configure the test variant as the DexGuard Gradle plugin will do this for you. This option is only useful in the rare cases where it is necessary to configure the test variant.</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            testConfiguration(\"dexguard-test.txt\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            testConfiguration 'dexguard-test.txt'\n        }\n    }\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#testconfigurations","title":"testConfigurations","text":"<p>This option is the same as <code>testConfiguration</code> but allows you to specify multiple configuration files at once. Its semantics are the same as the ones for the <code>configurations</code> option.</p>"},{"location":"setup/gradle-plugin.html#consumerrulefilter","title":"consumerRuleFilter","text":"<p>The <code>consumerRuleFilter</code> option allows you to specify a list of maven group and module name pairs to filter out the ProGuard consumer rules of the dependencies that match the specified group and module pairs.</p> <p>A group and module name pair is very similar to the maven coordinates you write when specifying the dependencies in the <code>dependencies</code> block, but without the version part.</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            consumerRuleFilter(\"groupName:moduleName\", \"anotherGroupName:anotherModuleName\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            consumerRuleFilter 'groupName:moduleName', 'anotherGroupName:anotherModuleName'\n        }\n    }\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#jvmargs","title":"jvmArgs","text":"<p>You can pass arguments to the JVM process in which DexGuard is executed using the <code>jvmArgs</code> option. This option takes list of strings, for example, you can set the initial and maximum heap sizes using the following:</p> KotlinGroovy <pre><code>dexguard {\n    jvmArgs(\"-Xms512M\", \"-Xmx2048M\")\n    ...\n}\n</code></pre> <pre><code>dexguard {\n    jvmArgs \"-Xms512M\", \"-Xmx2048M\"\n    ...\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#uploadcrashlyticsmappingfile","title":"uploadCrashlyticsMappingFile","text":"<p>For this option to work correctly, please first follow the steps outlined in the \"Use DexGuard with Firebase Crashlytics section\".</p> <p>This option instructs the DexGuard Gradle plugin to upload mapping files to Crashlytics for  the build types or flavors on which it is set to <code>true</code>. By default, it is set to <code>false</code>.</p> <p>For example, if you wish to upload mapping files for all release variants, you  could use the following:</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n            uploadCrashlyticsMappingFile = true\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            defaultConfigurations 'dexguard-release.pro'\n            uploadCrashlyticsMappingFile = true\n        }\n    }\n}\n</code></pre> <p>If you have multiple flavors of a certain build type, you can also enable or disable the uploading of mapping files independently for each individual flavor. </p> <p>For example, if you wish to enable the uploading of mapping files for all release  flavors, except <code>internal</code>, you could use the following:</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n            uploadCrashlyticsMappingFile = true\n        }\n        register(\"internalRelease\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n            uploadCrashlyticsMappingFile = false\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            defaultConfigurations 'dexguard-release.pro'\n            uploadCrashlyticsMappingFile = true\n        }\n        internalRelease {\n            defaultConfigurations 'dexguard-release.pro'\n            uploadCrashlyticsMappingFile = false\n        }       \n    }\n}\n</code></pre> <p>If you only wish to upload mapping files for one specific variant, e.g. <code>external</code>, you  could use the following:</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n        }\n        register(\"externalRelease\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n            uploadCrashlyticsMappingFile = true\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            defaultConfigurations 'dexguard-release.pro'\n        }\n        externalRelease {\n            defaultConfigurations 'dexguard-release.pro'\n            uploadCrashlyticsMappingFile = true\n        }       \n    }\n}\n</code></pre> <p>Disabling splits</p> <p>At this moment, it is not possible to enable splits when integrating with Crashlytics.  DexGuard only produces a single mapping file per build variant, and it is not valid  for every split APK that would be built.</p> <p>Info</p> <p>Make sure to thoroughly test your Crashlytics integration before releasing. After enabling the uploading of mapping files, you should see two additional tasks being executed when assembling a variant. One will inject the necessary mapping file ID, a second one will upload your mapping file to Crashlytics. If you cause an intentional crash, a deobfuscated stack trace should show up in your Crashlytics console afterwards.</p>"},{"location":"setup/gradle-plugin.html#allowlocalfiles","title":"allowLocalFiles","text":"<p>This option allows you to build your project with a DexGuard distribution within your Gradle project.</p> <p>Public git repositories</p> <p>Please, do not use this option to commit any DexGuard files to a public git repository! This is not allowed and could pose a risk to our software and the apps it protects. Only use this option if you intend to commit to a private git repository.</p> Kotlin <pre><code>dexguard {\n    path = \"../DexGuard-x.y.z\"\n    allowLocalFiles = true\n}\n</code></pre> Groovy <pre><code>dexguard {\n    path = '../DexGuard-x.y.z'\n    allowLocalFiles = true\n}\n</code></pre>"},{"location":"setup/gradle-plugin.html#use-dexguard-with-firebase-crashlytics","title":"Use DexGuard with Firebase Crashlytics","text":"<p>The DexGuard gradle plugin has a built-in Firebase Crashlytics integration, which allows it to automatically upload the correct mapping files.</p> <p>To enable this integration, please make sure to run through the following steps first</p> <ul> <li>Follow the Firebase Crashlytics guide to add the necessary plugins and    dependencies to your project.</li> <li>Make sure your Crashlytics integration works without DexGuard.</li> <li>Make sure the DexGuard plugin is applied after the Firebase Crashlytics plugin.</li> <li>Do not set the <code>mappingFileUploadEnabled</code> or <code>mappingFile</code> properties of the Firebase    Crashlytics plugin on DexGuard-enabled build types or flavors.</li> <li>The DexGuard Gradle plugin will expect your mapping files to be in their    default locations. Please make sure to not add any <code>-printmapping</code> rules   yourself when using this integration.</li> </ul> <p>Afterwards, you can use the <code>uploadCrashlyticsMappingFile</code> option to enable mapping file uploads for the required build types and flavors.</p>"},{"location":"setup/gradle-plugin.html#use-dexguard-with-dynamic-features","title":"Use DexGuard with dynamic features","text":"<p>Dynamic feature projects can specify dependencies just like any other project. This means dynamic feature projects might have consumer rules or library jars associated with them. The Gradle plugin will need to collect these and pass them on to DexGuard to process your app bundle correctly. In order for the Gradle plugin to collect these inputs you must also apply the DexGuard Gradle plugin to your dynamic feature projects:</p> Kotlin / Groovy <p>build.gradle.kts<pre><code>plugins {\n    alias(libs.plugins.dynamic.feature)\n    alias(libs.plugins.dexguard)\n}\n</code></pre> gradle/lib.versions.toml<pre><code>[versions]\ndynamic-feature = \"1.2.3\"\ndexguard = \"+\"\n\n[plugins]\ndynamic-feature = { id = \"com.android.dynamic-feature\", version.ref = \"dynamic-feature\" }\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> <p>This is all that is needed for the DexGuard Gradle plugin to correctly process app bundles with dynamic features.</p> <p>In case you need to specify a consumer rule filter for a dependency of a dynamic feature, you can do so in the dynamic feature project as shown below:</p> KotlinGroovy <pre><code>dexguard {\n    configurations {\n        register(\"release\") {\n            consumerRuleFilter(\"myGroup:myModule\")\n        }\n    }\n}\n</code></pre> <pre><code>dexguard {\n    configurations {\n        release {\n            consumerRuleFilter 'myGroup:myModule'\n        }\n    }\n}\n</code></pre> <p>Only the <code>consumerRuleFilter</code> option is allowed for dynamic feature projects.</p>"},{"location":"setup/gradle-plugin.html#fat-aar","title":"Fat aar support","text":"<p>Warning</p> <p>It used to be necessary to use this feature in order to fat-pack the ThreatCast client and DexGuard runtime library into protected SDK projects. However, DexGuard is now capable of injecting both automatically at processing time when necessary, so this should no longer be required. </p> <p>For ThreatCast, DexGuard will automatically inject the necessary artifacts without needing to specify a dependency  in the build.gradle files. </p> <p>The DexGuard runtime can be added as a <code>compileOnly</code> dependency to the build.gradle files, after which DexGuard  will inject the necessary artifacts during processing. If necessary, an <code>implementation</code> dependency can also be  used, but take into account that this may have unintended interactions with the maven-publish plugin.  For more information on the latter, see the related  known issues page</p>"},{"location":"setup/gradle-plugin.html#upgrading-to-95","title":"Upgrading to 9.5","text":"<p>When you are using DexGuard's fat AAR support, and you are upgrading to DexGuard 9.5, you should now replace the <code>embed</code> dependencies  with <code>compileOnly</code> dependencies for the DexGuard runtime AAR. When processing the AAR, DexGuard will inject the necessary code for the RASP checks to work in the protected AAR.</p> <p>If you would like to create a functional AAR when DexGuard is not applied, for example when creating a debug AAR, you can add a <code>debugImplementation</code> dependency as well. Note that the RASP code inserted in this debug build does not run the actual RASP checks, but mock implementations of the real RASP checks. See this page for more information on the shell runtime.</p>"},{"location":"setup/gradle-plugin.html#placing_dexguard_files_within_your_gradle_project","title":"Placing DexGuard files within your Gradle project","text":"<p>The DexGuard Gradle plugin will prevent you from placing the DexGuard distribution within your Gradle project. While committing those files to a private repository is allowed, committing them to a public one is strictly prohibited. Not only is it against our terms of service, but it also exposes the software and its protection techniques to third parties. These third parties might be interested in reverse engineering our checks, thus making your apps more vulnerable.</p> <p>In case your usecase is to only commit to a private git repository, you can set the <code>allowLocalFiles</code> option in your <code>dexguard</code> block to <code>true</code>.</p>"},{"location":"setup/repository.html","title":"Maven Repository","text":"<p>This page will describe how to configure access to the secure maven repository giving access to various artifacts included in the DexGuard distribution.</p>"},{"location":"setup/repository.html#configuring-the-secure-maven-repository-dependencies","title":"Configuring the secure maven repository / dependencies","text":"<p>For the DexGuard Gradle plugin, you can include the following in your root level Gradle files:</p> Kotlin - Plugins DSLGroovy - Plugins DSLKotlin - BuildscriptGroovy - Buildscript <p>settings.gradle.kts <pre><code>pluginManagement {\n    repositories {\n        maven {\n            credentials {\n                username = \"maven\"\n                password = \"${extra[\"dexguardMavenToken\"]}\"\n            }\n            url = uri(\"https://maven.guardsquare.com\")\n            // Only search for artifacts with groupId \"com.guardsquare.*\".\n            // Supported since Gradle 5.1.\n            content {\n                includeGroupByRegex(\"com\\\\.guardsquare.*\")\n            }\n            authentication {\n                create&lt;BasicAuthentication&gt;(\"basic\")\n            }\n        }\n    }\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"9.10.5\"\n\n[plugins]\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> <p>settings.gradle <pre><code>pluginManagement {\n    repositories {\n        maven {\n            credentials {\n                username = \"maven\"\n                password = \"${dexguardMavenToken}\"\n            }\n            url \"https://maven.guardsquare.com\"\n            // Only search for artifacts with groupId \"com.guardsquare.*\".\n            // Supported since Gradle 5.1.\n            content {\n                includeGroupByRegex \"com\\\\.guardsquare.*\"\n            }\n            authentication {\n                basic(BasicAuthentication)\n            }\n        }\n    }\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"9.10.5\"\n\n[plugins]\ndexguard = { id = \"com.guardsquare.dexguard\", version.ref = \"dexguard\" }\n</code></pre></p> <p>build.gradle.kts <pre><code>buildscript {\n    repositories {\n        maven {\n            credentials {\n                username = \"maven\"\n                password = \"${dexguardMavenToken}\"\n            }\n            url = uri(\"https://maven.guardsquare.com\")\n            // Only search for artifacts with groupId \"com.guardsquare.*\".\n            // Supported since Gradle 5.1.\n            content {\n                includeGroupByRegex(\"com\\\\.guardsquare.*\")\n            }\n            authentication {\n                create&lt;BasicAuthentication&gt;(\"basic\")\n            }\n        }\n    }\n    dependencies {\n        classpath(\"com.guardsquare:dexguard-gradle-plugin:9.10.5\")\n    }\n}\n</code></pre></p> <p>build.gradle <pre><code>buildscript {\n    repositories {\n        maven {\n            credentials  {\n                username = \"maven\"\n                password = \"${dexguardMavenToken}\"\n            }\n            url \"https://maven.guardsquare.com\"\n            // Only search for artifacts with groupId \"com.guardsquare.*\".\n            // Supported since Gradle 5.1.\n            content {\n                includeGroupByRegex \"com\\\\.guardsquare.*\"\n            }\n            authentication {\n                basic(BasicAuthentication)\n            }\n        }\n    }\n    dependencies {\n        classpath 'com.guardsquare:dexguard-gradle-plugin:9.10.5'\n    }\n}\n</code></pre></p> <p>For project scope dependencies in Gradle 6.8 and up, you can include the following in your root level <code>settings.gradle(.kts)</code> file:</p> KotlinGroovy <p>settings.gradle.kts <pre><code>dependencyResolutionManagement {\n    repositories {\n        maven {\n            credentials {\n                username = \"maven\"\n                password = \"${extra[\"dexguardMavenToken\"]}\"\n            }\n            url = uri(\"https://maven.guardsquare.com\")\n            // Only search for artifacts with groupId \"com.guardsquare.*\".\n            // Supported since Gradle 5.1.\n            content {\n                includeGroupByRegex(\"com\\\\.guardsquare.*\")\n            }\n            authentication {\n                create&lt;BasicAuthentication&gt;(\"basic\")\n            }\n        }\n    }\n}\n</code></pre></p> <p>settings.gradle <pre><code>dependencyResolutionManagement {\n    repositories {\n        maven {\n            credentials {\n                username = \"maven\"\n                password = \"${dexguardMavenToken}\"\n            }\n            url \"https://maven.guardsquare.com\"\n            // Only search for artifacts with groupId \"com.guardsquare.*\".\n            // Supported since Gradle 5.1.\n            content {\n                includeGroupByRegex \"com\\\\.guardsquare.*\"\n            }\n            authentication {\n                basic(BasicAuthentication)\n            }\n        }\n    }\n}\n</code></pre></p> <p>For project scope dependencies in Gradle 6.7 and below, you can include the following in your module level <code>build.gradle(.kts)</code> file:</p> KotlinGroovy <pre><code>repositories {\n    maven {\n        credentials {\n            username = \"maven\"\n            password = \"${properties[\"dexguardMavenToken\"]}\"\n        }\n        url = uri(\"https://maven.guardsquare.com\")\n        // Only search for artifacts with groupId \"com.guardsquare.*\",\n        // supported since gradle 5.1.\n        content {\n            includeGroupByRegex(\"com\\\\.guardsquare.*\")\n        }\n        authentication {\n            create&lt;BasicAuthentication&gt;(\"basic\")\n        }\n    }\n}\n</code></pre> <pre><code>repositories {\n    maven {\n        credentials {\n            username = \"maven\"\n            password = \"${dexguardMavenToken}\"\n        }\n        url \"https://maven.guardsquare.com\"\n        // Only search for artifacts with groupId \"com.guardsquare.*\",\n        // supported since gradle 5.1.\n        content {\n            includeGroupByRegex \"com\\\\.guardsquare.*\"\n        }\n        authentication {\n            basic(BasicAuthentication)\n        }\n    }\n}\n</code></pre> <p>In either case, you can then include the following in your module level <code>build.gradle(.kts)</code> file:</p> Kotlin / Groovy - version catalogKotlin / Groovy - string notation <p>build.gradle(.kts)<pre><code>dependencies {\n    // Example: include the DexGuard runtime library.\n    implementation(libs.dexguard.runtime)\n}\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndexguard = \"9.10.5\"\n\n[libraries]\ndexguard-runtime = { group = \"com.guardsquare\", name = \"dexguard-runtime\", version.ref = \"dexguard\" }\n</code></pre></p> build.gradle(.kts)<pre><code>dependencies {\n    // Example: include the DexGuard runtime library.\n    implementation('com.guardsquare:dexguard-runtime:9.10.5')\n}\n</code></pre> <p>and in <code>gradle.properties</code> define the Maven access token:</p> <pre><code>dexguardMavenToken = &lt;token&gt;\n</code></pre> <p>The Maven username is always <code>maven</code>. The Maven access token can be obtained as follows:</p> <ol> <li>Log in to the Guardsquare platform.</li> <li>Go to your \u201cTeam Settings\u201d page using the menu button on the top left.</li> <li>Go to the \"Automation\" tab using the button on the left.</li> <li>At the top of this page, you should see your Maven access token. If you don't already have one, you can generate it by clicking the blue \u201cGenerate\u201d button.</li> <li>Afterward, you can view your token by clicking the eye icon.</li> </ol> <p>Don't commit your Maven access token credentials!</p> <p>In order to avoid the need to commit the Maven access token credentials to source code repositories,  you can define an empty property (<code>dexguardMavenToken=</code>) in your project-specific <code>gradle.properties</code> file and define the actual token in the user specific <code>gradle.properties</code> file located under <code>~/.gradle</code>. Gradle will replace this property with the one defined in the user properties.</p>"},{"location":"setup/repository.html#available-artifacts","title":"Available artifacts","text":"Artifact Maven coordinates DexGuard <code>com.guardsquare:dexguard:9.10.5</code> DexGuard Gradle plugin <code>com.guardsquare:dexguard-gradle-plugin:9.10.5</code> DexGuard runtime library <code>com.guardsquare:dexguard-runtime:9.10.5</code> DexGuard native loader <code>com.guardsquare:dexguard-nativeloader:9.10.5</code> DexGuard annotations <code>com.guardsquare:dexguard-annotations:9.10.5</code> DexGuard RASP library <code>com.guardsquare:dexguard-rasp:9.10.5</code> ReTrace <code>com.guardsquare:retrace:9.10.5</code>"},{"location":"setup/standalone.html","title":"Standalone","text":"<p>DexGuard is a command line tool for processing Android applications and libraries. The tool can be invoked as shown below:</p> Linux/macOSWindows <pre><code>bin/dexguard.sh &lt;options&gt; ...\n</code></pre> <pre><code>bin\\dexguard &lt;options&gt; ...\n</code></pre> <p>Typically, most of the options you pass to DexGuard will be put in a separate configuration file, <code>dexguard-configuration.pro</code> for example. You can then invoke DexGuard with this configuration file using the <code>include</code> option:</p> Linux/macOSWindows <pre><code>bin/dexguard.sh -include dexguard-configuration.pro\n</code></pre> <pre><code>bin\\dexguard -include dexguard-configuration.pro\n</code></pre> <p>You don't have to put all of your options in the file when you call DexGuard like this, and you can also specify multiple files if you like.</p> <p>Shorthand notation @</p> <p>When including files on the command line, you can use the <code>@</code> symbol instead of <code>-include</code> as a shorthand: <pre><code>bin/dexguard.sh @dexguard-configuration.pro\n</code></pre></p>"},{"location":"setup/standalone.html#basic-configuration","title":"Basic configuration","text":"<p>The basic configuration required for DexGuard to run properly consists of the following:</p> <ul> <li>The binary to process.</li> <li>Name and location of the output file.</li> <li>The default configuration to use.</li> <li>The compile-only dependencies.</li> <li>(optional) The signing information.</li> </ul>"},{"location":"setup/standalone.html#the-binary-to-process","title":"The binary to process","text":"<p>You have to pass in the file you want DexGuard to process using the <code>-injars</code> option. The file types currently supported by DexGuard are:</p> <ul> <li>Android application (<code>.apk</code>, <code>.aab</code>)</li> <li>Android library (<code>.aar</code>)</li> </ul> <pre><code>-injars path/to/my-application.apk\n</code></pre>"},{"location":"setup/standalone.html#name-and-location-of-the-output-file","title":"Name and location of the output file","text":"<p>This will tell DexGuard where to output the protected application or library, and what name to give it. The <code>-outjars</code> option is used for this purpose.</p> <pre><code>-outjars path/to/output-application.apk\n</code></pre>"},{"location":"setup/standalone.html#the-default-configuration-to-use","title":"The default configuration to use","text":"<p>DexGuard includes several default configurations that contain rules to configure DexGuard to process a particular type of input. It also contains rules for well known and popular libraries. A full list of available default configurations and a description for each of them can be found on the default configurations page.</p> <p>The default configurations are packaged inside DexGuard and can be referred to by prefixing their name with <code>/lib/</code>. For example, if you want to refer to the <code>dexguard-release.pro</code> default configuration you would use <code>/lib/dexguard-release.pro</code>.</p> <pre><code>-include /lib/dexguard-release.pro\n</code></pre> <p>The include option can also be used inside a configuration file.</p>"},{"location":"setup/standalone.html#the-compile-only-dependencies","title":"The compile-only dependencies","text":"<p>Not all the application or library dependencies end up in the final binary. These dependencies are necessary for DexGuard to reason about the code and should be supplied to ensure the best possible obfuscation. For application projects these are APIs that are expected to be on the target device, like the Android standard libraries. For library projects these are almost all dependencies, except for local jar dependencies.</p> <p>The Android standard libraries can be passed to DexGuard with the <code>-androidsdk</code> option:</p> <pre><code>-libraryjars path/to/android/sdk/platforms/android-XX/android.jar\n</code></pre> <p>Other dependencies can be passed on to DexGuard with the <code>-libraryjars</code> option:</p> <pre><code>-libraryjars path/to/other_dependency.jar\n</code></pre>"},{"location":"setup/standalone.html#example-of-a-typical-setup","title":"Example of a typical setup","text":"<p>A typical setup will look something like this:</p> <p>dexguard-configuration.txt</p> ApplicationLibrary <pre><code>-injars path/to/my-application.apk\n-outjars path/to/obfuscated-application.apk\n-include /lib/dexguard-release.pro\n-androidsdk path/to/android/sdk/\n\n# Signing info.    \n-keystore path/to/keystore\n-keyalias your_key_alias\n-keypassword your_key_password\n-keystorepassword your_keystore_password\n\n# My application-specific keep rules go here.\n...\n</code></pre> <pre><code>-injars path/to/my-application.aar\n-outjars path/to/obfuscated-application.aar\n-include /lib/dexguard-library-release.pro\n-androidsdk path/to/android/sdk/\n\n-libraryjars path/to/dependency1.aar\n...\n-libraryjars path/to/dependencyN.jar\n\n# Signing info.    \n-keystore path/to/keystore\n-keyalias your_key_alias\n-keypassword your_key_password\n-keystorepassword your_keystore_password\n\n# My application-specific keep rules go here.\n...\n</code></pre> <p>This allows you to call DexGuard like so:</p> Linux/macOSWindows <pre><code>bin/dexguard.sh @dexguard-configuration.txt\n</code></pre> <pre><code>bin\\dexguard @dexguard-configuration.txt\n</code></pre> <p>This <code>dexguard-configuration.txt</code> file has all of your configuration neatly stored together. You can add any project-specific rules you need either in the same file or in another file using the <code>-include</code> option.</p>"},{"location":"setup/standalone.html#configuration-file","title":"Configuration file","text":"<p>The DexGuard configuration file format is a text file with a list of DexGuard command line options in it. Options can contain filters to allow or deny certain names/files/classes/packages to be processed by DexGuard. For a full list and detailed explanation of all the options, take a look at the reference guide.</p> <p>The format supports comments. A comment starts with a <code>#</code> symbol and continues until the end of the line.</p> <p>Extra whitespace between words and delimiters is ignored. File names with spaces or special characters should be quoted with single or double quotes.</p> <p>The order of the options is generally irrelevant. However, do note specifying the same option multiple times will concatenate the passed parameters. Changing the order of these options will also change the resulting list as a consequence.</p> <p>For example, the following rules</p> <pre><code>-keepresourcefiles !lib/*/libsecret.so\n-keepresourcefiles lib/*/lib*.so\n</code></pre> <p>are equivalent to</p> <pre><code>-keepresourcefiles !lib/*/libsecret.so,lib/*/lib*.so\n</code></pre> <p>This rule will keep all native libraries, except for <code>libsecret.so</code>. If you were to flip the order of the rules, they would be equivalent to</p> <pre><code>-keepresourcefiles lib/*/lib*.so,!lib/*/libsecret.so\n</code></pre> <p>which keeps all native libraries, including <code>libsecret.so</code>.</p>"},{"location":"setup/standalone.html#consumer-rules","title":"Consumer rules","text":"<p>When creating an Android library, the developer has the option of adding consumer rules to it. Consumer rules are ProGuard keep rules that are necessary for the library to function when it gets obfuscated as part of the application that integrates it. This means, when you use DexGuard to post-process your application, you should apply these consumer rules to guarantee proper functioning of the library code you use.</p> <p>Consumer rules are contained within text files that can be found in both Android libraries and Java jars.</p> <ul> <li>Inside Android libraries they are contained within the file <code>proguard.txt</code>   which can be found in the root of the archive.</li> <li>In Java jar files they are located in files with the <code>.pro</code> extension inside   the directory <code>META-INF/proguard</code>.</li> </ul> <p>You should extract these files from your dependencies and either paste their contents into your configuration file or include the files using the <code>-include</code> option.</p> <p>Consumer rules are only relevant when processing <code>.apk</code> or <code>.aab</code> files.</p>"},{"location":"setup/standalone.html#android-sdk-libraries","title":"Android SDK libraries","text":"<p>The Android SDK contains the Android standard API which can be used by your application or library - this is <code>android.jar</code>. You should add this library as a dependency in your DexGuard configuration:</p> <pre><code>-libraryjars path/to/android/sdk/platforms/android-XX/android.jar\n</code></pre> <p>Some other dependencies might also be provided by the Android SDK, such as the legacy Apache HTTP library (<code>org.apache.http.legacy.jar</code>).</p>"},{"location":"setup/standalone.html#mapping-files","title":"Mapping files","text":"<p>DexGuard can print out certain files containing some information on how DexGuard affected your application or library. These files aren't printed by default and have to be enabled with their corresponding option. Below are some examples:</p> <pre><code>-printmapping path/to/mapping.txt\n-printresourcemapping path/to/resourcemapping.txt\n-printresourcefilenamemapping path/to/resourcefilenamemapping.txt\n-printseeds path/to/seeds.txt\n-printusage path/to/usage.txt\n-printresourceusage path/to/resourceusage.txt\n-printinjectmapping path/to/injectmapping.txt\n-printclassencryption path/to/classencryption.txt\n-printstringencryption path/to/stringencryption.txt\n-printassetencryption path/to/assetencryption.txt\n-printresourceencryption path/to/resourceencryption.txt\n-printnativelibraryencryption path/to/nativelibraryencryption.txt\n-printmaindexlist path/to/maindexlist.txt\n</code></pre> <p>You can read the reference guide for more information about these options and the files they produce.</p>"},{"location":"setup/standalone.html#signing-configuration","title":"Signing configuration","text":"<p>DexGuard has the ability to sign your application (<code>.apk</code>, <code>.aab</code>). In order to do so, it will need the signing configuration, which can be specified as shown below:</p> <pre><code>-keystore path/to/my/keystore.ks\n-keystorepassword mykeystorepassword\n-keyalias myalias\n-keypassword mykeypassword\n</code></pre> <p>You may not want to put this, especially the passwords, in your main configuration file. One suggestion is to put these rules in a separate configuration file and include it in your main configuration file. Alternatively, if you don't want to check this file into source control or don't want to have to create the file for each checkout, you can pass the file to DexGuard directly:</p> Linux/macOSWindows <pre><code>bin/dexguard.sh -include dexguard-configuration.pro -include signing-config.pro\n</code></pre> <pre><code>bin\\dexguard -include dexguard-configuration.pro -include signing-config.pro\n</code></pre> <p>You can also choose to pass in the options directly instead of putting them in a file:</p> Linux/macOSWindows <pre><code>bin/dexguard.sh -include dexguard-configuration.pro \\\n                -keystore path/to/my/keystore.ks \\\n                -keystorepassword mykeystorepassword \\\n                -keyalias myalias \\\n                -keypassword mykeypassword\n</code></pre> <pre><code>bin\\dexguard -include dexguard-configuration.pro ^\n             -keystore path/to/my/keystore.ks ^\n             -keystorepassword mykeystorepassword ^\n             -keyalias myalias ^\n             -keypassword mykeypassword\n</code></pre>"},{"location":"setup/standalone.html#default-debug-keystore","title":"Default debug keystore","text":"<p>The default debug keystore shipped with the Android SDK can be found in a hidden generated directory called <code>.android</code> in your home folder. The file has the name <code>debug.keystore</code>. You can use this keystore in your DexGuard signing configuration like so:</p> <pre><code>-keystore &lt;user.home&gt;/.android/debug.keystore\n-keystorepassword android\n-keyalias androiddebugkey\n-keypassword android\n</code></pre>"},{"location":"setup/upgrading.html","title":"Upgrading","text":""},{"location":"setup/upgrading.html#upgrading-to-9.5","title":"From DexGuard 9.4.x","text":""},{"location":"setup/upgrading.html#gradle-configuration-updates","title":"Gradle Configuration Updates","text":"<ul> <li>If you are using the <code>embed</code> fat AAR functionality of DexGuard, you should stop using this feature and use an open-source implementation instead. DexGuard will still be able to protect fat AARs.</li> <li>If you are using AGP 3.x.x, please update to AGP 4+.</li> <li>If you use AGP 7.2+ the runtime-invisible annotation workaround will be enabled by default, you can disable R8 again.</li> </ul> <p>Hilt Incompatibility</p> <p>Due to an incompatibility with the Hilt Gradle plugin, the runtime-invisible annotation workaround will be disabled automatically for application projects that use it. In these cases, you still need the R8 workaround. This detection only happens starting in DexGuard 9.5.2, in 9.5.0 and 9.5.1 the DexGuard Gradle plugin will fail the build with an error. Please update to resolve the issue.</p> <ul> <li>It is now no longer required to fat-pack the DexGuard runtime into an SDK when preparing a releasable artifact. Instead, you can specify the DexGuard runtime as a <code>releaseCompileOnly</code> dependency. DexGuard will then inject the necessary artifacts into your SDK during processing. Note that since the necessary artifacts are added during processing, the unprotected version of your SDK will not be functional. If this is an issue, you can instead make the DexGuard runtime an <code>implementation</code> dependency. However, please take into account that when using the maven publish plugin, this will add the DexGuard runtime as a dependency in your SDK's pom file, which then has to be filtered out. For more information, please visit the following known issues page.</li> <li>If your project contained a dependency on the ThreatCast Client, you must remove this dependency. This dependency is now automatically added by DexGuard during processing.</li> </ul>"},{"location":"setup/upgrading.html#dexguard-configuration-updates","title":"DexGuard Configuration Updates","text":"<ul> <li>If you are explicitly using <code>apktamper</code> in your configuration, rename this to <code>apptamper</code>.</li> <li>If you are using <code>-pack</code>, <code>-splitdexfile</code>, <code>-dontdiversify</code>, <code>-dontdiversifyrasp</code> or <code>-pluginjars</code> in your configuration, these options should be removed.</li> </ul>"},{"location":"setup/upgrading.html#from-proguard-or-r8","title":"From ProGuard or R8","text":"<p>Many developers already optimize the code in their projects with ProGuard or with R8. DexGuard is backward compatible with ProGuard and R8:</p> <ul> <li>It understands all ProGuard configuration, plus additional options.</li> <li>It provides the same functionality, plus more optimizations and protection   techniques.</li> </ul> <p>The main difference in execution is that DexGuard post-processes your application or library, rather than integrating itself into the build process. A Gradle plugin is provided to perform this step during the Gradle build.</p> <p>This section explains how you can upgrade your ProGuard or R8 setup to DexGuard in a few quick steps using the DexGuard Gradle plugin.</p>"},{"location":"setup/upgrading.html#upgrading-your-gradle-configuration","title":"Upgrading Your Gradle Configuration","text":"<p>If your project already has ProGuard or R8 enabled, you should first disable it. The Android build process should produce an unobfuscated application or library that DexGuard can process.</p> <p>Your app module <code>build.gradle(.kts)</code> file might look something like this:</p> KotlinGroovy <pre><code>plugins {\n    id(\"com.android.application\")\n}\n\nandroid {\n    buildTypes {\n        getByName(\"debug\") {\n            isMinifyEnabled   = false\n            isShrinkResources = false\n        }\n        getByName(\"release\") {\n            isMinifyEnabled   = true\n            isShrinkResources = true\n            proguardFile(getDefaultProguardFile(\"proguard-android.txt\"))\n            proguardFile(\"proguard-project.txt\")\n        }\n    }\n}\n</code></pre> <pre><code>apply plugin: 'com.android.application'\n\nandroid {\n    buildTypes {\n        debug {\n            minifyEnabled false\n            shrinkResources false\n        }\n        release {\n            minifyEnabled true\n            shrinkResources true\n            proguardFile getDefaultProguardFile('proguard-android.txt')\n            proguardFile 'proguard-project.txt'\n        }\n    }\n}\n</code></pre> <p>You should remove the <code>proguardFile</code> configurations and set <code>minifyEnabled</code> and <code>shrinkResources</code> to <code>false</code>.</p> KotlinGroovy <pre><code>plugins {\n    id(\"com.android.application\")\n} \n\nandroid {\n    buildTypes {\n        getByName(\"debug\") {\n            isMinifyEnabled   = false\n            isShrinkResources = false\n        }\n        getByName(\"release\") {\n            isMinifyEnabled   = false\n            isShrinkResources = false\n        }\n    }\n}\n</code></pre> <pre><code>apply plugin: 'com.android.application'\n\nandroid {\n    buildTypes {\n        debug {\n            minifyEnabled false\n            shrinkResources false\n        }\n        release {\n            minifyEnabled false\n            shrinkResources false\n        }\n    }\n}\n</code></pre> <p>After that, you can follow the quickstart section to configure the DexGuard Gradle plugin.</p>"},{"location":"setup/upgrading.html#executing-dexguard","title":"Executing DexGuard","text":"<p>DexGuard outputs location</p> <p>The protected artefact is placed alongisde the unprotected one and has  a <code>-protected</code> suffix in the name.</p> <p>All other output files are collected in the <code>build/outputs/dexguard</code> directory. </p> <p>A major difference between executing ProGuard or R8 and DexGuard 9.10 is that the protected application or library is built separately from the original. This means that the original will still be in the standard Android build location e.g. for a release application (APK) variant in <code>build/outputs/apk/release/</code>  DexGuard will produce the corresponding protected application in the same location and add a <code>-protected</code> suffix  to the name.</p> <p>DexGuard will still be executed when you run the <code>assemble</code> task. For example, <code>./gradlew assembleRelease</code> will build the unobfuscated application and then execute DexGuard to build the protected application.</p> <p><code>install</code> task</p> <p>You can no longer use the <code>install</code> task to install an application as this will install the unprotected application, instead you can use <code>adb</code> e.g. <code>adb install build/outputs/apk/release/MyApp-release-protected.apk</code>.</p>"},{"location":"setup/upgrading.html#upgrading-your-proguard-or-r8-configuration","title":"Upgrading Your ProGuard or R8 Configuration","text":"<p>Since DexGuard understands and needs the same fundamental options to make sure your app or library works (<code>-keep</code>, <code>-keepattributes</code>,...), your existing ProGuard or R8 configuration is a great start.</p> <ol> <li> <p>Make sure the application still works. You can test your processed    application right away. Since DexGuard not only processes the bytecode, but    also the Android manifest, resources, resource files, asset files, and    native libraries, it may need a few additional <code>-keep</code> options:</p> Option ... may be necessary for Java construct <code>-keep</code> <code>Class.forName</code> <code>-keepresources</code> <code>Resources#getIdentifier</code> <code>-keepresourcefiles</code> <code>System.loadLibrary</code>,... <code>-keepresourcexmlattributenames</code> <code>AttributeSet#getAttributeName</code>, <code>AttributeSet#getAttributeValue</code> <code>-keepresourcexmlelements</code> <code>ApplicationInfo#metaData</code>, <code>Bundle#getString</code>,... <p>Without the proper options, you may still see ResourceNotFoundExceptions, NullPointerExceptions, etc., if DexGuard unwittingly removes some expected resources. The option <code>-addconfigurationdebugging</code> can help to quickly find any missing options. It lets DexGuard instrument the code so the application prints out suggestions in the logcat, which you can just copy and paste into your configuration.</p> </li> <li> <p>Tune the initial configuration. DexGuard comes with tuned default    configuration for the Android runtime and for common libraries, such as the    Android support library, Dagger, and GSON. These libraries are listed in    the Examples section. Chances are that you can simplify your    own project-specific configuration accordingly. If you still have <code>-keep</code>    options for the Android runtime or for any of the listed libraries, try    removing them or commenting them out. DexGuard's tuned configuration    generally allows for more optimizations and better obfuscation.</p> </li> <li> <p>Add options to further harden the application. DexGuard by default    applies basic name obfuscation to the code and resources, but is only the    start. You should still identify sensitive parts in your application and    further harden those. The Protection Overview section    provides a useful checklist. The following options may be relevant:</p> Option <code>-encryptassetfiles</code> <code>-encryptclasses</code> <code>-encryptmetadata</code> <code>-encryptnativelibraries</code> <code>-encryptresourcefiles</code> <code>-encryptresources</code> <code>-encryptstrings</code> <code>-obfuscatecode</code> <code>-virtualizecode</code> <code>-obfuscatejavascript</code> <code>-accessthroughreflection</code> <code>-assumenosideeffects</code> </li> </ol> <p>The Usage section provides more details, with the new options compared to ProGuard or R8 highlighted. For more information on where to specify these rules and how to organise them, refer to the DexGuard standalone page.</p>"},{"location":"setup/upgrading.html#from-dexguard-8x","title":"From DexGuard 8.x","text":"<p>The main difference in DexGuard 9.10 is that DexGuard now  post-processes your application or library, rather than integrating itself into the build process. This means that the DexGuard input is now the unobfuscated application, app bundle or library produced by the standard Android build process.</p> <p>This section explains how you can upgrade your DexGuard 8.x setup to DexGuard 9.10 in a few quick steps using the DexGuard Gradle plugin.</p>"},{"location":"setup/upgrading.html#upgrading-your-gradle-configuration_1","title":"Upgrading Your Gradle Configuration","text":"<p>Your app module <code>build.gradle(.kts)</code> file might look something like this:</p> KotlinGroovy <pre><code>buildscript {\n    repositories {\n        maven {\n            url = uri(\"/path/to/DexGuard/lib\") \n        }\n    }\n    dependencies {\n        classpath(\"com.guardsquare.dexguard:dexguard-gradle-plugin:+\")\n    }\n}\n\nplugins {\n    id(\"dexguard\")\n}\n\nandroid {\n    buildTypes {\n        getByName(\"debug\") {\n            proguardFile(extraDexGuardMethods.getDefaultDexGuardFile(\"dexguard-debug.pro\"))\n            proguardFile(\"dexguard-project.txt\")\n            proguardFile(\"proguard-project.txt\")\n        }\n        getByName(\"release\") {\n            proguardFile(extraDexGuardMethods.getDefaultDexGuardFile(\"dexguard-release.pro\"))\n            proguardFile(\"dexguard-project.txt\")\n            proguardFile(\"proguard-project.txt\")\n        }\n    }\n}\n</code></pre> <pre><code>buildscript {\n    repositories {\n        maven {\n            url '/path/to/DexGuard/lib'     \n        }\n    }\n    dependencies {\n        classpath 'com.guardsquare.dexguard:dexguard-gradle-plugin:+'\n    }\n}\n\napply plugin: 'dexguard'\n\nandroid {\n    buildTypes {\n        debug {\n            proguardFile getDefaultDexGuardFile('dexguard-debug.pro')\n            proguardFile 'dexguard-project.txt'\n            proguardFile 'proguard-project.txt'\n        }\n        release {\n            proguardFile getDefaultDexGuardFile('dexguard-release.pro')\n            proguardFile 'dexguard-project.txt'\n            proguardFile 'proguard-project.txt'\n        }\n    }\n}\n</code></pre> <p>You should update the buildscript dependency to the new plugin: <pre><code>// Old plugin\n\"com.guardsquare.dexguard:dexguard-gradle-plugin:+\"\n// New plugin\n\"com.guardsquare:dexguard-gradle-plugin:+\"\n</code></pre></p> Manual download (Kotlin)Manual download (Groovy)Maven (Kotlin)Maven (Groovy) <pre><code>buildscript {\n    repositories {\n        maven {\n            url = uri(\"/path/to/DexGuard/lib\") \n        }\n    }\n    dependencies {\n        classpath(\"com.guardsquare:dexguard-gradle-plugin:+\")\n    }\n}\n</code></pre> <pre><code>buildscript {\n    repositories {\n        maven {\n            url '/path/to/DexGuard/lib'\n        }\n    }\n    dependencies {\n        classpath 'com.guardsquare:dexguard-gradle-plugin:+'\n    }\n}\n</code></pre> <pre><code>buildscript {\n    repositories {\n        maven {   // For the DexGuard Gradle plugin jar.\n            credentials {\n                username = \"maven\"\n                password = \"${dexguardMavenToken}\"\n            }\n            url = uri(\"https://maven.guardsquare.com\")\n            // Only search for artifacts with groupId \"com.guardsquare.*\",\n            // Supported since gradle 5.1.\n            content {\n                includeGroupByRegex(\"com\\\\.guardsquare.*\")\n            }\n            authentication {\n                create&lt;BasicAuthentication&gt;(\"basic\")\n            }\n        }\n    }\n    dependencies {\n        classpath(\"com.guardsquare:dexguard-gradle-plugin:9.10.5\")\n    }\n}\n</code></pre> <pre><code>buildscript {\n    repositories {\n        maven {\n            credentials {\n                username = \"maven\"\n                password = \"${dexguardMavenToken}\"\n            }\n            url \"https://maven.guardsquare.com\"\n            // Only search for artifacts with groupId \"com.guardsquare.*\",\n            // Supported since gradle 5.1.\n            content {\n                includeGroupByRegex \"com\\\\.guardsquare.*\"\n            }\n            authentication {\n                basic(BasicAuthentication)\n            }\n        }\n    }\n    dependencies {\n        classpath 'com.guardsquare:dexguard-gradle-plugin:9.10.5'\n    }\n}\n</code></pre> <p>You should remove the <code>proguardFile</code> configurations and set <code>minifyEnabled</code> and <code>shrinkResources</code> to <code>false</code>.</p> KotlinGroovy <pre><code>plugins {\n    id(\"dexguard\")\n}\n\nandroid {\n    buildTypes {\n        getByName(\"debug\") {\n            isMinifyEnabled   = false\n            isShrinkResources = false\n        }\n        getByName(\"release\") {\n            isMinifyEnabled   = false\n            isShrinkResources = false\n        }\n    }\n}\n</code></pre> <pre><code>apply plugin: 'dexguard'\n\nandroid {\n    buildTypes {\n        debug {\n            minifyEnabled false\n            shrinkResources false\n        }\n        release {\n            minifyEnabled false\n            shrinkResources false\n        }\n    }\n}\n</code></pre> <p>You can specify your DexGuard configurations in a new <code>dexguard</code> block:</p> Manual download (Kotlin)Manual download (Groovy)Maven (Kotlin)Maven (Groovy) <pre><code>android {\n    buildTypes {\n        getByName(\"debug\") {\n            isMinifyEnabled   = false\n            isShrinkResources = false                \n        }\n        getByName(\"release\") {\n            isMinifyEnabled   = false\n            isShrinkResources = false\n        }\n    }\n}\n\ndexguard {\n    path = \"/path/to/DexGuard\"\n    configurations {\n        register(\"debug\") {\n            defaultConfiguration(\"dexguard-debug.pro\")\n            configuration(\"dexguard-project.txt\")\n            configuration(\"proguard-project.txt\")\n        }            \n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n            configuration(\"dexguard-project.txt\")\n            configuration(\"proguard-project.txt\")\n        }\n    }\n}\n</code></pre> <pre><code>android {\n    buildTypes {\n        debug {\n            minifyEnabled false\n            shrinkResources false\n        }\n        release {\n            minifyEnabled false\n            shrinkResources false\n        }\n    }\n}\n\ndexguard {\n    path = '/path/to/DexGuard'\n    configurations {\n        debug {\n            defaultConfiguration 'dexguard-debug.pro'\n            configuration 'dexguard-project.txt'\n            configuration 'proguard-project.txt'\n        }\n        release {\n            defaultConfiguration 'dexguard-release.pro'\n            configuration 'dexguard-project.txt'\n            configuration 'proguard-project.txt'\n        }\n    }\n}\n</code></pre> <pre><code>android {\n    buildTypes {\n        getByName(\"debug\") {\n            isMinifyEnabled = false\n            isShrinkResources = false\n        }\n        getByName(\"release\") {\n            isMinifyEnabled = false\n            isShrinkResources = false\n        }\n    }\n}\n\ndexguard {\n    version = \"9.10.+\"\n    configurations {\n        register(\"debug\") {\n            defaultConfiguration(\"dexguard-debug.pro\")\n            configuration(\"dexguard-project.txt\")\n            configuration(\"proguard-project.txt\")\n        }\n        register(\"release\") {\n            defaultConfiguration(\"dexguard-release.pro\")\n            configuration(\"dexguard-project.txt\")\n            configuration(\"proguard-project.txt\")\n        }\n    }\n}\n</code></pre> <pre><code>android {\n    buildTypes {\n        debug {\n            minifyEnabled false\n            shrinkResources false\n        }\n        release {\n            minifyEnabled false\n            shrinkResources false\n        }\n    }\n}\n\ndexguard {\n    version = '9.10.+'\n    configurations {\n        debug {\n            defaultConfiguration 'dexguard-debug.pro'\n            configuration 'dexguard-project.txt'\n            configuration 'proguard-project.txt'\n        }\n        release {\n            defaultConfiguration 'dexguard-release.pro'\n            configuration 'dexguard-project.txt'\n            configuration 'proguard-project.txt'\n        }\n    }\n}\n</code></pre> <p>See the Gradle plugin page for more details on configuring the DexGuard plugin.</p>"},{"location":"setup/upgrading.html#version-check-plugin","title":"Version Check Plugin","text":"<p>DexGuard 8.x came with a Gradle plugin, 'dexguard-versioncheck', which checks if you are using the latest available DexGuard version. In DexGuard 9 this plugin has been removed, so you can simply remove the plugin from your build.gradle file</p> Maven (Kotlin)Maven (Groovy) <pre><code>apply plugin: 'dexguard-versioncheck'\n</code></pre> <pre><code>apply plugin: 'dexguard-versioncheck'\n</code></pre> <p>You can use the following replacements of the 'dexguard-versioncheck' plugin to ensure you always use an up-to-date version of DexGuard:</p> <ul> <li>Automatic updates through maven.</li> <li>Warnings in console and protection report.</li> </ul> <p>To automatically upgrade DexGuard you can configure DexGuard's plugin to fetch the latest release through maven by providing the <code>version</code> option in the <code>dexguard</code> block. Additionally, you will need to configure your buildscript to use Guardsquare's maven repository.</p> <p>DexGuard will print out a warning to it's console output when  a newer version is available. The protection report will contain a banner when a newer version is available.</p>"},{"location":"setup/upgrading.html#license","title":"License","text":"<p>Previously, the DexGuard license file could be set via a system property by adding the following in the <code>gradle.properties</code> file:</p> <pre><code>systemProp.dexguard.license=/path/to/dexguard-license.txt\n</code></pre> <p>This has been replaced with a <code>license</code> option in the <code>dexguard</code> block:</p> KotlinGroovy <pre><code>dexguard {\n    license = \"/path/to/dexguard-license.txt\"\n// ...\n}\n</code></pre> <pre><code>dexguard {\n    license = \"/path/to/dexguard-license.txt\"\n// ...\n}\n</code></pre> <p>DexGuard will also still look for your license in your home folder and in the environment variable <code>DEXGUARD_LICENSE</code>; see the quick start page for more details.</p>"},{"location":"setup/upgrading.html#setting-system-properties-or-arguments-for-the-jvm-running-dexguard","title":"Setting system properties or arguments for the JVM running DexGuard","text":"<p>Previously, the <code>gradle.properties</code> file could be used to specify system properties that  should be taken into account by DexGuard, or to specify arguments to the JVM that  runs DexGuard.</p> <p>As of DexGuard 9.0, such options should be provided via the new <code>jvmArgs</code>  property of the DexGuard block instead. An exception to this rule is the <code>dexguard.license</code> system property, which has been promoted to a standalone property of the DexGuard block instead, as described in  the previous section.</p> <p>For example, you may have a <code>gradle.properties</code> file as follows:</p> <pre><code># Set the JVM heap size\norg.gradle.jvmargs=-Xmx2048M\n\n# Set a system property for DexGuard\nsystemProp.allow.incomplete.class.hierarchy=true\n</code></pre> <p>These options should then be migrated to the <code>jvmArgs</code> property of the DexGuard block:</p> KotlinGroovy <pre><code>dexguard {\n    jvmArgs(\"-Xmx2048M\", \"-Dallow.incomplete.class.hierarchy=true\")\n    // ...\n}\n</code></pre> <pre><code>dexguard {\n    jvmArgs '-Xmx2048M', '-Dallow.incomplete.class.hierarchy=true'\n    // ...\n}\n</code></pre>"},{"location":"setup/upgrading.html#executing-dexguard_1","title":"Executing DexGuard","text":"<p>DexGuard outputs location</p> <p>The protected artefact is placed alongisde the unprotected one and has  a <code>-protected</code> suffix in the name.</p> <p>All other output files are collected in the <code>build/outputs/dexguard</code> directory. </p> <p>A major difference between executing DexGuard 8.x and DexGuard 9.10 is that the protected application or library is built separately from the original. This means that the original will still be in the standard Android build location e.g. for a release application (APK) variant in <code>build/outputs/apk/release/</code>  DexGuard will produce the corresponding protected application in the same location and add a <code>-protected</code> suffix  to the name.</p> <p>DexGuard will still be executed when you run the <code>assemble</code> task. For example, <code>./gradlew assembleRelease</code> will build the unobfuscated application and then execute DexGuard to build the protected application.</p> <p><code>install</code> task</p> <p>You can no longer use the <code>install</code> task to install an application as this will install the unprotected application, instead you can use <code>adb</code> e.g. <code>adb install build/outputs/apk/release/MyApp-release-protected.apk</code>.</p> <p>You can choose to run DexGuard in standalone mode or use the DexGuard Gradle plugin. See the quickstart section to continue setting up DexGuard.</p>"},{"location":"tools/androidstudio.html","title":"Android Studio Plugin","text":""},{"location":"tools/androidstudio.html#setting-up-your-project","title":"Setting up your project","text":"<p>You can develop your application or library as normal and apply DexGuard to the result, as documented in the command line section.</p> <p>Android Studio creates a standard <code>build.gradle</code> file in your project. You can optionally apply the DexGuard Gradle plugin, as documented in the Gradle Plugin section.</p>"},{"location":"tools/androidstudio.html#setting-up-the-optional-dexguard-configuration-editor-plugin","title":"Setting up the optional DexGuard configuration-editor plugin","text":"<p>When editing ProGuard and DexGuard configuration files from the editor within Android Studio, the DexGuard plugin for Android Studio provides:</p> <ul> <li>syntax highlighting and validation; valid flags and keywords are highlighted,   while invalid rules are red-underlined, to indicate an error</li> <li>syntax completion; valid flags, keywords, and class names are suggested while   typing</li> <li>the identification of some common anti-patterns; some redundant or otherwise   incorrect rules are yellow-underlined, to indicate a warning</li> </ul> <p>To install the plugin, open the Android Studio Preferences, and select \"Plugins\". Show \"All Plugins\" to see a list of the currently installed plugins. If \"DexGuard\" is not listed, select \"Install plugin from disk...\". Choose the plugin from the DexGuard <code>studio</code> directory:</p> <pre><code>    com.guardsquare.dexguard.studio_*.jar\n</code></pre> <p>The DexGuard plugin will appear in the list of installed plugins. If the checkbox next to the DexGuard plugin is not marked, enable the DexGuard plugin by marking the checkbox.</p> <p>As with the installation of any plugin, a restart of Android Studio is recommended.</p> <p>By default, the file types automatically recognized by the plugin are:</p> <ul> <li><code>dexguard-*.txt</code></li> <li><code>dexguard.cfg</code></li> </ul> <p>These can be changed in the Android Studio Preferences, by selecting \"Editor \u203a File Types\". The registered file types are shown in the list. The file types associated with the DexGuard plugin are shown under \"DexGuard Rules Language\".</p> <p>Note that Android Studio uses its own validation for ProGuard rules, which are recognized by the file types:</p> <ul> <li><code>*.pro</code></li> <li><code>proguard-*.txt</code></li> <li><code>proguard.cfg</code></li> </ul> <p>For the DexGuard plugin to apply to such a file, it must be renamed to one of the file types associated with the DexGuard plugin.</p>"},{"location":"tools/libraryrulesgenerator.html","title":"Library Rules Generator","text":"<p>In order to generate all keep rules to instruct DexGuard to not touch anything contained in an aar file, you can execute the following Bash script on macOS or Linux</p> <pre><code>bin/generate_keep_rules.sh &lt;aar file&gt;\n</code></pre> <p>or this batch script on Windows</p> <pre><code>bin/generate_keep_rules.bat &lt;aar file&gt;\n</code></pre> <p>This will output a list of all required <code>-keep</code>, <code>-keepresourcefiles</code> and <code>-keepresources</code> rules for elements contained in the aar file.</p>"},{"location":"tools/retrace.html","title":"ReTrace","text":"<p>ReTrace is a companion tool for DexGuard (and for ProGuard) that 'de-obfuscates' stack traces.</p> <p>When an obfuscated program throws an exception, the resulting stack trace typically isn't very informative. Class names and method names have been replaced by short meaningless strings. Source file names and line numbers are missing altogether. While this may be intentional, it can also be inconvenient when debugging problems.</p> Original code DexGuard Obfuscated code Mapping file Crash! Readable stack trace ReTrace Obfuscated stack trace <p>ReTrace can read an obfuscated stack trace and restore it to what it would look like without obfuscation. The restoration is based on the mapping file that DexGuard can write out while obfuscating. The mapping file links the original class names and class member names to their obfuscated names.</p> <p>Note</p> <p>The DexGuard Gradle plugin automatically writes out the mapping file to <code>build/outputs/dexguard/mapping/&lt;variant&gt;/mapping.txt</code>. The mapping file is not generated when <code>-dontobfuscate</code> is specified, as in the debug default configuration <code>dexguard-debug.pro</code>.</p>"},{"location":"tools/retrace.html#usage","title":"Usage","text":"<p>You can find the ReTrace jar in the <code>lib</code> directory of the DexGuard distribution. To run ReTrace, just type:</p> <p><code>java -jar retrace.jar</code>[options...] mapping_file [stacktrace_file]</p> <p>Alternatively, the <code>bin</code> directory contains some short Linux and Windows scripts containing this command. These are the arguments:</p> mapping_file Specifies the name of the mapping file, produced by DexGuard with the   option \"<code>-printmapping</code> mapping_file\",   while obfuscating the application that produced the stack trace. stacktrace_file Optionally specifies the name of the file containing the stack trace. If   no file is specified, a stack trace is read from the standard input. The   stack trace must be encoded with UTF-8 encoding. Blank lines and   unrecognized lines are ignored. <p>The following options are supported:</p> <code>-verbose</code> Specifies to print out more informative stack traces that include not only   method names, but also method return types and arguments. <code>-greedy</code> Attempts to retrace obfuscated classnames in otherwise unrecognized lines.   Ths option might result in reduced performance when retracing large log files. <code>-regex</code> regular_expression <p>Specifies the regular expression that is used to parse the lines in the   stack trace. Specifying a different regular expression allows to   de-obfuscate more general types of input than just stack traces. A relatively   simple expression like this works for basic stack trace formats:</p> <pre><code>(?:.*? at %c\\.%m\\(%s(?::%l)?\\))|(?:(?:.*?[:\"] +)?%c(?::.*)?)\n</code></pre> <p>It for instance matches the following lines:</p> <pre><code>Exception in thread \"main\" myapplication.MyException: Some message\n    at com.example.MyClass.myMethod(MyClass.java:123)\n</code></pre> <p>The regular expression is a Java regular expression (cfr. the   documentation of <code>java.util.regex.Pattern</code>), with a few additional   wildcards:</p> Wildcard Description Example <code>%c</code> matches a class name <code>com.example.MyClass</code> <code>%C</code> matches a class name with slashes <code>com/example/MyClass</code> <code>%t</code> matches a field type or method return type <code>com.example.MyClass[]</code> <code>%f</code> matches a field name <code>myField</code> <code>%m</code> matches a method name <code>myMethod</code> <code>%a</code> matches a list of method arguments <code>boolean,int</code> <code>%s</code> matches a source file name <code>MyClass.java</code> <code>%l</code> matches a line number inside a method <code>123</code> <p>Elements that match these wildcards are de-obfuscated,   when possible. Note that regular expressions must not contain any   capturing groups. Use non-capturing groups instead: <code>(?:</code>...<code>)</code></p> <p>You can print out the default regular expression by running ReTrace without   arguments. It also matches more complex stack traces.</p> <p>The restored stack trace is printed to the standard output. The completeness of the restored stack trace depends on the presence of line number tables in the obfuscated class files:</p> <ul> <li>If all line numbers have been preserved while obfuscating the   application, ReTrace will be able to restore the stack   trace completely.</li> <li>If the line numbers have been removed, mapping obfuscated method   names back to their original names has become ambiguous. Retrace   will list all possible original method names for each line in the   stack trace. The user can then try to deduce the actual stack trace   manually, based on the logic of the program.</li> </ul> <p>Preserving line number tables is explained in detail in this example in the DexGuard User Manual.</p> <p>Source file names are currently restored based on the names of the outer-most classes. If you prefer to keep the obfuscated name, you can replace <code>%s</code> in the default regular expression by <code>.*</code></p> <p>Unobfuscated elements and obfuscated elements for which no mapping is available will be left unchanged.</p>"},{"location":"tools/retrace.html#examples","title":"Examples","text":""},{"location":"tools/retrace.html#with","title":"Restoring a stack trace with line numbers","text":"<p>Assume for instance an application has been obfuscated using the following extra options:</p> <pre><code>-printmapping mapping.txt\n\n-renamesourcefileattribute MyApplication\n-keepattributes SourceFile,LineNumberTable\n</code></pre> <p>Now assume the processed application throws an exception:</p> <pre><code>java.io.IOException: Can't read [dummy.jar] (No such file or directory)\n    at proguard.y.a(MyApplication:188)\n    at proguard.y.a(MyApplication:158)\n    at proguard.y.a(MyApplication:136)\n    at proguard.y.a(MyApplication:66)\n    at proguard.ProGuard.c(MyApplication:218)\n    at proguard.ProGuard.a(MyApplication:82)\n    at proguard.ProGuard.main(MyApplication:538)\nCaused by: java.io.IOException: No such file or directory\n    at proguard.d.q.a(MyApplication:50)\n    at proguard.y.a(MyApplication:184)\n    ... 6 more\n</code></pre> <p>If we have saved the stack trace in a file <code>stacktrace.txt</code>, we can use the following command to recover the stack trace:</p> <pre><code>retrace mapping.txt stacktrace.txt\n</code></pre> <p>The output will correspond to the original stack trace:</p> <pre><code>java.io.IOException: Can't read [dummy.jar] (No such file or directory)\n    at proguard.InputReader.readInput(InputReader.java:188)\n    at proguard.InputReader.readInput(InputReader.java:158)\n    at proguard.InputReader.readInput(InputReader.java:136)\n    at proguard.InputReader.execute(InputReader.java:66)\n    at proguard.ProGuard.readInput(ProGuard.java:218)\n    at proguard.ProGuard.execute(ProGuard.java:82)\n    at proguard.ProGuard.main(ProGuard.java:538)\nCaused by: java.io.IOException: No such file or directory\n    at proguard.io.DirectoryPump.pumpDataEntries(DirectoryPump.java:50)\n    at proguard.InputReader.readInput(InputReader.java:184)\n    ... 6 more\n</code></pre>"},{"location":"tools/retrace.html#withverbose","title":"Restoring a stack trace with line numbers (verbose)","text":"<p>In the previous example, we could also use the verbose flag:</p> <pre><code>java -jar retrace.jar -verbose mapping.txt stacktrace.txt\n</code></pre> <p>The output will then look as follows:</p> <pre><code>java.io.IOException: Can't read [dummy.jar] (No such file or directory)\n    at proguard.InputReader.void readInput(java.lang.String,proguard.ClassPathEntry,proguard.io.DataEntryReader)(InputReader.java:188)\n    at proguard.InputReader.void readInput(java.lang.String,proguard.ClassPath,int,int,proguard.io.DataEntryReader)(InputReader.java:158)\n    at proguard.InputReader.void readInput(java.lang.String,proguard.ClassPath,proguard.io.DataEntryReader)(InputReader.java:136)\n    at proguard.InputReader.void execute(proguard.classfile.ClassPool,proguard.classfile.ClassPool)(InputReader.java:66)\n    at proguard.ProGuard.void readInput()(ProGuard.java:218)\n    at proguard.ProGuard.void execute()(ProGuard.java:82)\n    at proguard.ProGuard.void main(java.lang.String[])(ProGuard.java:538)\nCaused by: java.io.IOException: No such file or directory\n    at proguard.io.DirectoryPump.void pumpDataEntries(proguard.io.DataEntryReader)(DirectoryPump.java:50)\n    at proguard.InputReader.void readInput(java.lang.String,proguard.ClassPathEntry,proguard.io.DataEntryReader)(InputReader.java:184)\n    ... 6 more\n</code></pre>"},{"location":"tools/retrace.html#without","title":"Restoring a stack trace without line numbers","text":"<p>Assume for instance the application DexGuard has been obfuscated using the following extra options, this time without preserving the line number tables:</p> <pre><code>-printmapping mapping.txt\n</code></pre> <p>A stack trace <code>stacktrace.txt</code> will then lack line number information, showing \"Unknown source\" instead:</p> <pre><code>java.io.IOException: Can't read [dummy.jar] (No such file or directory)\n    at proguard.y.a(Unknown Source)\n    at proguard.y.a(Unknown Source)\n    at proguard.y.a(Unknown Source)\n    at proguard.y.a(Unknown Source)\n    at proguard.ProGuard.c(Unknown Source)\n    at proguard.ProGuard.a(Unknown Source)\n    at proguard.ProGuard.main(Unknown Source)\nCaused by: java.io.IOException: No such file or directory\n    at proguard.d.q.a(Unknown Source)\n    ... 7 more\n</code></pre> <p>We can still use the same command to recover the stack trace:</p> <pre><code>java -jar retrace.jar mapping.txt stacktrace.txt\n</code></pre> <p>The output will now list all alternative original method names for each ambiguous obfuscated method name:</p> <pre><code>java.io.IOException: Can't read [dummy.jar] (No such file or directory)\n    at proguard.InputReader.execute(InputReader.java)\n                            readInput(InputReader.java)\n    at proguard.InputReader.execute(InputReader.java)\n                            readInput(InputReader.java)\n    at proguard.InputReader.execute(InputReader.java)\n                            readInput(InputReader.java)\n    at proguard.InputReader.execute(InputReader.java)\n                            readInput(InputReader.java)\n    at proguard.ProGuard.readInput(ProGuard.java)\n    at proguard.ProGuard.execute(ProGuard.java)\n                         optimize(ProGuard.java)\n                         createPrintStream(ProGuard.java)\n                         closePrintStream(ProGuard.java)\n                         fileName(ProGuard.java)\n    at proguard.ProGuard.main(ProGuard.java)\nCaused by: java.io.IOException: No such file or directory\n    at proguard.io.DirectoryPump.pumpDataEntries(DirectoryPump.java)\n                                 readFiles(DirectoryPump.java)\n</code></pre> <p>For instance, ReTrace can't tell if the method <code>a</code> corresponds to <code>execute</code> or to <code>readInput</code>, so it lists both. You need to figure it out based on your knowledge of the application. Having line numbers and unambiguous names clearly is a lot easier, so you should consider preserving the line numbers when you obfuscate your application.</p>"},{"location":"tools/retrace.html#specifications","title":"Specifications","text":"<p>A mapping file contains the original names and the obfuscated names of classes, fields, and methods. DexGuard can write out such a file while obfuscating an application or a library, with the option <code>-printmapping</code>. ReTrace requires the mapping file to restore obfuscated stack traces to more readable versions. It is a readable file with UTF-8 encoding, so you can also look up names in an ordinary text viewer. The format is pretty self-explanatory, but we describe its details here.</p> <p>A mapping file contains a sequence of records of the following form:</p> <pre><code>classline\n    fieldline *\n    methodline *\n</code></pre> <p>A <code>classline</code>, with a trailing colon, specifies a class and its obfuscated name:</p> <pre><code>originalclassname -&gt; obfuscatedclassname:\n</code></pre> <p>A <code>fieldline</code>, with 4 leading spaces, specifies a field and its obfuscated name:</p> <pre><code>    originalfieldtype originalfieldname -&gt; obfuscatedfieldname\n</code></pre> <p>A <code>methodline</code>, with 4 leading spaces, specifies a method and its obfuscated name:</p> <pre><code>    [startline:endline:]originalreturntype [originalclassname.]originalmethodname(originalargumenttype,...)[:originalstartline[:originalendline]] -&gt; obfuscatedmethodname\n</code></pre> <ul> <li>An asterisk \"*\" means the line may occur any number of times.</li> <li>Square brackets \"[]\" mean that their contents are optional.</li> <li>Ellipsis dots \"...\" mean that  any number of the preceding items may be specified.</li> <li>The colon \":\", the separator \".\", and the arrow \"-&gt;\" are literal tokens.</li> </ul>"},{"location":"tools/retrace.html#example","title":"Example","text":"<p>The following snippet gives an impression of the structure of a mapping file:</p> <pre><code>com example.application.ArgumentWordReader -&gt; com.example.a.a:\n    java.lang.String[] arguments -&gt; a\n    int index -&gt; a\n    36:57:void &lt;init&gt;(java.lang.String[],java.io.File) -&gt; &lt;init&gt;\n    64:64:java.lang.String nextLine() -&gt; a\n    72:72:java.lang.String lineLocationDescription() -&gt; b\ncom.example.application.Main -&gt; com.example.application.Main:\n    com.example.application.Configuration configuration -&gt; a\n    50:66:void &lt;init&gt;(com.example.application.Configuration) -&gt; &lt;init&gt;\n    74:228:void execute() -&gt; a\n    2039:2056:void com.example.application.GPL.check():39:56 -&gt; a\n    2039:2056:void execute():76 -&gt; a\n    2236:2252:void printConfiguration():236:252 -&gt; a\n    2236:2252:void execute():80 -&gt; a\n    3040:3042:java.io.PrintWriter com.example.application.util.PrintWriterUtil.createPrintWriterOut(java.io.File):40:42 -&gt; a\n    3040:3042:void printConfiguration():243 -&gt; a\n    3040:3042:void execute():80 -&gt; a\n    3260:3268:void readInput():260:268 -&gt; a\n    3260:3268:void execute():97 -&gt; a\n</code></pre> <p>You can see the names of classes and their fields and methods:</p> <ul> <li>The fields and methods are listed in ProGuard configuration format (javap   format), with descriptors that have return types and argument types but no   argument names. In the above example:<pre><code>void &lt;init&gt;(java.lang.String[],java.io.File)\n</code></pre> </li> </ul> <p>refers to a constructor with a <code>String</code> array argument and a <code>File</code>   argument.</p> <ul> <li>A method may have a leading line number range, if it is known from the   original source code (see Producing useful obfuscated stack   traces in the Examples section). Unlike method   names, line numbers are unique within a class, so ReTrace can resolve lines   in a stack trace without ambiguities. For example:<pre><code>74:228:void execute()\n</code></pre> </li> </ul> <p>refers to a method <code>execute</code>, defined on lines 74 to 228.</p> <ul> <li>The obfuscated method name follows the arrow. For example:<pre><code>74:228:void execute() -&gt; a\n</code></pre> </li> </ul> <p>shows that method <code>execute</code> has been renamed to <code>a</code>. Multiple fields and   methods can get the same obfuscated names, as long as their descriptors   are different.</p>"},{"location":"tools/retrace.html#inlined-methods","title":"Inlined methods","text":"<p>The mapping file accounts for the added complexity of inlined methods (as of ProGuard/ReTrace version 5.2). The optimization step may inline methods into other methods \u2014 recursively even. A single line in an obfuscated stack trace can then correspond to multiple lines in the original stack trace: the line that throws the exception followed by one or more nested method calls. In such cases, the mapping file repeats the leading line number range on subsequent lines. For example:</p> <pre><code>3040:3042:java.io.PrintWriter com.example.application.util.PrintWriterUtil.createPrintWriterOut(java.io.File):40:42 -&gt; a\n3040:3042:void printConfiguration():243 -&gt; a\n3040:3042:void execute():80 -&gt; a\n</code></pre> <ul> <li>The subsequent lines correspond to the subsequent lines of the original   stack trace. For example:<pre><code>3040:3042:java.io.PrintWriter com.example.application.util.PrintWriterUtil.createPrintWriterOut(java.io.File):40:42 -&gt; a\n3040:3042:void printConfiguration():243 -&gt; a\n3040:3042:void execute():80 -&gt; a\n</code></pre> </li> </ul> <p>refers to method <code>createPrintWriterOut</code> called from and inlined in   <code>printConfiguration</code>, in turn called from and inlined in method <code>execute</code>.</p> <ul> <li>An original method name may have a preceding class name, if the method   originates from a different class. For example:<pre><code>3040:3042:java.io.PrintWriter com.example.application.util.PrintWriterUtil.createPrintWriterOut(java.io.File):40:42 -&gt; a\n</code></pre> </li> </ul> <p>shows that method <code>createPrintWriterOut</code> was originally defined in class   <code>PrintWriterUtil</code>.</p> <ul> <li>A single trailing line number corresponds to an inlined method call. For   example:<pre><code>3040:3042:java.io.PrintWriter com.example.application.util.PrintWriterUtil.createPrintWriterOut(java.io.File):40:42 -&gt; a\n3040:3042:void printConfiguration():243 -&gt; a\n3040:3042:void execute():80 -&gt; a\n</code></pre> </li> </ul> <p>specifies that method <code>execute</code> called <code>printConfiguration</code> on line 80,   and <code>printconfiguration</code> called <code>createPrintWriterOut</code> on line 243.</p> <ul> <li>A traling line number range corresponds to the final inlined method body.   For example:<pre><code>3040:3042:java.io.PrintWriter com.example.application.util.PrintWriterUtil.createPrintWriterOut(java.io.File):40:42 -&gt; a\n</code></pre> </li> </ul> <p>shows that method <code>createPrintWriterOut</code> covered lines 40 to 42.</p> <ul> <li>The leading line number range is synthetic, to avoid ambiguities with other   code in the same class. DexGuard makes up the range, but tries to make it   similar-looking to the original code (by adding offsets that are multiples   of 1000), for convenience. For example:<pre><code>3040:3042:java.io.PrintWriter com.example.application.util.PrintWriterUtil.createPrintWriterOut(java.io.File):40:42 -&gt; a\n</code></pre> </li> </ul> <p>created synthetic range 3040:3042 in the bytecode of class <code>Main</code> to be   unique but still resemble source code range 40:42 in class   <code>PrintWriterUtil</code>.</p> <p>Tools that don't account for these repeated line number ranges, like older versions of ReTrace, may still degrade gracefully by outputting the subsequent lines without interpreting them.</p>"},{"location":"troubleshooting/knownissues.html","title":"Known Issues","text":""},{"location":"troubleshooting/knownissues.html#playintegritycompat","title":"Incompatibilities with Google Play's Automatic Integrity Protection","text":"<p>When publishing an app on Google Play, you have the option to enable Automatic Integrity Protection. This feature carries out modifications to the app, which are incompatible with DexGuard's obfuscation and integrity features. We recommend that you rely on DexGuard's integrity protections and  disable Automatic Integrity Protection for your application.</p> <p>If both Automatic Integrity Protection and DexGuard features are enabled, this can lead  to RASP false positives and/or app crashes.</p>"},{"location":"troubleshooting/knownissues.html#disabling-automatic-integrity-protection","title":"Disabling Automatic Integrity Protection","text":"<p>If Automatic Integrity protection is available for your app, you will be able to configure it when making a release. On the release page, you will see a button that says \"Manage integrity protection\". Click this button and then turn off Automatic Integrity Protection by clicking \"No\" under \"Automatic Integrity Protection\".</p>"},{"location":"troubleshooting/knownissues.html#preserveruntimeinvisibleannotations","title":"Preserving runtime-invisible annotations","text":"<p>Info</p> <p>If you are using AGP 7.2 or higher, DexGuard automatically handles this case and you don't need to apply the workaround described here.</p> <p>Warning</p> <p>If you are using Hilt in combination with unit tests in your Android application project, the automatic handling of runtime invisible annotations in DexGuard will be disabled due to a compatibility in how the two plugins (DexGuard and Hilt) interact. In this case, you still need to apply the workaround below.</p> <p>By default, the Android build tools (D8/R8) strip runtime-invisible annotations when building release configurations. This may be a problem when  using annotation based DexGuard configuration or when using DexGuard with Espresso testing.</p> <p>Some known cases where this workaround is required are when using Realm or React Native.</p> <p>For Android Gradle Plugin 7.2. and above, DexGuard will preserve these annotations by default.</p> <p>If you are using Android Gradle Plugin version below 7.2., you can preserve the annotations by making the following changes to your <code>build.gradle</code> file:</p> KotlinGroovy <pre><code>buildTypes {\n  getByName(\"release\") {\n      ...\n      // Enable R8 for the build type.\n      isMinifyEnabled = true\n      // Supply the configuration detailed below.\n      proguardFile(\"r8-rules.pro\")\n  }\n  ...\n}\n</code></pre> <pre><code>buildTypes {\n  release {\n      ...\n      // Enable R8 for the build type.\n      minifyEnabled true\n      // Supply the configuration detailed below.\n      proguardFile \"r8-rules.pro\"\n  }\n  ...\n}\n</code></pre> <p>The configuration that is supplied to R8 this way instructs it to do nothing and  causes the runtime-invisible annotations to not be stripped.</p> <pre><code># r8-rules.pro\n-dontobfuscate\n-dontoptimize\n-dontshrink\n</code></pre> <p>Please note that this workaround is the only exception where <code>minifyEnabled</code> should be  set to true on a DexGuard-enabled build type. For all other DexGuard-enabled build types,  make sure to set <code>minifyEnabled</code> to false.</p>"},{"location":"troubleshooting/knownissues.html#retrofit-annotations-are-not-encrypted","title":"Retrofit annotations are not encrypted","text":"<p>Retrofit allows you to use annotations to describe your HTTP endpoints. For example: <pre><code>public interface GitHubService {\n  @GET(\"users/{user}/repos\")\n  Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(\"user\") String user);\n}\n</code></pre></p> <p>Due to how annotations work on the bytecode level, we currently don't support encrypting the <code>\"users/{user}/repos\"</code> string.</p> <p>If you are using Retrofit 2, you can use the <code>@Url</code> annotation instead: <pre><code>public interface GitHubService {\n  @GET\n  Call&lt;List&lt;Repo&gt;&gt; listRepos(@Url String url);\n}\n</code></pre></p> <p>You can then add the URL as a constant to one of your classes, which you can then use when invoking the API. This way, the URL can be encrypted if you target it with an <code>-encryptstrings</code> rule.</p>"},{"location":"troubleshooting/knownissues.html#osspluginerror","title":"T3889: OSS Licenses Gradle Plugin integration error","text":"<p>If you are using the OSS Licenses Gradle Plugin and the build fails with an error stating that the licenses cannot be generated, this is due to the OSS licenses plugin picking up dependencies that have been transformed by DexGuard. Since DexGuard version 9, dependency transforms are registered to perform some operations such as collecting library JARs and consumer rules. The plugin incorrectly picks up duplicate dependencies in their original and transformed form and puts them both in the dependencies.json file, when it should pick up only the originals.</p> <p>As a workaround, register the task below and insert it between the following tasks of the plugin: getDependencies, which creates dependencies.json, and generateLicenses, which uses dependencies.json. This task deletes the transformed dependencies from the JSON file.</p> <pre><code>tasks.register(\"shrinkJson\") {\n    doLast {\n        String path = \"${project.buildDir}/generated/third_party_licenses/dependencies.json\"\n        File jsonFile = new File(path)\n        def pattern = ~/.*?\\{(\\r\\n|\\r|\\n).*(\\r\\n|\\r|\\n).*(\\r\\n|\\r|\\n).*(\\r\\n|\\r|\\n).*?\"name\":\\s.+\\d\".*?(\\r\\n|\\r|\\n).*?\\},/\n\n        String content = jsonFile.getText()\n        content = content.replaceAll(pattern, \"\")\n        jsonFile.setText(content)\n    }\n    dependsOn getDependencies\n}\n\ngenerateLicenses.dependsOn(shrinkJson)\n</code></pre>"},{"location":"troubleshooting/knownissues.html#runtimemavenpublish","title":"Using the maven-publish plugin for SDKs while having a dependency on the DexGuard runtime library","text":"<p>When you manually invoke DexGuard's RASP checks in an SDK, it is required that you add a dependency on the DexGuard  runtime. However, when you then publish the library for release using the maven-publish plugin, it will add a dependency on the DexGuard runtime library to its pom file. This is an issue, as consumers of the library will not have access to the DexGuard runtime library, and it is not permitted to distribute the DexGuard runtime alongside your library.</p> <p>To work around this, there are two possible solutions.</p>"},{"location":"troubleshooting/knownissues.html#add-a-compileonly-dependency","title":"Add a <code>compileOnly</code> dependency","text":"<p>The easiest option involves specifying the DexGuard runtime as a <code>compileOnly</code> dependency of your releasable artifact. In this case, it is clear to the maven-publish plugin that the dependency is not needed for consumers of the library and the dependency will not be added to its pom file. DexGuard will take care of injecting the necessary code and  libraries into your library at processing time.</p> <p>A downside to this approach is that the unprotected version of your artifact will not have the necessary code and  libraries injected and will therefore be non-functional. If this is an issue, the alternative workaround below can  be used instead.</p>"},{"location":"troubleshooting/knownissues.html#add-an-implementation-dependency-with-pom-file-dependency-filtering","title":"Add an <code>implementation</code> dependency with pom file dependency filtering","text":"<p>Alternatively, the DexGuard runtime library can be specified as an implementation dependency. In this case, the DexGuard runtime has to be filtered explicitly from the list of dependencies that makes it into the  pom file. You can do so as follows:</p> <pre><code>publishing {\n    publications {\n        maven(MavenPublication) {\n            groupId 'com.example'\n            artifactId 'mylibrary'\n            version '1.0.0'\n            artifact \"$buildDir/outputs/aar/mylibrary-release-protected.aar\"\n\n            // This section will filter out the dexguard-runtime dependency.\n            pom.withXml {\n                def dependenciesNode = asNode().appendNode('dependencies')\n                configurations.implementation.allDependencies.each { dependency -&gt;\n                    if (dependency.name != 'unspecified' &amp;&amp; !dependency.name.contains(\"dexguard-runtime\")) {\n                        def dependencyNode = dependenciesNode.appendNode('dependency')\n                        dependencyNode.appendNode('groupId', dependency.group)\n                        dependencyNode.appendNode('artifactId', dependency.name)\n                        dependencyNode.appendNode('version', dependency.version)\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"troubleshooting/knownissues.html#gradlepluginversionmismatch","title":"T22736: After upgrading DexGuard, the DexGuard Gradle Plugin crashes with <code>DexGuard version needs to be &lt;current-version&gt; to be used with the DexGuard Gradle plugin, but version &lt;previous-version&gt; was used</code>","text":"<p>Please try stopping the Gradle Daemon. Follow these steps:</p> <ul> <li>Navigate to the root directory of your project.</li> <li>Run the command to stop the Gradle Daemon.<ul> <li>On Linux or macOS: <code>./gradlew --stop</code></li> <li>On Windows: <code>gradlew.bat --stop</code></li> </ul> </li> <li>Try building your project again.</li> </ul>"},{"location":"troubleshooting/knownissues.html#microsoftdefenderfalsepositives","title":"Microsoft Defender wrongly flags obfuscated apps as a virus","text":"<p>Viruses often use obfuscation to protect their implementation code. Microsoft Defender is trained to detect these patterns and thus sometimes wrongly classifies other obfuscated code as being a virus. This can result in build failures when processing your app with DexGuard or issues transferring protected applications between devices.</p> <p>In case of processing issues, the involved folder should be excluded from Microsoft Defender protection. In case of an issue with transferring files, the protected application can be manually defined as secure by the user.</p>"},{"location":"troubleshooting/knownissues.html#natificationdebugdir","title":"T22950: Unknown option '-natificationdebugdir'","text":"<p>When upgrading from DexGuard 9.3.x to 9.4.x, this error might appear if your DexGuard Gradle plugin is out-of-sync with your DexGuard version. For DexGuard version 9.4.x, the DexGuard Gradle plugin version should be identical. For example, DexGuard 9.4.5 expects Gradle plugin version 9.4.5. Make sure this is the case in your build.gradle and rebuild your project. </p>"},{"location":"troubleshooting/knownissues.html#intunecompatibility","title":"T24327: Incompatibility between the Microsoft Intune Mobile Application Management SDK and the hook detector.","text":"<p>The Microsoft Intune Mobile Application Management (MAM) SDK uses hooks to achieve some of its functionality. This  creates an incompatibility with the hook detector, since it will trigger when such hooks are found. This can occur when  the hook detector is used directly in an application that has the MAM SDK enabled, or when an SDK that uses the hook detector is consumed by an application that has the MAM SDK enabled.</p> <p>To prevent this from occurring, you can supply the <code>-intunecompatibility</code> option in your DexGuard configuration. This option will make sure that if the MAM SDKs libraries are detected, certain hooking behavior is ignored to avoid false positives. If the libraries are not detected, the hook detector carries out its checks as usual.</p>"},{"location":"troubleshooting/knownissues.html#reflectapi21","title":"Incompatibility with reflected access of array types and Android 5.0 devices","text":"<p>Due to a bug on older Android 5 devices, runtime crashes may arise when accessing through reflection methods taking array types as parameters. These typically take the form of a <code>ClassNotFoundException</code> for a class that is not actually missing from the protected application. In particular, this will happen when reflecting methods with a variable number of arguments as this is internally represented as an array. In such cases, the only possible way to support these devices is to disable access through reflection for the given method and class encryption for the associated parameter class.</p>"},{"location":"troubleshooting/knownissues.html#crashlyticsincompatibility","title":"Incompatibility between the debug blocker and crashlytics native crash reporter","text":"<p>Firebase Crashlytics is unable to report native crashes when debug blocker is enabled, as the latter will prevent Crashlytics from attaching the required debug process to the application. Only one of the features (debug blocker or Crashlytics native crash reporter) can be enabled at the same time.</p>"},{"location":"troubleshooting/reportingissues.html","title":"Reporting Issues","text":"<p>When you cannot find the solution to a problem after experimenting with the suggestions in the Troubleshooting section, please reach out to Guardsquare support.</p> <p>In order for our support team to efficiently process your support request, please describe in detail the context of your issue. In general, the following data is especially relevant to send along when contacting us:</p> <ul> <li>The version of DexGuard that you are using.</li> <li>A description of which features you have disabled or which keep rules you have tried out.</li> <li>The used DexGuard configuration file(s), like e.g. <code>dexguard-project.txt</code>.</li> <li>The full configuration as printed by adding <code>-printconfiguration fullconfig.pro</code> to your DexGuard configuration file.</li> <li>In case of a crash, the verbose stacktrace of the crash (build-time or runtime).</li> <li>In case of a crash, the crashing apk, aar or aab file.</li> <li>The full contents of the <code>build/outputs/dexguard</code> directory.</li> <li>The project's <code>build.gradle</code> files.</li> <li> <p>In case of build issues, the generated DexGuard build log. It can be obtained by executing following command:</p> Linux/macOSWindows <pre><code>./gradlew assembleRelease &gt;build.log 2&gt;&amp;1 --stacktrace\n</code></pre> <pre><code>gradlew assembleRelease &gt;build.log 2&gt;&amp;1 --stacktrace\n</code></pre> </li> <li> <p>The unobfuscated apk, aar, or aab file for comparison.</p> </li> </ul>"},{"location":"troubleshooting/reportingissues.html#reproducible-package","title":"Reproducible package","text":"<p>In order to efficiently provide some of the above information, you can create a reproducible package using the <code>-archivedebugfiles</code> configuration option, which will speed up investigations into the root cause of issues. You can do this by adding the following to your DexGuard configuration:</p> <pre><code>-archivedebugfiles,includeinput,includeprotected repro.zip\n</code></pre> <p>This option packages the inputs and outputs of DexGuard in a zip file. The unobfuscated and obfuscated application or library, all dependencies, all mapping files, all reports and the full configuration will be packaged in the specified zip file to allow easily reproducing issues.</p> <p>Using the above rule, your unprotected and protected application will end up in the debug archive, which is useful for us to investigate possible issues. When omitting the <code>includeinput</code> modifier, the unprotected application and any dependencies will not be packaged in the debug archive. When omitting the <code>includeprotected</code> modifier, the protected application will not be packaged.</p>"},{"location":"troubleshooting/reportingissues.html#tips-for-providing-information","title":"Tips for providing information","text":"<p>In order to ensure efficient usage of any information you send us, please take the following into consideration:</p> <ul> <li>Please provide stacktraces or logs as text files, rather than screenshots or Word documents.</li> <li>Ensure that logs are complete, rather than just the final error message.</li> <li>Ensure that you provide complete stacktraces - sometimes these can be split by other messages in the log.</li> <li>If you provide an obfuscated stacktrace, please ensure that you also provide the corresponding <code>mapping.txt</code> file.</li> <li>If you cannot provide a mapping file, you can deobfuscate the stacktrace yourself using the ReTrace tool.</li> <li>If you suspect a crash is caused by a triggering RASP check, or are unsure if this is the case, using the ReTrace tool to retrace the stack trace will reveal whether it was a triggering RASP check and which check it was.</li> </ul>"},{"location":"video-tutorials/menu.html","title":"DexGuard video tutorials","text":"<p>You can use the following video series as a step-by-step guide on how to setup, configure, and debug general issues using Dexguard's manual configuration workflow.</p> <p>Note</p> <p>These videos are NOT intended to be used for the guided configuration workflow. They are only applicable to the manual configuration workflow.  </p> <p> Welcome to Guardsquare Start using Guardsquare to protect your mobile application. Duration: 1 min 39 sec <p></p> <p> Getting Started Finding the necessary information to get started including manuals, software, licenses and more. Duration: 3 min 28 sec <p></p> <p> Integration Preparing &amp; integrating the tool into your development environment to then create your first protected build. Duration: 5 min 04 sec <p></p> <p> Handling crashes Configuring and debugging DexGuard\u2019s default enabled features: name obfuscation, shrinking and optimisation. Duration: 18 min 16 sec <p></p> <p> Handling performance issues Configuring hook &amp; debug detection while learning to handle performance issues. Duration: 6 min 41 sec <p></p> <p> Enabling RASP features Enable and configure remaining RASPs. Duration: 4 min 41 sec <p></p> <p> Enabling static features Configuring DexGuard to further protect security sensitive information from static analysis. Duration: 6 min 00 sec <p></p> <p> General considerations Analyse, troubleshoot, upgrade and automate your protections. Duration: 4 min 29 sec <p></p>"},{"location":"video-tutorials/video-0.html","title":"Welcome to Guardsquare","text":"Description <p>In this video you will learn how to:</p> <ul> <li>protect your application through your entire SDLC using Guardsquare\u2019s protect, test, and monitor strategy;</li> <li>configure both static and dynamic types of protection;</li> <li>leverage polymorphism and multilayered protection.</li> </ul> <p>Duration: 1 min 39 sec</p> <p>Back to all videos</p>"},{"location":"video-tutorials/video-1.html","title":"Getting started","text":"DescriptionRelevant Links <p>In this video you will learn how to:</p> <ul> <li>Guardsquare platform is the central point of all resources and downloads;</li> <li>reach out to us at support@guardsquare.com for help and advice.</li> </ul> <p>Duration: 3 min 28 sec</p> <p>Here you can find relevant links from the video tutorial:</p> <ul> <li>www.guardsquare.com</li> <li>Reporting issues</li> <li>Quick start</li> </ul> <p>Back to all videos</p>"},{"location":"video-tutorials/video-2.html","title":"Integration","text":"DescriptionRelevant Links <p>In this video you will learn how to:</p> <ul> <li>download DexGuard and prepare environment;</li> <li>integrate DexGuard using Gradle plug-in;</li> <li>taking a look at DexGuard artifacts.</li> </ul> <p>Duration: 5 min 04 sec</p> <p>Here you can find relevant links from the video tutorial:</p> <ul> <li>Setting up the Gradle plugin</li> </ul> <p>Back to all videos</p>"},{"location":"video-tutorials/video-3.html","title":"Handling crashes","text":"DescriptionCode sampleRelevant Links <p>In this video you will learn how to:</p> <ul> <li>denylist features and how to fine-tune;</li> <li>automatically handle issues with the 2 phase process: Profiling and Testing;</li> <li>tips for manual debugging.</li> </ul> <p>Duration: 18 min 16 sec</p> <p>Below are the code snippets referenced in the video:</p> <p>build.gradle file<pre><code>dexguard {\n  path = \"path/to/DexGuard\"\n  license = \"dexguard-license.txt\"\n  configurations {\n    register(\"release\") {\n      defaultConfiguration(\"dexguard-release.pro\")\n      configuration(\"dexguard-project.txt\")\n      configuration(\"dexguard-debugging-rules.txt\")\n    }\n  }\n}\n</code></pre> dexguard-project.txt file<pre><code># [ Phase 1 ]: Acquire Profiling Data\n# Note: Don't forget to comment the following two lines before proceeding with step 2\n-addconfigurationdebugging\n-addprofiling\n\n# [ Phase 2 ]: Use Profiling Data to Guide Obfuscation\n# Note: Link the profiling data file here\n-profilingdata path/to/profilingdata.pb\n</code></pre></p> <p>Here you can find relevant links from the video tutorial:</p> <ul> <li>Profile-guided obfuscation</li> <li>Automated configuration phase</li> <li>Get configuration suggestions at run-time</li> </ul> <p>Back to all videos</p>"},{"location":"video-tutorials/video-4.html","title":"Handling performance issues","text":"DescriptionCode sampleRelevant Links <p>In this video you will learn how to:</p> <ul> <li>on/off features, and how to configure them;</li> <li>fine-tuning RASP injection.</li> </ul> <p>Duration: 6 min 41 sec</p> <p>Below are the code snippets referenced in the video:</p> dexguard-project.txt file<pre><code># Performance improvement tool\n-profilingdata /path/to/profilingdata.pb\n\n#-addconfigurationdebugging\n\n# To enable/disable RASP checks\n-raspchecks hook, debug\n\n# To enable/disable crash behavior\n-raspcontinueon none\n\n# To prevent injection into performance-sensitive function\n# NOTE: This option should not be used. Use the `-raspdenylist` rule below instead.\n# -raspclassfilter class !com.example.BottleneckActivity\n\n# Instead of `-raspclassfilter`, we advise to use the `-raspdenylist` option instead.\n-raspdenylist class com.example.BottleneckActivity { *; }\n\n# To set the RASP aggressiveness levels\n-raspaggressiveness hook medium\n</code></pre> <p>Here you can find relevant links from the video tutorial:</p> <ul> <li>Available RASP checks</li> <li>Define a reaction strategy</li> </ul> <p>Back to all videos</p>"},{"location":"video-tutorials/video-5.html","title":"Enabling RASP features","text":"DescriptionCode sampleRelevant Links <p>In this video you will learn how to:</p> <ul> <li>configure response to threats;</li> <li>configure RASP injection strategy;</li> <li>working with polymorphism.</li> </ul> <p>Duration: 4 min 41 sec</p> dexguard-project.txt file<pre><code># Performance improvement tool\n-profilingdata /path/to/profilingdata.pb\n\n#-addconfigurationdebugging\n\n-raspchecks *\n-raspcontinueon none\n\n-raspfiletamperlist assets/main.js,assets/secret.js\n-raspcertificatehash \"EBB0FEDF1942A099B287C3DB00FF732162152481ABB2B6C7CBCDB2BA5894A768\"\n</code></pre> <p>Here you can find relevant links from the video tutorial:</p> <ul> <li>Runtime Application Self-Protection (RASP) </li> </ul> <p>Back to all videos</p>"},{"location":"video-tutorials/video-6.html","title":"Enabling static features","text":"DescriptionRelevant Links <p>In this video you will learn how to:</p> <ul> <li>enable all obfuscation and encryption features;</li> <li>utilize multiple different strategies to encrypt and obfuscate;</li> <li>configure aggressiveness level;</li> <li>leveraging multilayered protection.</li> </ul> <p>Duration: 6 min 00 sec</p> <p>Here you can find relevant links from the video tutorial:</p> <ul> <li>Protection features overview</li> </ul> <p>Back to all videos</p>"},{"location":"video-tutorials/video-7.html","title":"General considerations","text":"DescriptionRelevant Links <p>In this video you will learn how to:</p> <ul> <li>leverage the protection report;</li> <li>troubleshooting guide;</li> <li>upgrade considerations;</li> <li>practical guide: CI/CD integration.</li> </ul> <p>Duration: 4 min 29 sec</p> <p>Here you can find relevant links from the video tutorial:</p> <ul> <li>Protection report</li> <li>Troubleshooting</li> <li>Reporting issues</li> <li>Upgrading</li> <li>Repository</li> </ul> <p>Back to all videos</p>"}]}